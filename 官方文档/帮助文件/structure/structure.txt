UF_MODL - loop_list
loop_list
(view source)
Defined in: uf_modl_types.h
Also known as:
uf_loop_t
uf_loop_p_t
Data Members
type
int
Peripheral=1, Hole=2, Other=3
edge_list
uf_list_t *
Pointer to the next list of
edge EIDs
next
struct loop_list *
Pointer to the next loop

------------

UF_MB - MB_activated_button_s
MB_activated_button_s
(view source)
Defined in: uf_mb.h
Also known as:
UF_MB_activated_button_t
UF_MB_activated_button_p_t
Overview
Button callback functions for MenuScript button actions are of type
UF_MB_cb_status_t.  The third argument of for these callbacks is a pointer
to a UF_MB_activated_button_t structure.  This structure provides
information about the button that triggered the callback.  The ancestors
array contains the names of all of the cascade buttons that were
were traversed to reach the activated button.  The ancestor list will be
the same regardless of whether the the ancestor hierarchy was actually
traversed, or whether the button was activated via a tear-off menu or
playing back a macro.
Data Members
id
UF_MB_button_id_t
button's unique ID number
type
UF_MB_button_type_t
type of button
name
char *
name of the button
menubar_name
char *
name of parent menubar/popup
num_ancestors
int
number of ancestors (cascades)
ancestors
char * *
names of ancestors
app_id
int
application identifier for APP

------------

UF_MODL - method_list
method_list
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_METHOD_t
UF_METHOD_p_t
Data Members
method
int
inter
int
id
tag_t
value [ 3 ]
double
s_curve
UF_STRING_p_t

------------

UF_SF - sCAET_mesh_check_result_s
sCAET_mesh_check_result_s
(view source)
Defined in: uf_sf_element_check.h
Also known as:
sCAET_mesh_check_result_t
Overview
This struct is for the criteria used in elemet check
Data Members
elem_type
int
element type
fail_count_aspect
int
failed aspect ratio
fail_count_warp
int
failed warp
fail_count_taper
int
failed taper
fail_count_skew
int
failed skew
fail_count_jacob_ratio
int
failed Jacobian ratio
fail_count_jacob_zero
int
failed Jacobian zero
fail_count_min_angle
int
failed mininum angle
fail_count_max_angle
int
failed maximum angle
total_fail_count
int
total failed elements

------------

UF_SF - sCAET_mesh_test_case_s
sCAET_mesh_test_case_s
(view source)
Defined in: uf_sf_element_check.h
Also known as:
sCAET_mesh_test_case_t
Overview
The struct is for overall test reporting
Data Members
part_file [ UF_SF_LANG_MAX_NAME_BUFSIZE ]
char
part file name
solver [ UF_SF_LANG_MAX_NAME_BUFSIZE ]
char
solver name
test_param
UF_SF_atm_mesh_parameters_data_t
mesh parameters

------------

UF_MODL - SPLINE_FIT_s
SPLINE_FIT_s
(view source)
Defined in: uf_modl_types.h
Also known as:
SPLINE_FIT_t
SPLINE_FIT_p_t
Overview
Define the data structure used by UF_MODL_create_fitted_spline().
For "By Tolerance" method, you need to at least specify 'degree', 'num_of_points',
'points', 'tolerance' and 'num_of_segments'(must be zero).
For "By Segments" method, you need to at least specify 'degree', 'num_of_points',
'points', and 'num_of_segments'.
The "By Template" method is not supported at this moment.
Data Members
points
double *
coordinates for the points to be fitted.
points[0~2] = (x, y, z) for the 1st point,
points[3~5] = (x, y, z) for the 2nd point,
...
slopes
double *
The slope values.
slopes[0~2] = start slope when slope_flag = 1 or 3
end slope when slope_flag = 2,
slopes[3~5] = end slope when slope_flag = 3.
weights
double *
values for user-defined weights. Only positive values are allowed
tolerance
double
Tolerance value for the "By Tolerance" method.
This value will be ignored when the 'num_of_segments' is
positive
num_of_points
int
Number of points to be fitted
slope_flag
int
0=no slopes, 1=only start slope exists,
2=only end slope exists, 3=both end slopes exist
num_of_weights
int
Number of user-defined weights
weight_positions
int *
The index of points (from 1 ~ num_of_points) for the user-defined
weights to apply to
num_of_segments
int
Number of segments for the "By Segments" method.
Must be set to 0 for "By Tolerance" method.
degree
int
The desired degree for the fitted spline

------------

UF_MODL - string_list
string_list
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_STRING_t
UF_STRING_p_t
Overview
Various functions use this structure to define a single profile shape or
multiple profile shapes. The profile shape can usually consist of
curves, all edges of a face, and edges.  When this structure is returned
from a query function, the caller is responsible for calling
UF_MODL_free_string_list to deallocate memory.
Data Members
num
int
Number of items in the string array and the
dir array. (Min = 1, Max = 150)
string
int *
Number of items in the ID array for each string.
(Min = 1, Max = 402)
dir
int *
Indication of whether the string defined in id
should start from the beginning of the first curve
or the end of the first curve. This should be set
to either UF_MODL_CURVE_START_FROM_BEGIN or
UF_MODL_CURVE_START_FROM_END.
id
tag_t *
The array of items defining the string. This array
should be as long as the total of the number of
items indicated in string. Although not all
functions allow all the data types, this array can
typically include curves, faces and edges.

------------

UF - UF_args_s
UF_args_s
(view source)
Defined in: uf_ugopenint.h
Also known as:
UF_args_t
UF_args_p_t
Overview
Structure definition for the variable length argument lists
Data Members
type
int
one of the types, UF_TYPE_DOUBLE,
UF_TYPE_DOUBLE_ARRAY, UF_TYPE_TAG_T,
UF_TYPE_TAG_T_ARRAY, UF_TYPE_CHAR or
UF_TYPE_CHAR_ARRAY.
length
int
the number of elements in an array, for
types UF_TYPE_DOUBLE_ARRAY,
UF_TYPE_TAG_T_ARRAY or UF_TYPE_CHAR_ARRAY.
address
void *
A pointer to an array of the given
type and length. Note that for an array
of UF_TYPE_CHAR, if the argument list
is built by the Open program, it must
initialize this array whether it is input or
output. An output array can be initialized
by setting the first byte to '\0'.

------------

UF_ASSEM - UF_ASSEM_deform_data_s
UF_ASSEM_deform_data_s
(view source)
Defined in: uf_assem.h
Also known as:
UF_ASSEM_deform_data_t
UF_ASSEM_deform_data_p_t
Overview
Data for Deformation
See uf_modl_types.h for udfs_data.
Data Members
part_occ
tag_t
udfs_data
UF_MODL_udfs_def_data_p_t
help_url_string
char *

------------

UF_ASSEM - UF_ASSEM_deform_part_data_s
UF_ASSEM_deform_part_data_s
(view source)
Defined in: uf_assem.h
Also known as:
UF_ASSEM_deform_part_data_t
UF_ASSEM_deform_part_data_p_t
Overview
This structure contains data for deforming the deformable part.
When the units of the deformable part is different than the destination part,
unit conversion occurs.  When units conversion occurs the deformable part is converted and
the part is reopened.
Data Members
convert_units_on_modified_parts
logical
Should units conversion be applied on modified parts
convert_units_on_read_only_modified_parts
logical
Should units conversion be done on read only modified parts
part_occ_to_deform
tag_t
The part occurrence that is being deformed.
num_parents
int
The number of new references for the external geometry
old_parents
tag_t *
The existing parents that are being replaced with new geometry
new_parents
tag_t *
The new geoemtry for deforming the part
num_expressions
int
Number of expressions that are used to deform the part
old_expressions
tag_t *
The existing expressions that are in the definition of the deformable part
new_expression_values
const char * *
The expression values used to deform the part
deformed_feature_tag
tag_t
The deformed feature tag that is created from the deformed part

------------

UF_ASSEM - UF_ASSEM_deform_part_warnings_s
UF_ASSEM_deform_part_warnings_s
(view source)
Defined in: uf_assem.h
Also known as:
UF_ASSEM_deform_part_warnings_t
UF_ASSEM_deform_part_warnings_p_t
Data Members
num_warnings
int
num warnings generated during units conversion.
expressions_with_warnings
tag_t *
ptr to expressions that had units conversion warnings
warning_codes
int *
ptr to error codes for the warnings
warning_strings
char * *
ptr to strings with the error messages

------------

UF_ASSEM - UF_ASSEM_deformed_definition_data_s
UF_ASSEM_deformed_definition_data_s
(view source)
Defined in: uf_assem.h
Also known as:
UF_ASSEM_deformed_definition_data_t
UF_ASSEM_deformed_definition_data_p_t
Overview
Data for the deformed definition
Data Members
part_occ
tag_t
Part occ for feature
parents
tag_t *
Array of external parents of the udf
parent_prompts
char * *
Array of prompts
num_parents
int
Number of external parents
expressions
tag_t *
Array of expression
expression_prompts
char * *
Array of prompt
num_expressions
int
Number of expressions
help_string
char *
Help string

------------

UF_ASSEM - UF_ASSEM_instance_intent_s
UF_ASSEM_instance_intent_s
(view source)
Defined in: uf_assem_types.h
Also known as:
UF_ASSEM_instance_intent_t
UF_ASSEM_instance_intent_p_t
Overview
Instance intent data types.
Data Members
fam_intent
UF_FAM_intent_data_p_t
Part family intent. NULL
if no intent exists.

------------

UF_ASSEM - UF_ASSEM_instance_status_s
UF_ASSEM_instance_status_s
(view source)
Defined in: uf_assem_types.h
Also known as:
UF_ASSEM_instance_status_t
UF_ASSEM_instance_status_p_t
Data Members
child_changed
logical
A flag indicating whether
the child of the instance
has changed.
current_child
tag_t
Current child of the
instance.
previous_child
tag_t
Previous child of the
instance.
info
char *
Additional information.
This can be NULL.

------------

UF_ASSEM - UF_ASSEM_iset_array_data_s
UF_ASSEM_iset_array_data_s
(view source)
Defined in: uf_assem_types.h
Also known as:
UF_ASSEM_iset_array_data_t
UF_ASSEM_iset_array_data_p_t
Overview
Component array based on a feature instance-set component.  Also referred
to as an iset array.
Data Members
feature_iset
tag_t
The tag of the feature iset that the array
is based upon. Information about the iset
may be obtained by calling
UF_MODL_ask_linear_iset_parms or
UF_MODL_ask_circular_iset_parms as
appropriate.
template_component
tag_t
The tag of the template component for this
array.
dimensions [ UF_ASSEM_max_dim_count ]
int
An array of integers which
indicates the size of the array. A referenced iset can
be Linear or Circular. For a linear iset, the first
array element is the number of components in the X direction
and the second element is the number of components
in the Y direction. For a one dimensional linear iset, the
second element will be NULL. For circular arrays, the second
element will be NULL. The dimensions array can be left
unpopulated (or not required) during creation.
array_name
char *
The name of the array object. When this
value is returned from an enquiry function,
it is dynamically allocated, and must be
freed by calling UF_free.

------------

UF_ASSEM - UF_ASSEM_mc_array_data_s
UF_ASSEM_mc_array_data_s
(view source)
Defined in: uf_assem_types.h
Also known as:
UF_ASSEM_mc_array_data_t
UF_ASSEM_mc_array_data_p_t
Overview
Component array based on a master component.  Also referred to as an
mc array.
Data Members
array_subtype
int
A flag indicating which type of array this is.
It will either be UF_ASSEM_linear_array or
UF_ASSEM_circular_array .
master_component
tag_t
The tag of the master component for this
array
template_component
tag_t
The tag of the template component for this
array.
dimensions [ UF_ASSEM_max_dim_count ]
tag_t
An array of expression tags
which determine the size of the array. For
linear arrays, the first element is the
number of components in the X direction, and
the second element is the number of
components in the Y direction. For one
dimensional linear arrays, the second
element will be NULL. For circular arrays,
the second element will be NULL.
axis_definitions [ UF_ASSEM_max_dim_count ]
tag_t
The solid entities
(faces, datums, etc) which determine the
direction of the array. For linear arrays,
the first element defines the X direction,
and the second the Y direction. For one
dimensional linear arrays, the second element
will be NULL. For circular arrays, the first
element is the central axis, and the second
is NULL. If these solid objects are in
component part files, you should pass in
their occurrences in the assembly that
contains the array.
offsets [ UF_ASSEM_max_dim_count ]
tag_t
An array of expression tags
which determine the spacing between array
elements. For linear arrays, the first
element is the X offset, and the second is
the Y offset. For one dimensional linear
arrays, the second element will be NULL.
For circular arrays, the first element is
the angle between components, and the
second is NULL.
array_name
char *
The name of the array object. When this value
is returned from an enquiry function, it is
dynamically allocated, and must be freed with
UF_free.

------------

UF_ASSEM - UF_ASSEM_options_s
UF_ASSEM_options_s
(view source)
Defined in: uf_assem_types.h
Also known as:
UF_ASSEM_options_t
UF_ASSEM_options_p_t
History
NX2: parts_list is no longer used.
NX8.5: managed_mode_load_options introduced.
Data Members
load_options
int
Load Options - for native mode only
UF_ASSEM_load_from_directory
UF_ASSEM_load_from_search_dirs
UF_ASSEM_load_as_saved
parts_list
int
NOTE: parts_list is no longer used
update
int
Update report setting -
UF_ASSEM_no_update_report
UF_ASSEM_update_report
emphasize
int
Emphasize setting -
UF_ASSEM_do_not_emphasize_wp
UF_ASSEM_emphasize_wp
emphasize_color
int
NOTE: emphasize_color is no longer used
failure_action
int
failure Option value -
UF_ASSEM_do_abort_on_failure
UF_ASSEM_dont_abort_on_failure
maintain_work_part
int
Option to apply to the work part when
changing the displayed part interactively:
UF_ASSEM_dont_maintain_work_part
Work part set to be displayed part after
a Change Displayed Part operation.
UF_ASSEM_do_maintain_work_part
Work part unchanged after a Change
Displayed Part operation, provided that
the work part is under the new displayed
part, and has the same units as the new
displayed part.
load_latest
int
Load latest version switch
UF_ASSEM_load_exact_version
UF_ASSEM_load_latest_version
load_components
int
Load components option
UF_ASSEM_dont_load_components
UF_ASSEM_do_load_components
UF_ASSEM_use_last_component_set
UF_ASSEM_use_last_filter
UF_ASSEM_specify_filter
load_fully
int
Full load switch
UF_ASSEM_load_components_partially
UF_ASSEM_load_components_fully
use_lightweight_representations
int
Lightweight Representations option
UF_ASSEM_do_allow_lightweight_representations
UF_ASSEM_dont_allow_lightweight_representations
load_substitution
int
Allow Substitution switch
UF_ASSEM_dont_allow_substitution
UF_ASSEM_do_allow_substitution
apply_to_all_levels
int
Apply reference set defaults to all levels
UF_ASSEM_dont_apply_to_all_levels
UF_ASSEM_do_apply_to_all_levels
prior to V13, the behavior was
UF_ASSEM_dont_apply_to_all_levels.
load_wave_data
int
New option for V14, if load_fully is set to
UF_ASSEM_load_components_partially then
this allows for components with WAVE data
in them to be fully loaded. Other components
will still be partially loaded.
UF_ASSEM_default_load_behaviour
UF_ASSEM_load_wave_data
load_wave_parents
int
Load Unloaded Wave Parents option. This
field is only used if load_wave_data is set
to UF_ASSEM_load_wave_data. When it is, this
value controls the way in which parents of
wave geometry are loaded:
UF_ASSEM_none - Don't load unloaded parents,
but ensure partially loaded
parents are fully loaded.
UF_ASSEM_immediate - Load immediate parents
of any WAVE data.
UF_ASSEM_all - Load parents of WAVE data,
and their parents, until no
parents can be found.
A parent part is one which contains geometry
that is linked to another part. If part A
has a LINKED_BODY which references geometry
in part B, then set the load options as
follows:
load_wave_data = UF_ASSEM_load_wave_data
load_wave_parents = UF_ASSEM_immediate
If you load part A, then part B is loaded.
auto_regen_pfm_option
int
Auto regenerate missing part family children
option. If this option is set to
UF_ASSEM_auto_generate_pfm then while loading
assemblies, any missing part family members
will be automatically regenerated.
The valid options are:
UF_ASSEM_auto_generate_pfm
UF_ASSEM_dont_auto_generate_pfm
managed_mode_load_options
int
Load Options - for managed mode only
UF_ASSEM_managed_load_by_revision_rule
UF_ASSEM_managed_load_as_saved

------------

UF_ASSEM - UF_ASSEM_prev16_align_s
UF_ASSEM_prev16_align_s
(view source)
Defined in: uf_assem_types.h
Also known as:
UF_ASSEM_prev16_align_t
UF_ASSEM_prev16_align_p_t
Overview
UF_ASSEM_prev16_align_t describes a PreV16 Align constraint which needs to
be converted to a Distance constraint because its offset direction is
not interpreted correctly.
This type is used as arguments by the following functions:
UF_ASSEM_find_prev16_aligns_to_check
UF_ASSEM_convert_prev16_aligns
UF_ASSEM_free_prev16_aligns
Data Members
part
tag_t
The part in which the constraint resides
condition_tag
tag_t
The mating condition in which the constraint resides
condition_name
char *
The name of the mating condition
constraint_index
int
The index of the constraint within the mating condition
constraint_name
char *
The name of the constraint
offset
tag_t
The offset distance expression
offset_name
char *
The name of the offset distance expression of the constraint
offset_value
double
The value of the offset distance expression of the constraint
message
char *
A message indicating any problems related to the conversion of the constraint (might be NULL)
reason
char *
A reason explaining the above message (might be NULL)

------------

UF_ASSEM - UF_ASSEM_upgrade_status_s
UF_ASSEM_upgrade_status_s
(view source)
Defined in: uf_assem_types.h
Also known as:
UF_ASSEM_upgrade_status_t
UF_ASSEM_upgrade_status_p_t
Overview
Assembly Upgrade status structure
Data Members
failed
logical
true if any components could not be upgraded
n_components
int
length of the following two arrays
component_names
char * *
array of component names that failed to upgrade.
This array must be freed using
UF_free_string_array.
statuses
int *
associated statuses with each file name. This
array must be freed using UF_free.

------------

UF_ATTR - UF_ATTR_info_s
UF_ATTR_info_s
(view source)
Defined in: uf_attr_types.h
Also known as:
UF_ATTR_info_t
UF_ATTR_info_p_t
UF_ATTR_info_c_t
UF_ATTR_info_pc_t
Overview
UF_ATTR_info_t
User attribute information struct for setting and reading attributes
All the data members of this struct are updated with values from the attribute when an attribute is read.
The following data members of this struct are not used (they are ignored) when setting an attribute:
They are used only to report back information about the attribute when it is read.
alias
inherited
override
required
unset
locked (a separate function is used to manage locks)
owned_by_system
pdm_based
The following data of an attribute cannot be edited once the attribute is set:
type
title
alias
array
array_element_index
The dimensionality of the Unit specification (cannot change from mm to microA, but from mm to cm is fine)
The following data of an attribute can be set if and only if the attribute is not associated with a template. It cannot be modified once set.
type
alias
array
category
The dimensionality of the Unit specification (cannot change from mm to microA, but from mm to cm is fine)
Data Members
type
int
The type of the attribute. Valid values:
UF_ATTR_bool
UF_ATTR_integer
UF_ATTR_real
UF_ATTR_time
UF_ATTR_null
UF_ATTR_string
(NOTE: The UF_ATTR_reference is not supported in the functions that use this struct)
category
char *
The category of the attribute (may be NULL)
title
char *
The title of the attribute (may be NULL when used to find attributes)
alias
char *
The title alias of the attribute (may be NULL)
bool_value
logical
Boolean (logical) attribute value (default is returned when reading templates of non-set attributes)
integer_value
int
Integer attribute value (default is returned when reading templates of non-set attributes)
real_value
double
Real (double-precision real) attribute value (default is returned when reading templates of non-set attributes)
unit_type
tag_t
The tag of the unit type, if any, if the attribute is a real-type attribute (may be NULL_TAG)
unit_name
char *
The name of the unit type, if any, if the attribute is a real-type attribute (may be NULL)
NOTE: This string is used only to return units in UF_ATTR_get_user_attributes_in_file
expression
tag_t
An expression from which the attribute should get its value
NOTE: This is not supported if the attribute has a reference string (in such case the attribute maintains a system expression internally).
NOTE: This is not supported for attributes of type UF_ATTR_null or of type UF_ATTR_time
string_value
char *
String attribute value (the default value is returned when reading templates of non-set attributes).
This string is also returned for non-string attributes.
time_value [ 2 ]
int
Time/Date value (the default value is returned when reading templates of non-set attributes).
The time zone of the machine running the program is assumed
time_string
char *
Time/Date value (the default value is returned when reading templates of non-set attributes).
NULL is returned for non-time attributes
reference_string
char *
Reference string of a string type attribute if it is defined using a reference string.
NOTE: For these attributes, an expression reference cannot be used, as the attribute will maintain a system expression internally).
NULL is returned for attributes that are not defined using a reference string.
inherited
logical
The attribute is inherited from another object and not overridden
override
logical
The attribute is overriding an inherited attribute
locked
logical
The attribute is locked.
When an existing attribute is read, this flag indicates that the attribute cannot currently be modified.
The flag is set if the attribute is created from a template that has the 'Locked' flag, or if
it is reserved by the system or if is explicitly locked when set.
When an unset attribute template is read, this flag indicates whether attributes created from the template will be
locked when the part is saved and reloaded.
owned_by_system
logical
The attribute is a reserved system attribute.
When this flag is set, the attribute can be set and removed only by the system. It is also created locked. It cannot be unlocked.
required
logical
This attribute is required on the given object
unset
logical
The attribute has not been set (i.e. has no value) on the object (used when getting attribute information)
array
logical
The attribute is an array attribute
index
int
If this struct represents an array attribute element, this is the index (numerical, starting with 0).
After reading an attribute, it is valid only if 'Unset' is 'false' and 'Array' is 'true'.
The array size can be resized only one element at a time (adding or removing the last element).
pdm_based
logical
The attribute is synchronized with data in a PDM-system (Teamcenter).
__initialized
void *
Mark used to determine if this struct has been initialized.
(For internal use only - do not set/modify this member)

------------

UF_ATTR - UF_ATTR_iterator_s
UF_ATTR_iterator_s
(view source)
Defined in: uf_attr_types.h
Also known as:
UF_ATTR_iterator_t
UF_ATTR_iterator_p_t
UF_ATTR_iterator_c_t
UF_ATTR_iterator_pc_t
Overview
UF_ATTR_iterator_t
Iterator struct for querying and modifying user attributes
This struct is used to identify attributes to be read, edited or deleted
Data Members
category
char *
Restricts search to attributes with this category (if 'check_category' is set to 'true')
check_category
logical
If set to 'true', restricts searches to attributes with the category specified by 'category'.
(setting this to 'true' with 'category' = NULL allows searching for attributes that have no category)
title
char *
Restricts search to attributes with this title (if not NULL)
type
int
Restricts search to attributes with this type (if not set to UF_ATTR_any)
Valid values:
UF_ATTR_bool
UF_ATTR_integer
UF_ATTR_real
UF_ATTR_time
UF_ATTR_null
UF_ATTR_string
UF_ATTR_any
(NOTE: The UF_ATTR_reference is not supported in the functions that use this struct)
index
int
Restricts search to attributes with a particular array element index, as follows:
For all operations except deleting and locking/unlocking attributes:
If set to a non-negative number, the iterator will restrict search to array elements with the given index.
If set to UF_ATTR_ANY_ATTRIBUTE (default), the iterator will not restrict search to array elements.
For delete operations:
If set to a non-negative number that is not equal to the last index of the array, the function will return an error.
If set to UF_ATTR_ANY_ATTRIBUTE (default), the iterator will not restrict search to array elements.
If set to UF_ATTR_LAST_ELEMENT, the iterator will delete the last element of an array.
For locking/unlocking operations:
If set to UF_ATTR_ANY_ATTRBUTE (default), the iterator wil not restrict search to array elements.
For arrays, locks are always set/unset on all the elements.
For all operations:
If set to anything other than specified above, the function will return an error
include_also_unset
logical
Expands search to the object's unset associated user attribute templates (if values are returned for these, they are the default values)
include_only_unset
logical
Restricts search to the object's unset associated user attribute templates (if values are returned for these, they are the default values)
include_only_pdm_based
logical
Restricts search to DM-based attributes (attributes that are synchronized with Teamcenter)
__initialized
void *
Mark used to determine if this struct has been initialized and/or reset.
(For internal use only - do not set/modify this member)

------------

UF_ATTR - UF_ATTR_part_attr_s
UF_ATTR_part_attr_s
(view source)
Defined in: uf_attr_types.h
Also known as:
UF_ATTR_part_attr_t
UF_ATTR_part_attr_p_t
Overview
Structure used to return part attribute values.
Data Members
title [ UF_ATTR_MAX_TITLE_BUFSIZE ]
char
The title of the attribute
value
UF_ATTR_value_t
The value for the part attribute
string_value [ UF_ATTR_MAX_STRING_BUFSIZE ]
char
Buffer for the part
attribute string value
(if of type string).
The character pointer
.value.value.string
will then point to this buffer.

------------

UF_ATTR - UF_ATTR_value_s
UF_ATTR_value_s
(view source)
Defined in: uf_attr_types.h
Also known as:
UF_ATTR_value_t
UF_ATTR_value_p_t
Overview
Typed attribute value
Data Members
type
int
The type of the attribute. Valid types are:
UF_ATTR_bool
UF_ATTR_integer
UF_ATTR_real
UF_ATTR_time
UF_ATTR_null
UF_ATTR_string
UF_ATTR_reference
value
UF_ATTR_value_u_t
The attribute value

------------

UF_BOUND - UF_BOUND_all_data_s
UF_BOUND_all_data_s
(view source)
Defined in: uf_bound.h
Also known as:
UF_BOUND_all_data_t
UF_BOUND_all_data_p_t
Data Members
num_members
int
number of boundary members
open_closed_flag
int
flag to indicate if the
boundary is open or closed
UF_BOUND_OPEN or UF_BOUND_CLOSED
plane_matrix
tag_t
tag of matrix of plane
minimum_distance
double
distance from model space
origin to plane
maxmin_box [ 4 ]
double
maximum and minimum box of
the boundary
tolerance [ 2 ]
double
boundary tolerances
tolerance[0]: The maximum allowed
tolerance that the boundary may
deviate from the defining
curves into the part
tolerance[1]: The maximum allowed
tolerance that the boundary may
deviate from the defining
curves away from the part.
members_data
UF_BOUND_member_data_p_t
data of boundary members

------------

UF_BOUND - UF_BOUND_member_data_s
UF_BOUND_member_data_s
(view source)
Defined in: uf_bound.h
Also known as:
UF_BOUND_member_data_t
UF_BOUND_member_data_p_t
Data Members
member_tag
tag_t
Tag of boundary member
on_tangent_to_flag
int
On/Tangent to Flag
UF_BOUND_ON or
UF_BOUND_TANGENT_TO.
contiguity_flag
int
Contiguity Flag
UF_BOUND_CONTIGUOUS or
UF_BOUND_NOT_CONTIGUOUS.
parameter_range [ 2 ]
double
Parameter Range
midpoint [ 2 ]
double
Midpoint
direction_vec [ 2 ]
double
Direction Vector

------------

UF_BOUND - UF_BOUND_object_s
UF_BOUND_object_s
(view source)
Defined in: uf_bound.h
Also known as:
UF_BOUND_object_t
UF_BOUND_object_p_t
Data Members
object_tag
tag_t
Curve that establishes the boundary.
on_tangent_to_flag
int
A parameter that describes the
relationship of the cutter to the
boundary for machining operation.
UF_BOUND_ON: This indicates that
the center line of the cutter
is to remain on the specified
curve during the machining
operation.
UF_BOUND_TANGENT_TO: This indicates
that the side of the cutter is
to remain tangent to the
specified curve during the
machining operation.

------------

UF_BOUND - UF_BOUND_tolerance_s
UF_BOUND_tolerance_s
(view source)
Defined in: uf_bound.h
Also known as:
UF_BOUND_tolerance_t
UF_BOUND_tolerance_p_t
Overview
Structures
Data Members
tol_specified
int
Tolerance specified flag:
UF_BOUND_NOT_SPECIFIED - not specified
UF_BOUND_SPECIFIED - specified
into_tolerance
double
The maximum allowed tolerance that
the boundary may deviate from the
defining curves into the part.
out_tolerance
double
The maximum allowed tolerance that
the boundary may deviate from
the defining curves away from the
part.

------------

UF_BREP - UF_BREP_arc_s
UF_BREP_arc_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_arc_t
UF_BREP_arc_p_t
Overview
Contains data defining an arc. The matrix defines an orientation thus: The
first 3 elements are the X axis of the orientation matrix in absolute
coordinates, the next 3 are the Y axis, and the last 3 are the Z axis. The
center defines the location of the arc in orientation space. The line
through the center parallel to the orientation X axis defines the zero
angle, zero being along the portion of the line from the center to the
positive X axis. The value start_angle must be in the interval [0,2pi) and
end_angle-start_angle <= 2pi.
Data Members
matrix_tag
tag_t
Rotation only; arc lies in matrix's X-Y plane
start_angle
double
Radian start angle with zero along positive
X-axis, with positive being CCW using right hand
rule.
end_angle
double
Radian end angle with zero along positive X-axis,
with positive being CCW using right hand rule.
arc_center [ 3 ]
double
Center with respect to the arc's coordinate
system
radius
double
The radius of the arc.

------------

UF_BREP - UF_BREP_bsurface_s
UF_BREP_bsurface_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_bsurface_t
UF_BREP_bsurface_p_t
Overview
A non-uniform rational b-spline (NURBS) surface is represented. The poles
array is constructed as follows. Each row is a u spline and each column is a
v spline, stored in row-major order. U indexes the columns and v indexes the
rows. The subscript into the poles array for any given pole defining the
surface is obtained as follows:
subscr = (num_poles_u  v + u)
poles[subscr][0] = x coordinate
poles[subscr][1] = y coordinate
poles[subscr][2] = z coordinate
poles[subscr][3] = weight
In each direction, the number of knots = num_poles + order. The x, y, and z
coordinates are weighted.
A periodic NURBS surface in one or both directions is one that closes with
the same location and tangent vectors at the matching edges. Open C API
determines periodicity from the bsurface data.
Note that this structure is identical to UF_MODL_bsurface_s.
Data Members
num_poles_u
int
The number of control points(poles) in the
u direction.
num_poles_v
int
The number of control points(poles) in the
v direction.
order_u
int
The order (degree +1) of the basis functions in
the u direction.
order_v
int
The order (degree +1) of the basis functions in
the v direction.
is_rational
logical
True if the surface is rational (the weights
are not all equal).
knots_u
double *
Knot vector for the u direction.
knots_v
double *
Knot vector for the v direction.
poles) [ 4 ]
double (*
An array of the control points (poles).

------------

UF_BREP - UF_BREP_composite_s
UF_BREP_composite_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_composite_t
UF_BREP_composite_p_t
Overview
This provides a means of having a list of curves fill the function of a
single curve.  This may be used as a generator or a curve in a loop.  Some
cautions are in order, however.  When used as a generator, a multi-face
sheet body is produced.  Such a sheet may not be trimmed with curves.
A composite curve may be attached to an edge, but the component curves
are joined to make one curve to attach.
Data Members
num_curves
int
The number of curves in the
composite.
curves
struct UF_BREP_geometry_s *
An array of geometry structures.
Only curves may be present.

------------

UF_BREP - UF_BREP_cone_s
UF_BREP_cone_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_cone_t
UF_BREP_cone_p_t
Overview
A cone is represented by its location, axis vector, and half-angle. The
reference direction need not be perpendicular to the axis vector but must
not be parallel to it. Parameterization is 0 to 2pi in u and length along
the axis in v, positive in the direction of the axis vector. The point
defines the apex of the cone. A mathematical cone consists of two half-cones.
The half retained by this representation is the half in which the axis points
away from the apex of the cone. Note that this means that v parameter values
are always positive.
Data Members
pt_at_apex [ 3 ]
double
Apex location, defines zero v
axis [ 3 ]
double
Axis vector of the cone.
u0_ref_direc [ 3 ]
double
Reference direction, defines the orientation
of zero u.
half_apex_angle
double
half angle of the cone in radians.

------------

UF_BREP - UF_BREP_conic_s
UF_BREP_conic_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_conic_t
UF_BREP_conic_p_t
Overview
Definition for a conic.
If the subtype is an ellipse then it is counterclockwise when viewed in the
direction opposite the Z axis of the matrix.  The parameters meet the same
requirements as for an arc.  The major axis is parallel to the X axis of the
matrix, and the minor axis is parallel to the Y axis.  Conic_type is
UF_conic_ellipse_subtype.  K1 is the semimajor axis, and k2 is the semiminor
axis.
If the subtype is a parabola, then the X axis of the matrix is the direction
of the centerline of a parabola, which opens out along that direction.  The
start and end angles may be any real numbers, as long as start_angle is less
than end_angle.  Conic type is UF_conic_parabola_subtype.
If the subtype is a hyperbola, then the X axis of the matrix is the direction
of the centerline of the hyperbola, which opens out along that direction.  The
start and end angles must be in the interval (-pi/2, +pi/2).  Note that the
hyperbola is numerically unstable at values close to the endpoints of this
interval.  Conic_type is UF_conic_hyperbola_subtype.
Data Members
matrix_tag
tag_t
Conic lies in matrix's X-Y plane
conic_type
int
subtype of the conic section. See
uf_object_types.h
rotation_angle
double
angle of rotation of conic X from matrix X
start_param
double
start parameter value
end_param
double
end parameter value
center [ 3 ]
double
center of conic in orientation space
k1
double
first shape parameter
k2
double
second shape parameter

------------

UF_BREP - UF_BREP_cylinder_s
UF_BREP_cylinder_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_cylinder_t
UF_BREP_cylinder_p_t
Overview
A cylinder is represented by its location, axis vector, and radius.  The
reference vector need not be perpendicular to the axis, but must not
be parallel to it.  Parameterization is 0 to 2pi in u and by length in
part units along the axis in v, positive in the direction of the axis
vector.
Data Members
pt_on_axis [ 3 ]
double
Location on axis to position the cylinder,
defines zero v.
axis [ 3 ]
double
The axis vector for the cylinder.
u0_ref_direc [ 3 ]
double
Reference direction which defines the
orientation of zero u.
radius
double
The radius of the cylinder.

------------

UF_BREP - UF_BREP_extrude_s
UF_BREP_extrude_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_extrude_t
UF_BREP_extrude_p_t
Overview
An extruded surface is represented by its direction of extrusion and
generator curve. The curve is also the zero point of the v parameter, which
is positive in the direction of extrusion, and is in part units. U is the
same as the parameterization of the generator curve.
Data Members
direction [ 3 ]
double
Vector which indicates the
direction to sweep the generator.
generator
struct UF_BREP_geometry_s *
The geometry structure for the
generator, only a curve may be
specified.

------------

UF_BREP - UF_BREP_geometry_s
UF_BREP_geometry_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_geometry_t
UF_BREP_geometry_p_t
Overview
The generic geometry structure. The union gathers all the curve and surface
structures for the purpose of defining a pointer or variable without having
to know which type of geometry is represented. The type value is from the
enumeration below.
Data Members
type
UF_BREP_geom_type_t
geom
UF_BREP_geom_t

------------

UF_BREP - UF_BREP_line_s
UF_BREP_line_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_line_t
UF_BREP_line_p_t
Overview
The definition of a line.
Data Members
start_point [ 3 ]
double
Start point of the line. Parameterization is
from 0 being the start point to 1 being the
end point.
end_point [ 3 ]
double
End point of the line

------------

UF_BREP - UF_BREP_mapping_s
UF_BREP_mapping_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_mapping_t
UF_BREP_mapping_p_t
Overview
UF_BREP_ask_geometry extraction mappings, i.e., specifies conversion
of geometry in an NX body to the geometry the caller receives.
(source[i] corresponds to extracted[i] to form a mapping pair)
For now, the extracted types can only be B-surfaces and B-curves.
Furthermore, two required mappings are:
source[]                      extracted[]
--------                      -----------
UF_BREP_BLEND_GEOM            UF_BREP_BSURFACE_GEOM
UF_BREP_INTERSECTION_GEOM     UF_BREP_SPLINE_GEOM
Data Members
count
int
Mapping pair count: source[count],
extracted[count]
source
UF_BREP_geom_type_t *
NX body geometry types.
extracted
UF_BREP_geom_type_t *
Geometry types that UF_BREP_ask_geometry
returns.

------------

UF_BREP - UF_BREP_offset_s
UF_BREP_offset_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_offset_t
UF_BREP_offset_p_t
Overview
Contains data representing an offset from a base surface.  The distance is
in part units, and is positive if in the direction of the normal of the
base surface.  Only surface geometry may be offset.  To offset a finished
face, use UF_MODL_create_face_offset.
Data Members
base
struct UF_BREP_geometry_s *
Surface forming the basis of
the offset surface.
distance
double
Signed distance from base. Distance > 0
for offset surfaces on the side that
the base surface's normal indicates.

------------

UF_BREP - UF_BREP_options_s
UF_BREP_options_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_options_t
UF_BREP_options_p_t
Overview
Topology and geometry options for many of the UF_BREP functions.
Data Members
count
int
Option count: options[count],
opt_data[count]
options
int *
Array of option tokens.
opt_data
double *
opt_data[i] specfies a numeric
value corresponding to options[i].

------------

UF_BREP - UF_BREP_oriented_child_s
UF_BREP_oriented_child_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_oriented_child_t
UF_BREP_oriented_child_p_t
Overview
Describes a child and its orientation with respect to its parent.
Data Members
child
struct UF_BREP_topology_s *
Topology structure for any kind
of Parasolid topology entity.
orientation
int
Only for loop and fin children,
otherwise UF_BREP_ORIENTATION_NONE.
Since fins are always oriented
positively (forward) with respect to
their loop parent, `orientation' only
applies to an edge whose parent is a
loop or fin.
UF_BREP_ORIENTATION_FORWARD:
edge traverse from start to end vertex
UF_BREP_ORIENTATION_REVERSE:
edge traverse from end to start vertex

------------

UF_BREP - UF_BREP_plane_s
UF_BREP_plane_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_plane_t
UF_BREP_plane_p_t
Overview
Contains data representing a plane. The u parameter is along the reference
direction and the v parameter is at right angles to it, which places the
plane in the x-y plane of a right handed coordinate system with the
reference direction as the x axis and the normal vector as the z axis.
Parameter values are in part units.
Data Members
pt_on_plane [ 3 ]
double
Defines the location of the plane in space.
normal [ 3 ]
double
Vector normal to the plane.
u0_ref_direc [ 3 ]
double
Defines orientation of zero u.

------------

UF_BREP - UF_BREP_revolve_s
UF_BREP_revolve_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_revolve_t
UF_BREP_revolve_p_t
Overview
A surface of revolution is represented with its axis vector and generator
curve. The v parameterization is 0 to 2pi around the axis. U parameterization
is the parameterization of the generator curve. The reference vector need
not be perpendicular to the axis but must not be parallel to it. The
location of the generator curve in space defines the zero parameter value
in v. Note that this parameterization is counterintuitive with respect to
treating cylinders, cones, spheres, and torii as surfaces of revolution,
because the parameterization is flipped u for v.
Data Members
pt_on_axis [ 3 ]
double
rot_axis [ 3 ]
double
generator
struct UF_BREP_geometry_s *

------------

UF_BREP - UF_BREP_sphere_s
UF_BREP_sphere_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_sphere_t
UF_BREP_sphere_p_t
Overview
A sphere is represented by its location (center), axis, and radius. The axis
vector represents the axis around which the parameterization is 0 to 2pi and
is u. The reference direction vector indicates the orientation of the 0
parameter value in u. It need not be perpendicular to the axis vector but
must not be parallel to it. V parameterization is -pi/2 to +pi/2, on an
implicit generator of a half-circle.  Looking at the sphere in the direction
opposite the axis vector, -p on the generator is away from the observer.
U increases counterclockwise, and v increases towards the observer.
Data Members
center [ 3 ]
double
Center location of the sphere.
axis [ 3 ]
double
Axis of the sphere.
u0_ref_direc [ 3 ]
double
Reference direction which defines the
orientation of zero u.
radius
double
Radius of the sphere.

------------

UF_BREP - UF_BREP_spline_s
UF_BREP_spline_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_spline_t
UF_BREP_spline_p_t
Overview
Contains data defining a non-uniform rational b-spline (NURBS) curve.
There are 4 values for each control point or pole: x, y, z and w.  The
coordinates are weighted.  The parameter values specify how much of
the spline is to be active, i.e. visible and used.  They cannot be outside
the interval defined by the knot vector.  The lowest allowed value is
knots[order-1].  The largest is knots[num_poles].  NURBS curves need not have
Bezier end conditions (be clamped).
The number of knots and poles, and the order are related as follows:
nknots = num_poles + order.
Data Members
num_poles
int
Number of control points or poles, i.e.,
poles[num_poles][4]
order
int
degree + 1 of the basis functions
is_rational
logical
Set according to whether the spline is rational:
True if the spline is rational, else false.
knots
double *
knots[num_poles+order]. If this is an output
structure then this member must be freed by
calling UF_free.
poles) [ 4 ]
double (*
control point vectors. If this is an output
structure, then this member must be freed by
calling UF_free.
start_param
double
smallest t value of curve's active region
end_param
double
largest t value of curve's active region

------------

UF_BREP - UF_BREP_state_s
UF_BREP_state_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_state_t
UF_BREP_state_p_t
Overview
This structure reports potential problems related to the topology item. A
problem can be an unfixable error, e.g., missing geometry, or a fixable error,
e.g., some types of self-intersections.  Use the macro UF_BREP_STATE_IS_FIXED
on the flag field to determine if UF_BREP could fix the problem, e.g.,
UF_BREP_STATE_IS_FIXED (states[i].flag).
Free state arrays that UF_BREP routines return by using UF_free.
The UF_BREP state codes have the following names and meanings. See uf_curve.h
and uf_modl.h or the UF_CURVE and UF_MODL documentation for state codes
specific to curve and surface geometry.
UF_BREP_STATE_unknown_child
UF_BREP_STATE_duplicate_child  Repeated parent-child relationship
UF_BREP_STATE_wrong_child      Child topology type not consistent with parent
UF_BREP_STATE_missing_child    Parent topology has too few children
UF_BREP_STATE_extra_child      Parent topology has too many children
UF_BREP_STATE_wrong_parent     Vertex has both edge and loop parents
UF_BREP_STATE_missing_parent   Child topology has too few parents
UF_BREP_STATE_extra_parent     Child topology has too many parents
UF_BREP_STATE_bad_loop         Loop edges' start & end vertices and sense do not match up
UF_BREP_STATE_disjoint_shell   Shell's faces not all connected
UF_BREP_STATE_non_manifold     Non-manifold vertex
UF_BREP_STATE_topology_error   Uncategorizable topology error
Body check conditions
UF_BREP_STATE_unknown_body_fault      Uncategorizable body failure
UF_BREP_STATE_body_inside_out
UF_BREP_STATE_self_intersecting
UF_BREP_STATE_degenerate_geometry
UF_BREP_STATE_invalid_geometry
UF_BREP_STATE_face_face_inconsistency
UF_BREP_STATE_face_error              uncategorizable face problem
UF_BREP_STATE_vertex_not_on_curve     specify larger tolerance
UF_BREP_STATE_edge_reversed           vertex order appears backward
UF_BREP_STATE_vertex_not_on_surface   specify larger tolerance
UF_BREP_STATE_edge_not_on_surface     specify larger tolerance
UF_BREP_STATE_loop_inconsistent       loop vertices out of order
UF_BREP_STATE_face_or_edge_non_g1     not G1 continuous
UF_BREP_STATE_invalid_entity_ids
attach geometry conditions
UF_BREP_STATE_edge_tol_too_big        required tolerance exceeds user request
UF_BREP_STATE_inconsistent_geom
UF_BREP_STATE_invalid_geom            geometry does not pass checks
UF_BREP_STATE_unknown_geom_fault      possibly corrupt geometry data
Data Members
state_code
int
See the UF_BREP_STATE_ definitions for
the problem descriptions. See uf_curve.h
and uf_modl.h for state codes specific
to curves and surfaces.
flag
int
Modifier to the state_code.
For UF_BREP the modifier indicates
whether UF_BREP could fix the
problem. Use UF_BREP_STATE_IS_FIXED
to query the value.
See uf_curve.h and uf_modl.h for
modifiers specific to curves
and surfaces, e.g., the problem
is in U (as opposed to V) direction.
value [ 3 ]
double
Numeric attributes related to the
problem, e.g., a point coordinate
in the vicinity of a curve degeneracy.
item
UF_BREP_topology_t *
UF_BREP_topology_t entity having the
problem, e.g., the edge not
having attached geometry.
ug_tag
tag_t
NX entity have the problem, if any.
Some topology entities do not
have NX tags, e.g., vertices.
misc
int
For internal bookkeeping only.

------------

UF_BREP - UF_BREP_tagged_object_s
UF_BREP_tagged_object_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_tagged_object_t
UF_BREP_tagged_object_p_t
Overview
This structure specifies a tagged NX object to be used in a topology. When
these objects are attached, they are no longer available as a separately
tagged NX object.
Data Members
object
tag_t
curve or suface object.

------------

UF_BREP - UF_BREP_topology_s
UF_BREP_topology_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_topology_t
UF_BREP_topology_p_t
Overview
Describes an item of topology. A tree of topology items (connected via the
children pointers) describes a body or face. If the tree's root item is a body
the type is one of UF_BREP_SOLID_TOPO, UF_BREP_SHEET_TOPO, or
UF_BREP_TRIMSURF_TOPO. If the body topology element is not present, the first
one must be UF_BREP_FACE_TOPO and there can only be one. It is assumed to be a
UF_BREP_TRIMSURF_TOPO. The face may be part of a body topology.
If there is more than one shell, the outer shell must be the first in the body's
child list. Only vertices cannot have children. Faces are the children of
shells, loops are the children of faces, edges are the children of loops, and
vertices are the children of edges. If fins are present, the fins are children
of the loops and edges are children of the fins. Edges may be absent only in a
trimmed surface topology. Vertices may be children of edges or loops but not of
fins. A loop may have fins or edges as children, or only one vertex. Such a
vertex is is used to represent a loop at a singularity, like the tip of a cone.
The sense of geometry with respect to its topology (faces, fins, edges) is
specified when it is attached, using the sense argument to the attach function.
The order of children also matters for loops and edges. Edges are oriented in
the order given by their child vertices. The edges or fins of a loop must be
listed in order, and the curves must match end to start after accommodating the
fin or edge orientation (the end vertex of one curve must be the same as the
start vertex of the next curve). All loops in a solid or sheet body are ordered
such that the material in the face (the surface of the body) is on the left
when walking the loop with one's head outside the body. Thus, an outer loop
(peripheral border of a face) is counterclockwise when looking from the outside
into the body. Hole loops are clockwise. Sometimes a loop cannot be classified;
it is the left-hand material rule that applies.
The orientation member of the child structure is used for the children of loops
and the children of fins. (All other uses should set the value to
UF_BREP_ORIENTATION_NONE.) Fins are considered always to be positively oriented
with respect to their loop; thus the orientation of the edge is what is
specified, either where the fin is the child of the loop, where the edge is the
child of the loop, or where the edge is the child of the fin. It indicates if
the edge is traced from its first vertex to its second (forward) or from its
second vertex to its first reverse) for the loop in which the edge is used. An
edge must be used in two loops, unless it is a border edge of a sheet body. If
the orientation of an edge is specified (i.e., not NONE) both in its fin and in
its loop, the two values must agree.
On input, fins may be specified. SP curves may be attached directly.
The tag and extension members must be set to NULL_TAG and NULL, respectively.
Use the UF_BREP_INITIALIZE_TOPOLOGY macro.
You can access an identifier for all topology entities using
UF_BREP_ask_identifier. Vertices, fins, and shells do not have NX tags, but do
have identifiers, which are unique within the body.
A fin is where a face joins an edge. The geometry for a fin is the SP curve
that shapes the surface to match the 3D edge. On output from NX, not all edges
in a solid model have fin curves; only tolerant edges do. Other edges do not
have any fin curves and only have a 3D edge curve.
On input to NX, SP curves and 3D curves may be specified for the same edge. All
the information available is used to construct the final edge, which conforms
to the above description of tolerant and non-tolerant edges.
NOTE: SP curves may not be used for creating an edge in V15.0. They may be
specified but are ignored.
Use the macro UF_BREP_INITIALIZE_TOPOLOGY to set all the input fields:
UF_BREP_INITIALIZE_TOPOLOGY(topology, children, nchildren, type).
Data Members
type
UF_BREP_topo_type_t
See UF_BREP_topo_type_s, e.g.,
solid, sheet, trimmed surface, shell,
face, loop, fin, edge, and vertex.
tag
tag_t
NX tag, except for shells, fins,
and vertices, in which case `tag'
is NULL_TAG. If you need unique
identifiers for all topologies in
a body, use the value from
UF_BREP_ask_identifier.
num_children
int
Number of child indices in the
children array. This can be zero
if the parent topology structure
is a vertex.
children
UF_BREP_oriented_child_t *
An array of oriented child
structures designating the
children of this topology item.
This may be NULL if the parent
topology structure is a vertex.
For example loops are children of
a face, vertices are children of
an edge. The outer shell, if any,
must be the first child. Fins,
if any, are always children of
loops while the corresponding
edges are children of the fins.
Only trimmed surfaces may omit
edge topologies. A loop may have
as children: one or more fins,
one or more edges, or even one
vertex (e.g., tip of cone).
Children order matters for fins
and edges, e.g., child vertex
order orients edges. A loop's
edges (fins) must be in order,
i.e., the end of one edge (fin)
must be the start of the next
edge (fin). All loops (except
those in trimmed surfaces) have a
left hand rule orientation, i.e.,
the face material is on the left
while traveling the loop with `up'
pointing in the face normal
direction, which for bodies points
away from the inside. Unless on
the border of a sheet body, an
edge must appear in two loops
with an opposite orientation in
each loop.
u
UF_BREP_t
extension
void *
Opaque pointer reserved for
UF_BREP module internal data.
Do not modify (except indirectly
via UF_BREP_INITIALIZE_TOPOLOGY).

------------

UF_BREP - UF_BREP_torus_s
UF_BREP_torus_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_torus_t
UF_BREP_torus_p_t
Overview
A torus is represented with its location (point at center), axis vector of
the major spin, and the major and minor radii. The reference direction need
not be perpendicular to the axis vector but must not be parallel to it.
Parameterization is 0 to 2pi in u for the spin around the axis and -pi to +pi
in v along the (implied) generator circle. The 0 value for u and v is on the
outside of the torus (away from the axis). When looking at the torus from
the direction opposite the axis, -pi/2 of the generator is away from the
observer.
There are 3 classes of torus: doughnut, apple (including the oscillating
apple), and lemon. For a doughnut, major_rad > minor_rad > 0. For an apple,
major_rad <= minor_rad and major_rad > 0. The case where
major_rad = minor_rad is the oscillating apple and it is periodic in both
directions. For a lemon, major_rad < 0 and |major_rad| < minor_rad. These
may be determined by calling UF_MODL_ask_torus_face_type.
Data Members
center [ 3 ]
double
Defines the location of the major center.
axis [ 3 ]
double
Major axis of the torus, through the center
of the doughnut.
u0_ref_direc [ 3 ]
double
Defines the orientation of zero in u.
major_radius
double
Radius from axis to center of generation
circle.
minor_radius
double
Radius of generator circle.

------------

UF_BREP - UF_BREP_uvbox_s
UF_BREP_uvbox_s
(view source)
Defined in: uf_brep_types.h
Also known as:
UF_BREP_uvbox_t
UF_BREP_uvbox_p_t
Overview
This structure defines a box in U/V space that contains faces, surfaces,
SP-curves, and SP-curve loops.
Data Members
umin
double
Minimum u parameter of the box.
umax
double
Maximum u parameter of the box.
vmin
double
Minimum v parameter of the box.
vmax
double
Maximum v parameter of the box.

------------

UF_CAM - UF_CAM_preferences_s
UF_CAM_preferences_s
(view source)
Defined in: uf_cam.h
Also known as:
UF_CAM_preferences_t
UF_CAM_preferences_p_t
Overview
NOTES on UF_CAM_preferences_t:
1) all items that refer to color can take any of the color values that
appear in uf_obj.h.
2) all the item here have the same meaning as defined in the CAM
Preferences chapter of the NX Users Manual.
Data Members
blank_geom_color
int
blank_geom_type
int
check_geom_color
int
check_geom_type
int
clearance_geom_color
int
clsf_decimal_place
int
clsf_replay_advanced
logical
clsf_replay_refresh
logical
clsf_replay_vericut
logical
clsf_type
int
collect_instances
logical
create_tool_lib_entry
logical
cut_area_geom_color
int
cut_area_geom_type
int
delete_param_set
logical
drive_geom_color
int
generate_instance
logical
info_csys
int
macro_only
logical
mcs_link_to_rcs
int
mcs_stat
int
parent_display
logical
part_geom_color
int
part_geom_type
int
pause_aft_path
logical
rcs_disp_stat
int
rcs_inv_matrix [ 9 ]
double
rcs_map_stat
int
rcs_origin [ 3 ]
double
rcs_stat
int
refresh_bef_path
logical
show_edited_status
logical
show_standard_type
logical
show_template_type
logical
show_tool_name
logical
template_tool
logical
toolpath_only
logical
template_set_used [ UF_CAM_MAX_TEMPLATE_SET_NAME_BUFSIZE ]
char
transform_toolpath
logical
trim_geom_color
int
uncut_geom_color
int
unlink_instance
logical
use_customized_interface
logical
visible_scrollable_items
int
automatically_update_when_loading
logical
NEW in NX 3.0

------------

UF_CAM - UF_CAMBND_app_data_s
UF_CAMBND_app_data_s
(view source)
Defined in: uf_cambnd.h
Also known as:
UF_CAMBND_app_data_t
UF_CAMBND_app_data_p_t
Overview
The application data for a boundary and the members:
The following information shows the types of application data
allowed by the objects and the boundary types.
An error code is returned by the functions if a wrong type
of application data is set.
Facing Operation Boundary:
Blank Boundary:
Boundary:          Stock, Feedrate
Boundary members:  Stock, Feedrate, Tool Position
Check Boundary:
Boundary:          Stock, Feedrate
Boundary members:  Stock, Feedrate, Tool Position
Planar Mill Operation Boundary: (also Cavity Mill)
Part Boundary:
Boundary:          Stock, Tolerances, Blank Distance, Feedrate
Boundary members:  Stock, Tolerances, Feedrate, Tool Position
Blank Boundary:
Boundary:          Stock, Tolerances, Feedrate
Boundary members:  Stock, Tolerances, Feedrate, Tool Position
Check Boundary:
Boundary:          Stock, Tolerances
Trim Boundary:
Boundary:          Stock, Tolerances
Data Members
has_stock
int
Stock flag.
Set to 1 if used, or else set to 0.
stock
double
Stock value.
has_tolerances
int
Tolerance flag.
Set to 1 if used, or else set to 0.
tolerances [ 2 ]
double
Tolerance values
[0] = intol
[1] = outtol
has_feedrate
int
Feed rate flag.
Set to 1 if used, or else set to 0.
feedrate_unit
UF_CAM_feedrate_unit_t
Feed rate unit.
feedrate_value
double
Feed rate value.
has_blank_distance
int
Blank distance flag.
Set to 1 if used, or else set to 0.
blank_distance
double
Blank distance value.
has_tool_position
int
Tool position flag.
Set to 1 if used, or else set to 0.
tool_position
UF_CAM_tool_position_t
Tool position value.

------------

UF_CAM - UF_CAMBND_boundary_data_s
UF_CAMBND_boundary_data_s
(view source)
Defined in: uf_cambnd.h
Also known as:
UF_CAMBND_boundary_data_t
UF_CAMBND_boundary_data_p_t
Overview
The data for the boundary:
boundary_type   - It indicates whether the boundary is open or closed.
It is not used when the boundaries are created from
a face. Boundaries created from a face are always closed.
plane_type      - It indicates whether the plane of the boundary is
defined by the user or defined automatically.
It is not used when the boundaries are created from
a face. Boundaries created from a face are always automatic.
origin          - It is the origin of the plane.
It is used only if the plane type is user defined.
matrix          - It is the rotation matrix of the plane.
It is used only if the plane type is user defined.
material_side   - It indicates the material side of the boundary.
ignore_holes    - It indicates whether the boundaries are to be created
from the holes in the face, or if the holes are to be ignored.
ignore_islands  - It indicates whether the boundaries are to be created
from the islands in the face, or if the islands are to be ignored.
ignore_chamfers - It indicates whether or not to ignore the chamfers and blends
of the face. Boundaries will be extended to the chamfers and blends
of the face if this value is set to one.
app_data        - It is the application data applied to the boundary.
Set it to NULL if the boundary has no application data.
Data Members
boundary_type
UF_CAM_boundary_type_t
Boundary type.
plane_type
int
Boundary plane type.
0 = user defined
1 = automatic
origin [ 3 ]
double
Origin of the plane.
It is used only if plane type is 0.
matrix [ 9 ]
double
The rotation matrix of the plane.
It is used only if plane type is 0.
material_side
UF_CAM_material_side_t
Material side.
ignore_holes
int
Ignore holes in the face.
0 = do not ignore holes
1 = ignore holes
ignore_islands
int
Ignore islands in the face.
0 = do not ignore islands
1 = ignore islands
ignore_chamfers
int
Ignore chamfers of the face.
0 = do not ignore chamfers
1 = ignore chamfers
app_data
UF_CAMBND_app_data_t *
Application data applied to
the boundary.
NULL = no application data.

------------

UF_CAM - UF_CAMBND_group_data_s
UF_CAMBND_group_data_s
(view source)
Defined in: uf_cambnd.h
Also known as:
UF_CAMBND_group_data_t
UF_CAMBND_group_data_p_t
Overview
The group data for a boundary and the members:
The following information shows the group data
allowed by the objects and the boundary types.
An error code is returned by the functions if a wrong type
of group data is set.
Mill Boundary Group:
Part Boundary:
Boundary:          Offset
Boundary members:  Offset
Blank Boundary:
Boundary:          Offset
Boundary members:  Offset
Check Boundary:
Boundary:          Offset
Boundary members:  Offset
Trim Boundary:
Boundary:          Offset
Boundary members:  Offset
Turn Boundary Group:
Part Boundary:
Boundary:          Offset
Boundary members:  Offset
Blank Boundary:
Boundary members:  Offset
Data Members
has_offset
int
Offset flag.
Set to 1 if used, or else set to 0.
offsetType
int
Offset type.
0 Distance 1 % of tool diameter.
offset
double
Offset value.
nominalOffset
double
Percentage of tool diameter for
offsetType == 1

------------

UF_CAM - UF_CAMGEOM_app_data_s
UF_CAMGEOM_app_data_s
(view source)
Defined in: uf_camgeom.h
Also known as:
UF_CAMGEOM_app_data_t
UF_CAMGEOM_app_data_p_t
Overview
The application data for CAMGEOM items:
The following information shows the types of application data
allowed by the objects and the geometry types.
An error code is returned by the functions if a wrong type
of application data is set.
Mill geometry Group:
Part Geometry:       Offset
Blank Geometry:      None
Check Geometry:      None
Mill area Group:
Part Geometry:       Offset
Check Geometry:      None
Cut area Geometry:   None
Wall Geometry:       None
Facing Operation:
Part Geometry:       None
Check Geometry:      None
Cut area Geometry:   None
Wall Geometry:       None
Cavity Mill Operation:
Part Geometry:       Stock, Tolerances
Blank Geometry:      Stock, Tolerances
Check Geometry:      None
ZLevel Mill Operation:
Part Geometry:       Stock, Tolerances
Check Geometry:      None
Cut area Geometry:   None
Surface Contour Operation:
Part Geometry:       Cut Stock, Tolerances, Feedrate
Check Geometry:      Cut Stock, Tolerances, Avoidance
Cut area Geometry:   None
Data Members
has_stock
int
Stock flag.
Set to 1 if used, or else set to 0.
stock
double
Stock value.
has_cut_stock
int
Cut stock flag.
Set to 1 if used, or else set to 0.
cut_stock [ 3 ]
double
Cut stock value:
cut_stock[0] = initial stock
cut_stock[1] = final stock
cut_stock[2] = safe clearance
has_tolerances
int
Tolerance flag.
Set to 1 if used, or else set to 0.
tolerances [ 2 ]
double
Tolerance value:
tolerance[0] = intol
tolerance[1] = outol
has_feedrate
int
Feed rate flag.
Set to 1 if used, or else set to 0.
feedrate_unit
UF_CAM_feedrate_unit_t
Feed rate unit.
feedrate_value
double
Feed rate value.
has_offset
int
Offset flag.
Set to 1 if used, or else set to 0.
offsetType
int
Offset type flag.
0 = distance, 1 = % of tool
nominalOffset
double
distance for offsetType = 0,
percentage of tool for offsetType = 1
offset
double
Offset value, either specified or computed.
has_avoidance_type
int
Avoidance type flag.
Set to 1 if used, or else set to 0.
avoidance_type
UF_CAM_avoidance_type_t
Avoidance type value.

------------

UF_CAM - UF_CAMGEOM_custom_point_s
UF_CAMGEOM_custom_point_s
(view source)
Defined in: uf_camgeom.h
Also known as:
UF_CAMGEOM_custom_point_t
UF_CAMGEOM_custom_point_p_t
Data Members
point_tag
tag_t
tag of defined point - may be null.
point_acs [ 3 ]
double
point coordinates in Absolute part units.
On input, if the point_tag is valid, the
coordinates from that entity will be used
and this array will be ignored. On output,
this array will be filled with the data from
the point tag entity if it is specified,
otherwise the data from the operation record
will be returned.
upper_depth
double
The upper depth value. This is only used
for cut region start points in Planar and
Cavity Milling. May be 0.0
lower_depth
double
The lower depth value. This is only used
for cut region start points in Planar and
Cavity Milling. May be 0.0
depth
double
The depth value. This is only used for
predrill engage points in Planar and Cavity
Milling. May be 0.0

------------

UF_CGM - UF_CGM_color_s
UF_CGM_color_s
(view source)
Defined in: uf_cgm_types.h
Also known as:
UF_CGM_color_t
UF_CGM_color_p_t
Data Members
clr_index
int
Color index in the range
[ 0 to UF_OBJ_MAX_COLOR ]
clr_name [ UF_CGM_MAX_NAME_SIZE+1 ]
char
Color name, specified as a
NULL-terminated ASCII string
clr_vals [ 3 ]
double
An RGB definition of the
color, consisting of red,
green, and blue values in
the range [ 0.0 to 1.0 ].
favorite_index
int
If the color is a favorite
color, an favorite index in
the range [ 1 to 30 ].
Otherwise, UF_CGM_NO_FAVORITE.

------------

UF_CGM - UF_CGM_custom_colors_s
UF_CGM_custom_colors_s
(view source)
Defined in: uf_cgm_types.h
Also known as:
UF_CGM_custom_colors_t
UF_CGM_custom_colors_p_t
UF_PLOT_custom_colors_p_t
UF_PLOT_custom_colors_t
Overview
STRUCTURE:   UF_CGM_custom_colors_t
DESCRIPTION: This structure contains the parameters for a color palette.
It can be used to map the colors of a display image when
creating a CGM.
Data Members
colors [ UF_CGM_MAX_COLORS ]
UF_CGM_color_t

------------

UF_CGM - UF_CGM_custom_widths_s
UF_CGM_custom_widths_s
(view source)
Defined in: uf_cgm_types.h
Also known as:
UF_CGM_custom_widths_t
UF_CGM_custom_widths_p_t
UF_PLOT_custom_widths_p_t
UF_PLOT_custom_widths_t
Overview
STRUCTURE:   UF_CGM_custom_widths_t
DESCRIPTION: This structure describes a width palette.  It can be used to
map the line widths of a display image when creating a CGM.
It gives the units in which all the widths are stored, single width information,
the custom width definitions, and an entry for each color.
The 'use' member specifies the primary selection of which
type of width assignment to use.
The 'single_width' member contains the last-typed value for
the user-defined width to use when UF_CGM_width_user is
selected for member 'single'.  It is always defined, even when
'single' is not set to UF_CGM_width_user.
The 'single_source' member contains a value when the 'single'
member is UF_CGM_width_std or UF_CGM_width_custom. The value
is the index in the 'custom' width array or the standard width
index value. Both are assumed to be in internal order, normal,
thick, and thin for 0, 1, and 2, respectively.
Note that 'single_source' is undefined when 'single' is
UF_CGM_width_single.
The 'widths' array is indexed by the color index straight
out of the database, or 1-216.  Therefore the array is one
longer than the actual number of colors, or 217.
Note: the structure has been devised to be amenable to
increasing the number of width indices.
Data Members
units
int
Units of data in this structure:
UF_PART_METRIC
UF_PART_ENGLISH
use
UF_CGM_width_use_t
type of width assignment to use
single
UF_CGM_width_single_t
single width type selection
single_width
double
user-defined width value
single_source
int
source index for single width when
single is _std or _custom
custom [ UF_CGM_MAX_WIDTHS ]
UF_CGM_width_custom_t
per-width custom width definitions
color [ UF_CGM_MAX_COLORS ]
UF_CGM_width_color_t
per-color custom width definitions

------------

UF_CGM - UF_CGM_dimensions_s
UF_CGM_dimensions_s
(view source)
Defined in: uf_cgm_types.h
Also known as:
UF_CGM_dimensions_t
UF_CGM_dimensions_p_t
Overview
Structure UF_CGM_dimensions_t specifies the dimensions of CGM
geometry recorded in the CGM file. The dimensions field of the
UF_CGM_size_t structure is a structure of type UF_CGM_dimensions_t.
The dimensions field of the UF_CGM_dimensions_t structure specifies
the width and height of CGM geometry, expressed in the units indicated
by the units field.
Data Members
units
UF_CGM_units_t
dimensions [ 2 ]
double

------------

UF_CGM - UF_CGM_export_options_s
UF_CGM_export_options_s
(view source)
Defined in: uf_cgm_types.h
Also known as:
UF_CGM_export_options_t
UF_CGM_export_options_p_t
Overview
The fields of structure UF_CGM_export_options_t specify options for
CGM export operations.
Data Members
colors
UF_CGM_colors_t
Specifies how colors are applied
to exported geometry.
widths
UF_CGM_widths_t
Specifies how lines widths are
applied to exported geometry.
vdc_mode
UF_CGM_vdc_mode_t
Specifies how coordinates are
represented in the CGM file.
size
UF_CGM_size_t
Specifies the size or scale of
exported geometry.
text_mode
UF_CGM_text_mode_t
Specifies how text geometry is
represented in the CGM file.
fonts
UF_CGM_fonts_t
Specifies how fonts are recorded
in the CGM file.
reason
UF_CGM_export_reason_t
Specifies the reason the CGM
file is being exported. This
can have an effect on how the
CGM is produced. The default
is UF_CGM_export_reason.
tolerance
double
A unitless value that controls
the accuracy or smoothness of
exported curve geometry. Values
must be greater than or equal to
1.0e-10 (.0000000001). Smaller
values produce smoother curves.

------------

UF_CGM - UF_CGM_import_options_s
UF_CGM_import_options_s
(view source)
Defined in: uf_cgm_types.h
Also known as:
UF_CGM_import_options_t
UF_CGM_import_options_p_t
Overview
The fields of structure UF_CGM_import_options_t specify options for
CGM import operations.
allow_new_drawing - Set to FALSE if geometry is not to be imported
onto a new drawing sheet. If set to TRUE, the
system determines whether or not to create a new
drawing sheet for imported geometry. (TRUE by
default.)
Data Members
allow_new_drawing
logical
TRUE, if geometry can
be imported onto a new
drawing sheet.

------------

UF_CGM - UF_CGM_size_s
UF_CGM_size_s
(view source)
Defined in: uf_cgm_types.h
Also known as:
UF_CGM_size_t
UF_CGM_size_p_t
Overview
Structure UF_CGM_size_t specifies the size of geometry recorded
in the CGM file. The size field of the UF_CGM_export_options_t
structure is a structure of type UF_CGM_size_t.
If the mode field of the UF_CGM_size_t structure is set to
UF_CGM_SIZE_BY_SCALE, then geometry is sized according to the
scale factor specified by the scale field. If the mode field is
set to UF_CGM_SIZE_BY_DIMENSIONS, then geometry is sized to fit
the dimensions specified by the dimensions field.
Data Members
mode
UF_CGM_size_mode_t
scale
double
dimensions
UF_CGM_dimensions_t

------------

UF_CGM - UF_CGM_width_color_s
UF_CGM_width_color_s
(view source)
Defined in: uf_cgm_types.h
Also known as:
UF_CGM_width_color_t
UF_CGM_width_color_p_t
UF_PLOT_width_color_p_t
UF_PLOT_width_color_t
Overview
STRUCTURE:   UF_CGM_width_color_t
DESCRIPTION: This structure describes a custom width by color index.
The width_source member has the following values:
-1  not a custom width (UF_CGM_NOT_CUSTOM_WIDTH)
>=0  custom width index - value is the index into the
custom member of the main structure below.
Note that the index is an internal one.
Note that the width member of this structure contains the
actual width to use with its color index, regardless of the
source.
Data Members
width
double
Width associated with the color
width_source
int
Width entry source

------------

UF_CGM - UF_CGM_width_custom_s
UF_CGM_width_custom_s
(view source)
Defined in: uf_cgm_types.h
Also known as:
UF_CGM_width_custom_t
UF_CGM_width_custom_p_t
UF_PLOT_width_custom_p_t
UF_PLOT_width_custom_t
Overview
STRUCTURE:   UF_CGM_width_custom_t
DESCRIPTION: This structure describes a custom width by width index.
There are 3 legacy widths (thin, normal, thick) and the
new 9 standard widths that can also be customized.
Data Members
width
double
Width of lines for the custom width
name [ UF_CGM_MAX_NAME_SIZE+1 ]
char
Width name, specified as a
NULL-terminated ASCII string

------------

UF_CLONE - UF_CLONE_checkin_data_s
UF_CLONE_checkin_data_s
(view source)
Defined in: uf_clone.h
Also known as:
UF_CLONE_checkin_data_t
UF_CLONE_checkin_data_p_t
Overview
structure defining checkin data
Data Members
checkin
logical
true if the part is to be checked out
error_if_no_co
logical
true if it is an error for the part not be be
checked out

------------

UF_CLONE - UF_CLONE_checkout_data_s
UF_CLONE_checkout_data_s
(view source)
Defined in: uf_clone.h
Also known as:
UF_CLONE_checkout_data_t
UF_CLONE_checkout_data_p_t
Overview
structure defining a checkout operation. This structure can be
either an input argument (to a _set_ function) or an output argument
(to an _ask_ function
Data Members
checkout
logical
<O> if structure being returned
true if the part is to be checked out
comment
char *
<OF> if structure being returned
comment string, ignored if flag is false

------------

UF_CLONE - UF_CLONE_copy_nm_opt_s
UF_CLONE_copy_nm_opt_s
(view source)
Defined in: uf_clone.h
Also known as:
UF_CLONE_copy_nm_opt_t
UF_CLONE_copy_nm_opt_p_t
Overview
UF_CLONE_copy_nm_opt_t: Element of a linked list setting the
flag for a specific non-master type to indicate whether or not it
should be copied during a clone, import or export operation, the
list is terminated by setting the next field of this structure to
NULL. This structure can be either an input argument to a _set_
function or an output argument of an _ask_ function.
Data Members
nonmaster_type
char *
<OF> when structure is being
returned a string containing the name of a
nonmaster type defined in the database, such as
"specification"
copy
logical
<O> when structure is being returned
a logical indicating whether this nonmaster type
should be copied during a clone operation, imported,
or exported. TRUE means that nonmasters of that
type will be copied
next
struct UF_CLONE_copy_nm_opt_s *
<OF> when structure
is being returned a pointer to the
next element in the linked list of
options

------------

UF_CLONE - UF_CLONE_ex_log_opts_s
UF_CLONE_ex_log_opts_s
(view source)
Defined in: uf_clone.h
Also known as:
UF_CLONE_ex_log_opts_t
UF_CLONE_ex_log_opts_p_t
Data Members
allow_missing_components
logical
A flag indicating whether the clone
should proceed even if components in
the assembly being cloned cannot be
found
allow_out_of_sync_bvrs
logical
A flag for use in an NX Manager
environment to control the clone
operation's behaviour with respect
to BOM View Revisions (BVR's) - see the
NX Manager Users Manual for an
explanation of these. The flag indicates
whether the clone should proceed even if
components in the assembly have BVR's in
the database that are not synchronised
with the NX component structure.
The flag will be ignored in a
Native NX environment.

------------

UF_CLONE - UF_CLONE_gen_log_opts_s
UF_CLONE_gen_log_opts_s
(view source)
Defined in: uf_clone.h
Also known as:
UF_CLONE_gen_log_opts_t
UF_CLONE_gen_log_opts_p_t
Data Members
default_action
UF_CLONE_action_t
<I>
enum value indicating the default
action to be applied to
components
default_naming
UF_CLONE_naming_technique_t
<I>
enum value indicating the
default naming technique to
be applied to components
copy_nonmaster_opts
UF_CLONE_copy_nm_opt_p_t
<I>
a linked list of
nonmaster_type/logical
pairs indicating whether
those nonmaster types
should be copied during
the clone, import or
export operation. Only
relevant in an NX Manager
environment, may be null.
default_validation_opts
UF_CLONE_validation_opts_p_t
<I>
a data structure
indicating the options
to control whether and
how the validation objects
should be created during
the import operation. Only
relevant for import operation
in an NX Manager
environment, may be null.
When null is used, validation
objects will not be created.

------------

UF_CLONE - UF_CLONE_log_file_failure_s
UF_CLONE_log_file_failure_s
(view source)
Defined in: uf_clone.h
Also known as:
UF_CLONE_log_file_failure_t
UF_CLONE_log_file_failure_p_t
Overview
structure used to report extra details of an error detected when
reading a log file, supplementary to the information given by applying
UF_get_fail_message to the return code of the UF_CLONE_load_logfile
call
Data Members
line_number
int
<O>
line number in the log file on which the error
was detected
input_part_name
char *
<OF> with UF_free
part name being processed when error occurred,
may be NULL
invalid_token
char *
<OF> with UF_free
token which was invalid, may be NULL

------------

UF_CLONE - UF_CLONE_name_rule_def_s
UF_CLONE_name_rule_def_s
(view source)
Defined in: uf_clone.h
Also known as:
UF_CLONE_name_rule_def_t
UF_CLONE_name_rule_def_p_t
Overview
Structure describing a name rule. See the Assembly Modelling User
Manual for a description of clone name rules.
Data Members
type
UF_CLONE_name_rule_type_t
the type of this name rule
base_string
char *
string to be replaced (only valid for
UF_CLONE_replace)
new_string
char *
string to prepend or append, replace
the base string with or renumber
template

------------

UF_CLONE - UF_CLONE_naming_failures_s
UF_CLONE_naming_failures_s
(view source)
Defined in: uf_clone.h
Also known as:
UF_CLONE_naming_failures_t
UF_CLONE_naming_failures_p_t
Overview
structure used to report naming failures during operations such as
reading a log file, applying defaults or setting a name rule.
Data Members
n_failures
int
<O>
Number of failures reported
statuses
int *
<OF> with UF_free;
Error codes, use UF_get_fail_message() to get
a description
input_names
char * *
<OF> - with UF_FREE_string_array;
part names of parts the failures apply to
output_names
char * *
<OF> - with UF_FREE_string_array;
output names for parts the failures apply to
(may be null, since the part name may not have
been generated correctly)

------------

UF_CLONE - UF_CLONE_validation_opts_s
UF_CLONE_validation_opts_s
(view source)
Defined in: uf_clone.h
Also known as:
UF_CLONE_validation_opts_t
UF_CLONE_validation_opts_p_t
Overview
Validation options indicating how validation objects should be created during
the import operation.  Only relevant for the import operation in an NX Manager
environment.  This structure may be null ? no validation objects will be created.
Data Members
mode
UF_CLONE_validation_mode_t
Default validation mode to be applied to
components
validation_rule
char *
<OF> The validation rule file name to be used to compare
with valdation results. It could be an O/S file name
or a name in CLI format. Must specify one when mode
is not UF_CLONE_no_validation
This must be freed using UF_free
treat_warning_as_pass
logical
A flag indicating whether to treat a validation result
with the status "Pass but with warning" as PASS or not
while comparing this validation result with validation rule
treat_outdated_as_pass
logical
A flag indicating whether to treat a validation result
with the status "Pass but outdated" as PASS or not
while comparing this validation result with validation rule

------------

UF_CURVE - UF_CURVE_arc_s
UF_CURVE_arc_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_arc_t
UF_CURVE_arc_p_t
Overview
Figure Arc construction
The matrix tag defines the orientation of the arc. The arc center is
with respect to the origin (0,0,0) of the absolute coordinate system
using the orientation of the arcs matrix. If you have arc center
coordinates with respect to the absolute coordinate system you must
map the coordinates to the arcs CSYS and enter these mapped
coordinates into the arc_center[3] member field of the
UF_CURVE_arc_s structure. To obtain the mapped coordinates use
the following transformation mapping:
[X][T] = mapped coordinates
where you take the matrix multiplication of X and T. X is the vector
coordinates [x y z] that you wish to map, T is the orientation matrix
represented by matrix_tag. The results, mapped coordinates, are the
values to enter into arc_center[3]
To obtain an orientation (rotation) matrix rotated about an axis at a
specified angle use UF_MTX3_rotate_about_axis. To obtain the
product of a vector and matrix use UF_MTX3_vec_multiply. To create
the matrix and obtain its tag use UF_CSYS_create_matrix.
Refer to the
example
See the Matrices and Coordinate System (uf_csys.h)
for routines that you can use for getting the matrix_tag.
Data Members
matrix_tag
tag_t
matrix for the CSYS the arc is in
start_angle
double
expressed in radians
end_angle
double
expressed in radians
arc_center [ 3 ]
double
center of the arc
radius
double
radius of the arc

------------

UF_CURVE - UF_CURVE_BCMMCP_s
UF_CURVE_BCMMCP_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_BCMMCP_t
UF_CURVE_BCMMCP_p_t
Overview
structure containing edit information passed to
UF_CURVE_edit_move_mult_points.
explanation:  start segment (SS) and end segment (ES)
remain fixed while the inner segment (IS) is moved by
defining the new location of its end points (e1,e2)
SS         e1      IS      e2             ES
.....+......+...............+............+.... curve S(u)
|      S(disp_par1)    S(disp_par2) |
|                                   |
S(lim_par1)                         S(lim_par2)
methods to define direction/distance for moving ei:
displace_methodj  direction           distance
j=1               curve normal at ei  distancei
j=2               vectori             distancei
j=3               new location defined by dir_pti
Structure containing edit information
description
Data Members
lim_par1
double
limit of start segment (SS)
lim_par2
limit of end segment (ES)
disp_par1
left limit of inner segment
disp_par2
right limit of inner segment
distance1
distance to move e1 needed depending on
selected displace_method
distance2
distance to move e2 needed depending on
selected displace_method
vector1 [ 3 ]
direction to move e1 needed depending on
selected displace_method
vector2 [ 3 ]
direction to move e2 needed depending on
selected displace_method
dir_pt1 [ 3 ]
new location for e1 needed depending on
selected displace_method
dir_pt2 [ 3 ]
new location for e2 needed depending on
selected displace_method
displace_method1
int
displacement method for e1
displace_method2
displacement method for e2

------------

UF_CURVE - UF_CURVE_bridge_data_s
UF_CURVE_bridge_data_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_bridge_data_t
UF_CURVE_bridge_data_p_t
Overview
Main structure for bridge curve data.
The member elements method, input_curve1, input_curve2 and match_point
are required for all bridge types.
The members reverse_tangents, shape_control1 and shape_control2
are required for all except UF_CURVE_inherit_shape and UF_CURVE_tangent_conic.
The member shape_control1 is used for UF_CURVES_tangent_conic.
The member stiffness_method is used for UF_CURVES_match_curvature_peak only.
The member inherit_curve is used for UF_CURVE_inherit_shape method only.
Documentation for UF_STRING_p_t and UF_STRING_t can be found in the NX Open
Reference Manual under uf_modl -> Types ->
string_list.
Data Members
method
UF_CURVE_bridge_method_t
creation method
input_curve1
UF_STRING_p_t
First input string, must contain only one
curve or edge. Use
UF_MODL_init_string_list and
UF_MODL_create_string_list to
create input strings. Use
UF_MODL_free_string_list to free
memory after the string is created.
input_curve2
UF_STRING_p_t
Second input string, must contain only
one curve or edge. Use
UF_MODL_init_string_list and
UF_MODL_create_string_list to
create input strings. Use
UF_MODL_free_string_list to free
memory after the string is created.
matchpt_parms [ 2 ]
char *
Location parameter on input strings,
used as a percentage along the string,
must be an expression or a number between
0.0 and 100.0
match_point [ 2 ]
tag_t
Location reference points (optional)
reverse_tangents [ 2 ]
logical
True= Reverse Tangents,
False = Dont Reverse Tangents
shape_control1
char *
Shape Control
For UF_CURVE_match__ends: Tangent
magnitude at first input curve, must be
an expression or a number greater than
0.0. For UF_CURVE_match__peak:
Controls depth at peak point, must be an
expression or a number between 0.0 and
100.0. For UF_CURVE_tangent_conic:
Controls the rho value, must be an
expression or a number between 0.0 and
1.0
shape_control2
char *
Shape Control
For UF_CURVE_match__ends: Tangent
magnatude at second input curve, must be
an expression or a number greater than
0.0 For UF_CURVE_match__peak: Controls
skew at peak point, must be an expression
or a number between 0.0 and 100.0
stiffness_method
int
Controls (to some extent) the degree,
continuity, and complexity of the curve
0 = automatic
1 = low
2 = high
inherit_curve
UF_STRING_p_t
Reference shape string, must contain only
one curve or edge. Use
UF_MODL_init_string_list and
UF_MODL_create_string_list to
create input strings. Use
UF_MODL_free_string_list to free
memory after the string is created.

------------

UF_CURVE - UF_CURVE_combine_curves_direction_s
UF_CURVE_combine_curves_direction_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_combine_curves_direction_t
UF_CURVE_combine_curves_direction_p_t
Data Members
direction_type
UF_CURVE_direction_t
type of projection.
UF_CURVE_ALONG_PLANAR_CURVE_NORMALS
UF_CURVE_ALONG_FIXED_VECTOR
direction_struct
UF_CURVE_direction_struct_u
Additional information
required based on the direction
type. If direction type is
UF_CURVE_ALONG_FIXED_VECTOR then
this structure is the 3D
projection vector.

------------

UF_CURVE - UF_CURVE_conic_s
UF_CURVE_conic_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_conic_t
UF_CURVE_conic_p_t
Overview
Refer to the
description
The matrix defines the orientation of the plane in which the conic lies,
in the same manner as the matrix for an arc. The X axis of the matrix
determines the orientation of angle zero.
A point on the conic (in the XY plane) is given by
For ellipse:
X = k1  cos (t)
Y = k2  sin (t)
For parabola:
X = t2 / k1
Y = t
For hyperbola:
X = k1 / cos (t)
Y = k2  sin (t) / cos (t)
where t is the parameter value.
NOTE that for an ellipse, the parameter values are NOT angles.
For a given parameter value, t, the angle (in radians) is the inverse
tangent (arctan) of Y/X.  For angles between 0 and pi/2 the following
equation can be used to determine ellipse parameter values:
t = arctan( (k1 / k2)  tan(angle) )
This is a general function to compute the parameter when the angles are between
0 and 2pi range.
static void ConvertAngleToParamterForEllipse( double k1, //<I>
double k2, //<I>
double angle, //<I>
double tParameter //<O>paramter of angle)
{
double  xx = k2  cos (angleDEGRA);
double  yy = k1  sin (angleDEGRA);
if( fabs(yy) > 1.0e-10 )
{
if( fabs(xx) > 1.0e-10)
{
tParameter = atan(yy/xx);
if( xx > 0.0 && yy < 0.0)
tParameter +=TWOPI;
if( xx < 0.0 && yy < 0.0)
tParameter += PI;
if( xx < 0.0 && yy > 0.0)
tParameter += PI;
}
else
{
tParameter = PI/2.0;
if(yy < 0.0)
tParameter = 3.0PI/2.0;
}
}
else
{
tParameter = 0.0;
if(xx < 0)
tParameter = PI;
}
}
Data Members
matrix_tag
tag_t
tag of defining matrix for conic
conic_type
int
subtype: see uf_object_types.h
rotation_angle
double
angle of rotation of conic X from matrix X
start_param
double
start parameter value
end_param
double
end parameter value
center [ 3 ]
double
center of conic
k1
double
first shape parameter
k2
double
second shape parameter

------------

UF_CURVE - UF_CURVE_constraint_s
UF_CURVE_constraint_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_constraint_t
UF_CURVE_constraint_p_t
Overview
The following structure is the structure used define the constraint
with which the associative curve must be created.
Data Members
constraint_type
UF_CURVE_constraint_type_t
The type of constraint
end_type
UF_CURVE_end_type_t
The end to which this constraint
must be applied.
object_tag
tag_t
Object with which the constraint
is to be applied.
value
double
If constraint needs a value then
use this field, ex. UF_CURVE_angle
UF_CURVE_radius type constraints.
help_data
UF_CURVE_help_data_t
help data when constraint is tangent / normal

------------

UF_CURVE - UF_CURVE_fit_error_s
UF_CURVE_fit_error_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_fit_error_t
UF_CURVE_fit_error_p_t
Data Members
max_error
double
avg_error
double
point_with_max_error
int
interpolated
int

------------

UF_CURVE - UF_CURVE_genconic_s
UF_CURVE_genconic_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_genconic_t
UF_CURVE_genconic_p_t
Overview
The matrix defines the orientation of the plane in which the conic lies,
in the same manner as the matrix for an arc. The X axis of the matrix
determines the orientation of angle zero. The type of the conic must
be determined from the coefficients. The points select the branch of
the hyperbola and determine the parameterization sense.
Data Members
matrix_tag
tag_t
tag of matrix defining orientation, or
construction space
coefficients [ 6 ]
double
the coefficients of the conic in general
form, a through f
start_pt [ 3 ]
double
starting point, in construction space
end_pt [ 3 ]
double
ending point, in construction space

------------

UF_CURVE - UF_CURVE_help_data_s
UF_CURVE_help_data_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_help_data_t
UF_CURVE_help_data_p_t
Overview
The following structure is the structure used define the help data for the
associative curves.
Data Members
help_data_type
UF_CURVE_help_data_type_t
Type of help data
value [ 3 ]
double
Coordinate value of a point
parameter
double
Value of a point by parameter

------------

UF_CURVE - UF_CURVE_intersect_info_s
UF_CURVE_intersect_info_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_intersect_info_t
UF_CURVE_intersect_info_p_t
Overview
structure containing output intersection information
for UF_CURVE_intersect.
Parameter values are in natural parameter space.
Data Members
type_of_intersection
int
type of intersection found
= 0 -> none
= 1 -> 3D intersection
= 2 -> 2D intersection
curve_point [ 3 ]
double
intersection point coordinates
on curve
curve_parm
double
parameter value of intersection
point on curve
entity_parms [ 2 ]
double
parameter value(s) of intersection
point on entity, both values
are valid when the entity is a
body or face, neither value is
valid for a plane or datum plane,
otherwise only the first value is
used

------------

UF_CURVE - UF_CURVE_limit_s
UF_CURVE_limit_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_limit_t
UF_CURVE_limit_p_t
Overview
The following structure is the structure used define the limits of the
end of associative curves.
Data Members
limit_type
UF_CURVE_limit_type_t
Type of limit
value
double
Value by which to extend
in case of UF_CURVE_limit_value.
In case of arc/circle the value
should be in degrees.
limiting_obj
tag_t
The object upto which the end must be extended, used when limit type is UF_CURVE_limit_to_entity.
help_data
UF_CURVE_help_data_t
help data when limit type is UF_CURVE_limit_to_entity and there are multiple intersections of line/arc with limiting entity.

------------

UF_CURVE - UF_CURVE_line_arc_s
UF_CURVE_line_arc_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_line_arc_t
UF_CURVE_line_arc_p_t
Overview
The following structure is the main structure to create the associative
curve using the UF_CURVE_create_line_arc() and UF_SF_CURVE_create_line_arc interfaces.
Data Members
curve_type
UF_CURVE_line_arc_type_t
Type of curve to create i.e. line/arc
arc_constraint_subtype
UF_CURVE_asso_arc_subtype_t
The subtype of curve
constraints [ 3 ]
UF_CURVE_constraint_t
Array of constraint to be satisfied.
Two constraints in case of line.
Two constraints in case of arc by center.
Three constraints in case of arc.
limits [ 2 ]
UF_CURVE_limit_t
The start and end limits of the curve
plane_of_curve
tag_t
Plane on which curve must lie.
If NULL_TAG, plane will be infered.
Else all the object in the constraints
array above will be projected on the plane.
complement
logical
False - Default arc will be created.
True - Complement of default arc will be created.
Used only in ARC.
closed
logical
False - Arc bounded by limits above will be created.
True - Full circle will be created.
Used only in ARC.
is_associative
logical
true if associative, false if not associative

------------

UF_CURVE - UF_CURVE_line_s
UF_CURVE_line_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_line_t
UF_CURVE_line_p_t
Data Members
start_point [ 3 ]
double
line start point
end_point [ 3 ]
double
line end point

------------

UF_CURVE - UF_CURVE_ocf_data_s
UF_CURVE_ocf_data_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_ocf_data_t
UF_CURVE_ocf_data_p_t
Overview
The main structure for the associated offset curve on face feature.
This structure holds an allocated array of UF_CURVE_ocf_string_data_t
structures that have the data assocated with a string, the number of offsets
desired and the offset distances.
This structure also holds a UF_CURVE_ocf_face_data_t pointer that has the
face collector identifier.
The offset method, trim method, span method and the cross boundary method
is also stored in this structure along with the distance, angular and string
tolerances.
This structure has to be allocated and filled with values during create
or has to be allocated and queried from an existing associated offset curves
in face feature, modified to set new offset distances/string/types and then
invoke edit to reflect the changes.
Data Members
string_data
UF_CURVE_ocf_string_data_p_t
An array of strings to
be offset and the
data associated with
them, as described in
above string data
structure
num_string_data
int
Size of the string
array
face_data
UF_CURVE_ocf_face_data_p_t
Face data
cross_boundary_mode
UF_CURVE_ocf_cross_boundaries_t
boundary mode
method
offset_method
UF_CURVE_ocf_method_t
offset type
method
trim_method
UF_CURVE_ocf_trim_method_t
Trimming options
for offset
span_method
UF_CURVE_ocf_span_method_t
spanning options
for offset
dist_tol
double
distance
tolerance
ang_tol
double
angular
tolerance
string_tol
double
string
tolerance

------------

UF_CURVE - UF_CURVE_ocf_face_data_s
UF_CURVE_ocf_face_data_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_ocf_face_data_t
UF_CURVE_ocf_face_data_p_t
Overview
Structure that holds identifier for a face collector.  The face collector
has all the faces that need to be input for an associated offset curve on
face feature.
Data Members
face_tag
tag_t
Holds the tag to a face collector that
has to be created for all faces on which
the strings have to be offset. All
types of face collectors can be created

------------

UF_CURVE - UF_CURVE_ocf_string_data_s
UF_CURVE_ocf_string_data_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_ocf_string_data_t
UF_CURVE_ocf_string_data_p_t
Overview
Structure that holds the string identifier for the string that has to be
offset in an associated offset curves on face feature.  The structure also
holds the offset direction on the string, the number of offsets desired
along with the offset distances for each offset desired.
Data Members
string_tag
tag_t
Tag of the string to
offset
offset_direction
int
Flag to indicate the
offset direction.
The direction can be
either 1 or -1
num_offsets
int
Number of offsets to
perform for the given
string
offset_distances
UF_CURVE_ocf_values_p_t
An array that holds
the offset values for
each of the offset
to perform for the
given string

------------

UF_CURVE - UF_CURVE_ocf_values_s
UF_CURVE_ocf_values_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_ocf_values_t
UF_CURVE_ocf_values_p_t
Overview
Structure that holds the offset value for a given string in an associated
offset curve in face feature.  The offset value is stored as a string.
Data Members
string [ MAX_FSPEC_BUFSIZE ]
char
A character string used to
hold an offset value in
form of a string (e.g "2.0")
to offset the string on the
input set of faces.

------------

UF_CURVE - UF_CURVE_offset_axial_data_s
UF_CURVE_offset_axial_data_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_offset_axial_data_t
UF_CURVE_offset_axial_data_p_t
Overview
The following structure holds data that is specific to the
UF_CURVE_OFFSET_3D_AXIAL type of offset curve.
Data Members
offset_value
char *
3d distance to offset input_curves string
axis_vector
tag_t
Smart vector defining the direction of offset

------------

UF_CURVE - UF_CURVE_offset_data_s
UF_CURVE_offset_data_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_offset_data_t
UF_CURVE_offset_data_p_t
Data Members
input_curves
UF_STRING_p_t
Pointer to curves list structure (AKA string_list)
Use UF_MODL_init_string_list and
UF_MODL_create_string_list to
create input strings. Use
UF_MODL_free_string_list to free
memory after the string is created.
Documentation for UF_STRING_p_t and UF_STRING_t can be found in the NX Open
Reference Manual under uf_modl -> Types ->
string_list.
approximation_tolerance
double
Step value which controls
the accuracy of the offset
curve
string_tolerance
double
Controls the distance
determining if two curves
are close enough to be
considered contiguous.
offset_type
UF_CURVE_offset_type_t
offset_def
UF_CURVE_offset_def_t

------------

UF_CURVE - UF_CURVE_offset_distance_data_s
UF_CURVE_offset_distance_data_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_offset_distance_data_t
UF_CURVE_offset_distance_data_p_t
Overview
The following structure holds data that is specific to the
UF_CURVE_OFFSET_DISTANCE_NO_TRIM,
UF_CURVE_OFFSET_DISTANCE_FILLET, and
UF_CURVE_OFFSET_DISTANCE_TANGENT types of offset curve.
Data Members
distance
char *
Distance to offset input_curves string
rough_type
int
1 for rough type, 0 otherwise
rough_type = 1 will produce a spline or
splines that approximate the offset curve(s).
The approximation may not be as accurate as
for the regular offset, but should be faster.

------------

UF_CURVE - UF_CURVE_offset_distance_tangent_data_s
UF_CURVE_offset_distance_tangent_data_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_offset_distance_tangent_data_t
UF_CURVE_offset_distance_tangent_data_p_t
Data Members
distance
char *
Distance to offset input_curves string
extension_factor
double
Controls the length of the offset
tangent extension lines. The amount
of extension at each end of an offset
curve depends upon the extension factor
used. The extension factor is a
multiple of the offset distance.
rough_type
int
1 for rough type, 0 otherwise
rough_type = 1 will produce a spline or
splines that approximate the offset curve(s).
The approximation may not be as accurate as
for the regular offset, but should be faster.

------------

UF_CURVE - UF_CURVE_offset_draft_data_s
UF_CURVE_offset_draft_data_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_offset_draft_data_t
UF_CURVE_offset_draft_data_p_t
Data Members
draft_height
char *
Distance between the plane of the input
curves (reference plane) to the plane of
the offset curves (offset plane)
draft_angle
char *
The angle from the offset vector to a line
perpendicular to the reference plane.
rough_type
int
1 for rough type, 0 otherwise
rough_type = 1 will produce a spline or
splines that approximate the offset curve(s).
The approximation may not be as accurate as
for the regular offset, but should be faster.

------------

UF_CURVE - UF_CURVE_offset_draft_tangent_data_s
UF_CURVE_offset_draft_tangent_data_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_offset_draft_tangent_data_t
UF_CURVE_offset_draft_tangent_data_p_t
Data Members
draft_height
char *
Distance between the plane of the input
curves (reference plane) to the plane of
the offset curves (offset plane)
draft_angle
char *
The angle from the offset vector to a line
perpendicular to the reference plane.
extension_factor
double
Controls the length of the offset
tangent extension lines. The amount
of extension at each end of an offset
curve depends upon the extension factor
used. The extension factor is a
multiple of the offset distance.
rough_type
int
1 for rough type, 0 otherwise
rough_type = 1 will produce a spline or
splines that approximate the offset curve(s).
The approximation may not be as accurate as
for the regular offset, but should be faster.

------------

UF_CURVE - UF_CURVE_proj1_s
UF_CURVE_proj1_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_proj1_t
UF_CURVE_proj1_p_t
Data Members
proj_data
UF_CURVE_proj_t
UF_CURVE_proj_s data
proj_vector
tag_t
Vector tag for types 3,4,6,
if proj_vector is not NULL_TAG,
proj_vec array will not be used
x_vector_tag
tag_t
X axis vector tag for type 6
if x_vector_tag is not NULL_TAG,
x_vector array will not be used
join_type
UF_CURVE_join_type_t
Join option for the projected curves
curve_fit_data
UF_CURVE_curve_fit_data
curve fit method, max degree & max segments

------------

UF_CURVE - UF_CURVE_proj_s
UF_CURVE_proj_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_proj_t
UF_CURVE_proj_p_t
Data Members
proj_type
int
Projection type:
1 - along face normals,
2 - towards point,
3 - along vector,
4 - at angle to vector
5 - toward a line
6 - equal arclength
proj_pnt
tag_t
Point eid for type 2 or 6,
Line or datum axis eid for
type 5
proj_vec [ 3 ]
double
Vector for types 3,4,6
x_vector [ 3 ]
double
X axis vector for type 6
multiplicity
int
Multiplicity for type 3
1 - Single direction
2 - Both directions
arcl_option
int
Equal Arclength option for type 6
0 - Both X and Y
1 - First X, Then Y
2 - First Y, Then X
3 - X Only
4 - Y Only
angle
double
Angle for type 4
ref_pnt [ 3 ]
double
Reference point for type 4

------------

UF_CURVE - UF_CURVE_pt_slope_crvatr_s
UF_CURVE_pt_slope_crvatr_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_pt_slope_crvatr_t
UF_CURVE_pt_slope_crvatr_p_t
Overview
Interactive NX creates degree three splines by assigning  auto
slopes at the start and end points, if you do not specify slopes yourself.
To replicate the creation of these interactive splines using
UF_CURVE_create_spline_thru_pts you need to specify AUTO slopes for the first
and last points and NONE for the rest.  The following notes apply to the fields
of this data structure:
1.  The explanation of four slope types specified in the above table is
as follows:
. UF_CURVE_SLOPE_NONE means that no slope is assigned
at an input point during the interpolation process. The slope at
the point is whatever the interpolator calculates when it solves
the system of equations to compute the spline.
. UF_CURVE_SLOPE_AUTO means that the slope is
internally calculated from the data points specified before the
interpolation is done. The system uses the data points and
slopes surrounding the current point to arrive at reasonable
values. These values are then used during the interpolation.
. UF_CURVE_SLOPE_VEC signifies that the slope is defined
by the user-specified defining slope vector, whose magnitude
and direction affect the shape of the curve.
. UF_CURVE_SLOPE_DIR is the same as the
UF_CURVE_SLOPE_VEC, except that only the direction of
the slope affects the shape of the curve.
2.  The explanation of three curvature types specified in the above
table is as follows:
. UF_CURVE_CRVATR_NONE means that no curvature is
assigned at an input point during the interpolation process.
The curvature at the point is whatever the interpolator
calculates when it solves the system of equations to compute
the spline.
. UF_CURVE_CRVATR_AUTO_DIR means that only the
magnitude of the curvature vector is used as the curvatures
magnitude. Its direction is internally determined by NX before
the interpolation is done. Notice that the corresponding slope
type must be UF_CURVE_SLOPE_AUTO at the point.
. UF_CURVE_CRVATR_VEC signifies that the curvature is
defined by the user-specified defining curvature vector, whose
magnitude and direction affect the shape of the curve.
3.  Curvature vector must be orthogonal to the slope vector.
4.  Curvature can be specified in the following two ways:
. When the slope type is UF_CURVE_SLOPE_VEC or
UF_CURVE_SLOPE_DIR, the curvature vector is used to
determine its direction and magnitude.
. When the slope type is UF_CURVE_SLOPE_AUTO, only the
magnitude of the curvature vector is used as the curvatures
magnitude. The direction of the curvature and slope are
determined internally by NX.
5.  Assigning slopes is not allowed on splines with degree less than 2.
6.  Assigning curvature is not allowed on splines with degree less
than 3.
Data Members
point [ 3 ]
double
3D coordinates of input ordered
points. For creating periodic curves,
you should not repeat the first point
as the last point
slope_type
int
type of control being defined:
UF_CURVE_SLOPE_NONE,
UF_CURVE_SLOPE_AUTO,
UF_CURVE_SLOPE_VEC,
UF_CURVE_SLOPE_DIR
(see Note 1)
slope [ 3 ]
double
3D vector defining the slope assigned
at this input point (see Note 1, 4, 5)
crvatr_type
int
type of control being defined
UF_CURVE_CRVATR_NONE,
UF_CURVE_CRVATR_AUTO_DIR,
UF_CURVE_CRVATR_VEC
(see Note 2)
crvatr [ 3 ]
double
3D vector defining the curvature assigned
at this input point (see Note 2, 3, 6)

------------

UF_CURVE - UF_CURVE_section_general_data_s
UF_CURVE_section_general_data_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_section_general_data_t
UF_CURVE_section_general_data_p_t
Data Members
objects
tag_t *
Array of objects to be sectioned
(Bodies, faces, planes, curves)
num_objects
int
Number of objects
associate
int
1 for associative curves,
0 for non_associative curves (a group
of curves is returned)
grouping
int
1 if the curves are to be grouped by plane,
0 otherwise
(ignored if associate is 1)
join_type
int
0 for no joining of the section curves,
1 if the curves are to be joined into
cubic polynomial spline curves,
2 if the curves are to be joined into
general spline curves,
3 if the curves are to be joined into
quintic polynomial spline curves
tolerance
double
tolerance (in part units) for the
section curves
curve_fit_data
UF_CURVE_curve_fit_data
<I> curve fit method, max degree & max segments

------------

UF_CURVE - UF_CURVE_section_parallel_data_s
UF_CURVE_section_parallel_data_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_section_parallel_data_t
UF_CURVE_section_parallel_data_p_t
Data Members
base_plane
tag_t
Base plane
step_distance
double
Step distance
start_distance
double
Start distance
end_distance
double
End distance

------------

UF_CURVE - UF_CURVE_section_perpcrv_data_s
UF_CURVE_section_perpcrv_data_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_section_perpcrv_data_t
UF_CURVE_section_perpcrv_data_p_t
Data Members
curve_eid
tag_t
Curve eid
direction
int
1 if percentages are from start to end
of the curve
-1 if opposite direction
space_meth
int
1 for equal parameter spacing,
2 for geometric progression spacing,
3 for chordal tolerance spacing,
4 for incremental arclength spacing
num_points
int
Number of points on the curve
start_pct
double
Start percentage on the curve
(see direction)
end_pct
double
End percentage on the curve
(see direction)
ratio
double
Ratio for geometric progression spacing
chord_tol
double
Tolerance for chordal toleraance spacing
increment
double
Increment for incremental arclength spacing

------------

UF_CURVE - UF_CURVE_section_planes_data_s
UF_CURVE_section_planes_data_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_section_planes_data_t
UF_CURVE_section_planes_data_p_t
Data Members
planes
tag_t *
Array of sectioning planes and datum planes
num_planes
int
Number of planes

------------

UF_CURVE - UF_CURVE_section_radial_data_s
UF_CURVE_section_radial_data_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_section_radial_data_t
UF_CURVE_section_radial_data_p_t
Data Members
base_axis
tag_t
Smart axis for base plane
base_point
tag_t
Smart point on base plane
step_angle
double
Step angle
start_angle
double
Start angle
end_angle
double
End angle

------------

UF_CURVE - UF_CURVE_spline_s
UF_CURVE_spline_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_spline_t
UF_CURVE_spline_p_t
Overview
Contains data defining a non-uniform rational b-spline (NURBS)
curve.  All data items are used in both input and output.
There are 4 values for each control point, or pole: wx (poles[i][0]), wy
(poles[i][1]), wz (poles[i][2]) and w (poles[i][3]) (0<= i < num_poles)
Note that the first 3 coordinates are weighted.
The number of knots num_knots and poles num_poles and the order order,
are related as follows: num_knots = num_poles+order.
The _param values specify how much of the spline is active, i.e.,
visible and used.  They cannot be outside the parameter range defined
by the knot vector.  The lowest allowed value is ps = knots[order-1],
where [i] denotes the C-language (zero-based) subscript.  The
largest is pe = knots[num_poles].
If is_rational is nonzero, the weights are not all equal to 1.0.  To
create a spline, this value is ignored and the rational status is
determined from the data.
For more information on the conditions spline data must meet, see
UF_CURVE_create_spline.
Data Members
num_poles
int
number of poles
order
int
order of the spline (degree +1)
is_rational
int
1 if it is a rational spline
knots
double *
pointer to the array of knots
poles) [ 4 ]
double (*
pointer to the array of poles
start_param
double
start parameter
end_param
double
end parameter

------------

UF_CURVE - UF_CURVE_state_s
UF_CURVE_state_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_state_t
UF_CURVE_state_p_t
UF_MODL_state_p_t
UF_MODL_state_t
Overview
Contains data indicating the situation found in a spline curve or
surface. The same structure is used to return states for fixing and smoothing
b-spline curves and surfaces.  The following states are returned for b-spline
curves, with the noted state value contents.
UF_CURVE_STATE_DEGENERACY - a degeneracy was detected in the spline or
bsurface flag&2 indicates U(0) or V(1) for a
bsurface.  flag&1 indicates if fixed (1 indicates
fixed). value is a point on or near the degeneracy
UF_CURVE_STATE_G1_DISCONTINUITY - the spline or bsurface is not G1 continuous
flag&2 indicates U(0) or V(1) for a bsurface
flag&1 indicates if smoothed to G1 (1 indicates
smoothed to G1) flag&4 indicates if smoothed to Cn
(1 indicates smoothed to Cn).  value[0] indicates the
knot value at the discontinuity
UF_CURVE_STATE_KNOT_NONC0 - the spline or bsurface is not C0 continuous, that
is, it has a gap. flag&2 indicates U(0) or V(1) for
a bsurface.  flag&1 indicates if fixed (1
indicates fixed; shape change incurred).  value[0]
indicates the knot value at the discontinuity.
UF_CURVE_STATE_KNOT_MULT - the spline or bsurface has an illegal knot
multiplicity but without a gap.  flag&2
indicates U(0) or V(1) for a bsurface.
flag&1 indicates if fixed (1 indicates fixed)
value[0] indicates the knot value in the illegal
multiplicity
UF_CURVE_STATE_KNOT_DECREASING - the spline or bsurface has a knot value that
is less than the value preceding it in
the knot vector.  flag&2 indicates U(0) or
V(1) for a bsurface.  flag&1 indicates if
fixed (1 indicates fixed).  value[0] indicates
the first knot value of the decreasing series
UF_CURVE_STATE_CLOSED - the spline or bsurface is closed but not Cn
flag&2 indicates U(0) or V(1) for a bsurface
UF_CURVE_STATE_PERIODIC - the spline or bsurface is closed and Cn at the
closure.  flag&2 indicates U(0) or V(1) for a
bsurface.
UF_CURVE_STATE_KNOT_TOOCLOSE - the spline or bsurface has a knot value that is
too close to the knot preceding it in the knot
vector.  flag&2 indicates U(0) or V(1) for a
bsurface.  flag&1 indicates if fixed (1
indicates fixed).  value[0] indicates the first
knot value that is too close to its preceding
knot
UF_CURVE_STATE_NOT_TRIMMED - the spline was not trimmed to the parameter values
given.  flag&2 indicates U(0) or V(1) for a
bsurface.
UF_CURVE_STATE_KNOTS_UNNORMALIZED - the splines or bsurfaces knots were
normalized to meet Open API requirements
flag&2 indicates U(0) or V(1) for a bsurface
value[0] contains the factor for converting
spline data parameters to values suitable
for using with the NX object. Let
td be a parameter value in the range defined
by the spline data.  Let t0 be the
corresponding parameter value to use when
evaluating the NX spline. Then
t0 = tdv0 + v1
Apply to both directions of a bsurface as
needed.
UF_CURVE_STATE_CLAMPED - the spline or bsurface end knots are of
multiplicity order. value[0] indicates the knot
value, value[1] contains the minimum distance change,
value[2] indicates the maximum angle change.
UF_CURVE_STATE_SMOOTHED_TO_CN - the spline or bsurface is not G1 continuous
and has been smoothed. For further definition
of the structure values see UF_CURVE_STATE_G1_DISCONTINUITY.
Data Members
state_code
int
Code giving the state found at the given place.
Depending on the code, the next two values will
contain different values.
flag
int
This is a bit field that stores information about
the given state code. The interpretation of these
bits depends on the state code, and is given in
the structure comments.
value [ 3 ]
double
This is an array that holds values that pertain to
the given state code. Each state code stores
different values in this array. See the comments
on the different states for how to interpret these
values.

------------

UF_CURVE - UF_CURVE_struct_s
UF_CURVE_struct_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_struct_t
UF_CURVE_struct_p_t
Data Members
crv_data
void *
A pointer to a void structure. This structure
should be appropriately typecast to get the
correct curve structure. The different curve
structures are:
POINT_DATA, LINE_DATA, ARC_DATA, CONIC_DATA
or BEZ_DATA
crv_type
int
Curve object type. Valid types are:
UF_point_type
UF_line_type
UF_circle_type
UF_conic_type
UF_spline_type
crv_t0
double
the start parameter of the curve
crv_tscale
double
Difference between the start and end
parameters of the curve for example:
tend = crv_t0 + crv_tscale
curve_periodic
int
Periodic flag for the curve
0 = nonperiodic
1 = periodic

------------

UF_CURVE - UF_CURVE_trim_bound_s
UF_CURVE_trim_bound_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_trim_bound_t
UF_CURVE_trim_bound_p_t
Overview
The following structure is used to define the bounding object.
Data Members
string
UF_STRING_t
The string to trim at. This can contain a
mixture of curves, edges, features, sketches,
and faces. If features are included then the
curves produced by that feature are input as
the string to trim or bounding string. If
sketches are included then the curves in the
sketch are input as the string to trim or the
bounding string. If faces are included the
edges of the faces are input as the string to
trim or the bounding string.
If trimming to an object, then the num field in
this structure should be set to 0. Note that
the field dir in the string structure indicates
which end of the bounding string should be
trimmed or extended.
object
tag_t
The object to trim at. This object
can be a face, point, datum plane,
or datum axis. If trimming to a
string then this should be set to
NULL_TAG.
use_suggested
logical
Indication if the following point
should be used to select between
multiple intersection points.
suggested_point [ 3 ]
double
The point that is used to select
one of multiple intersection
points. The intersection point
closest to this point will be used.

------------

UF_CURVE - UF_CURVE_trim_incr_length_s
UF_CURVE_trim_incr_length_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_trim_incr_length_t
Overview
use the following structure when
trim_type == UF_CURVE_TRIM_TO_INCR_LENGTH
Data Members
string_trim_extend_end
UF_CURVE_trim_opts_t
Indication of which end of
the string should be
trimmed or extended to the
bounding object, this
should be set to one of
the following values:
UF_CURVE_TRIM_EXTEND_START
UF_CURVE_TRIM_EXTEND_END
value [ MAX_LINE_BUFSIZE ]
char
A character string containing the value to
set the total length of the input string to.
The string can be a numeric value (e.g.,
"25"), a fully defined expression (e.g.,
"p5 = 25"), an existing expression name
(e.g., "p5"), or an expression string (e.g.,
"p5+p7"). If the fully defined expression
exists then an error is returned. If the
expression name does not exist an error is
returned. In all other cases an expression
is created. When this value is returned
from UF_CURVE_ask_trim, the character
string is a fully defined expression
(e.g., "p5=25").

------------

UF_CURVE - UF_CURVE_trim_mult_s
UF_CURVE_trim_mult_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_trim_mult_t
UF_CURVE_trim_mult_p_t
Overview
The following structure is returned from UF_CURVE_create_trim if multiple
intersection points were found between the bounding object and the string
being trimmed.
Data Members
num_bound1_pts
int
The number of points in
following array.
bound1_pts
double *
The intersection points of
boundary 1, or the single
boundary, and the string
being trimmed. The caller
must free this array. The
array is [num_bound1_pts 3]
long.
num_bound2_pts
int
The number of points in
following array.
bound2_pts
double *
The intersection points of
boundary 2 and the string
being trimmed. The caller
must free this array. The
array is [num_bound2_pts 3]
long.

------------

UF_CURVE - UF_CURVE_trim_one_bound_s
UF_CURVE_trim_one_bound_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_trim_one_bound_t
Overview
Structure to use to define the trim desired when the
trim_type == UF_CURVE_TRIM_TO_ONE_BOUND
Data Members
string_trim_extend_end
UF_CURVE_trim_opts_t
Indication of which end
of the string should be
trimmed or extended to the
bounding object, this
should be set to one of
the following values:
UF_CURVE_TRIM_EXTEND_START
UF_CURVE_TRIM_EXTEND_END
bound
UF_CURVE_trim_bound_t
The bounding definition.
trim_bound
logical
Indication of whether the
bounding string should be
trimmed or not.
view
UF_MODL_vector_p_t
Vector defining viewing
direction in which to
measure minimum distance.
If vector is defined with
a datum axis, the feature
will be associated to the
datum axis.
If vector is defined using
plane of curves option,
curves do not need to be
supplied in vector
structure, the bounding
object strings and string
being trimmed will
determine plane.
If (void )0 then minimum
distance will be measured
3 dimensionally.

------------

UF_CURVE - UF_CURVE_trim_s
UF_CURVE_trim_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_trim_t
UF_CURVE_trim_p_t
Overview
The following structure is the main structure used in the trim functions.
Data Members
string_to_trim
UF_STRING_t
The string to trim. This can be a
mixture of curves, edges, features, sketches,
and faces. If features are included then the
curves produced by that feature are input as
the string to trim or bounding string. If
sketches are included then the curves in the
sketch are input as the string to trim or the
bounding string. If faces are included the
edges of the faces are input as the string to
trim or the bounding string.
spline_extend_opt
UF_CURVE_trim_opts_t
The extension that will be
to splines in the string to
trim and the bounding string.
This should be set to one of
the following values:
UF_CURVE_EXTEND_NATURAL
UF_CURVE_EXTEND_LINEAR
UF_CURVE_EXTEND_CIRCULAR
UF_CURVE_EXTEND_NONE
trim_type
UF_CURVE_trim_opts_t
Indication of which structure
within the union is being
used to define how to trim
the input string, this should
be set to one of the
following values:
UF_CURVE_TRIM_TO_ONE_BOUND
UF_CURVE_TRIM_TO_TWO_BOUND
UF_CURVE_TRIM_TO_TOTAL_LENGTH
UF_CURVE_TRIM_TO_INCR_LENGTH
tolerances [ 2 ]
double
Tolerances used in string
processing.
[0] -> distance tolerance used
in determining
connected curves
[1] -> angle tolerance,
required but
not really utilized
trim_to
UF_CURVE_trim_to_t

------------

UF_CURVE - UF_CURVE_trim_total_length_s
UF_CURVE_trim_total_length_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_trim_total_length_t
Overview
use the following structure when
trim_type == UF_CURVE_TRIM_TO_TOTAL_LENGTH
Data Members
string_trim_extend_end
UF_CURVE_trim_opts_t
Indication of which end of
the string should be
trimmed or extended to the
bounding object, this
should be set to one of
the following values:
UF_CURVE_TRIM_EXTEND_START
UF_CURVE_TRIM_EXTEND_END
value [ MAX_LINE_BUFSIZE ]
char
A character string containing the value to
set the total length of the input string to.
The string can be a numeric value (e.g.,
"25"), a fully defined expression (e.g.,
"p5 = 25"), an existing expression name
(e.g., "p5"), or an expression string (e.g.,
"p5+p7"). If the fully defined expression
exists then an error is returned. If the
expression name does not exist an error is
returned. In all other cases an expression
is created. When this value is returned
from UF_CURVE_ask_trim, the character
string is a fully defined expression
(e.g., "p5=25").

------------

UF_CURVE - UF_CURVE_trim_two_bound_s
UF_CURVE_trim_two_bound_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_trim_two_bound_t
Overview
use the following structure when trim_type == UF_CURVE_TRIM_TO_TWO_BOUND
Data Members
string_extend_end
UF_CURVE_trim_opts_t
Indication of which end
of the string should be
extended to bounding
object 1. The other end
of the string will be
extended to bounding
object 2. This should be
set to one of the
following values:
UF_CURVE_TRIM_EXTEND_START
UF_CURVE_TRIM_EXTEND_END
string_trim_option
UF_CURVE_trim_opts_t
Indication of which portion
of the string should be
trimmed away, this should
be set to one of the
following values:
UF_CURVE_TRIM_OUTSIDE
UF_CURVE_TRIM_INSIDE
bound1
UF_CURVE_trim_bound_t
The bounding definition for
boundary 1.
bound2
UF_CURVE_trim_bound_t
The bounding definition for
boundary 2.
trim_bound
logical
Indication of whether the
bounding strings should be
trimmed or not.
view
UF_MODL_vector_p_t
Vector defining viewing
direction in which to
measure minimum distance.
If vector is defined with a
datum axis, the feature
will be associated to the
datum axis. If vector is
defined using plane of
curves option, curves do
not need to be supplied in
vector structure, the
bounding object strings and
string being trimmed will
determine plane. If
(void )0 then minimum
distance will be measured 3
dimensionally.

------------

UF_CURVE - UF_CURVE_wrap_data_s
UF_CURVE_wrap_data_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_CURVE_wrap_data_t
UF_CURVE_wrap_data_p_t
Data Members
wrap_unwrap_sw
UF_CURVE_wrap_type_t
Object type: UF_CURVE_WRAP
or UF_CURVE_UNWRAP
num_wrap_faces
int
Number of tags in the
wrap_faces array
wrap_faces
tag_t *
Conical or cylindrical faces to
wrap onto/unwrap from
(If multiple faces, they must
be on the same cone/cylinder.
wrap_plane
tag_t
Datum plane or face to wrap
from/ unwrap onto. Must be
tangent to the wrap_face.
num_input_curves
int
Number of tags in the
input_curves array.
input_curves
tag_t *
Object Identifiers of curves,
edges, faces (same as reference
to the edges of the face).
Curves to be wrapped/unwrapped.
cut_line_angle
char *
Expression specifying the cut
line angle, relative to the
tangent line, in degrees
0 - 360.
distance_tol
double
Distance tolerance to use in
calculations e.g. to decide
if an output curve should be
closed.
angle_tol
double
Angle tolerance to use in curve
fitting

------------

UF_CAM - UF_CUT_LEVEL_single_s
UF_CUT_LEVEL_single_s
(view source)
Defined in: uf_cut_levels.h
Also known as:
UF_CUT_LEVEL_single_t
Overview
Data structure for a single cut level.
Data Members
entity_tag
tag_t
Tag id of the face or point entity
used to define the current cut level.
This can be NULL if the level was
defined by an explicit z level.
z_level
double
The z distance of the cut level from the
origin along the normal of the cut levels.
local_cut_depth
double
The max depth per cut value to be
used for the range between this cut
level and the one above it.

------------

UF_CAM - UF_CUT_LEVELS_s
UF_CUT_LEVELS_s
(view source)
Defined in: uf_cut_levels.h
Also known as:
UF_CUT_LEVELS_t
Overview
Data structure for all cut levels.
Data Members
num_levels
int
The number of cut levels.
cut_levels
UF_CUT_LEVEL_single_t *
An array of the individual
cut levels.
num_top_off_levels
int
The number of top off levels.
top_off_levels
UF_CUT_LEVEL_single_t *
An array of the individual top
off levels.

------------

UF_CAM - UF_CUTTER_holder_section_s
UF_CUTTER_holder_section_s
(view source)
Defined in: uf_cutter.h
Also known as:
UF_CUTTER_holder_section_t
UF_CUTTER_holder_section_p_t
Overview
Data structure to hold parameters for a holder section
Data Members
diameter
double
diameter of the cylindrical section
length
double
height of the cylindrical section
taper
double
taper angle of the cylindrical section in radians
corner
double
corner radius at bottom of section

------------

UF_CAM - UF_CUTTER_tracking_point_data_s
UF_CUTTER_tracking_point_data_s
(view source)
Defined in: uf_cutter.h
Also known as:
UF_CUTTER_tracking_point_data_t
UF_CUTTER_tracking_point_data_p_t
Overview
tracking point data structure for a Milling Cutter tracking point
Data Members
diameter
double
The output diameter of the point
distance
double
The distance of the point along the tool axis
zoff
double
The postprocessor Z offset of the point
adjust
int
The adjust register to use with this point
cutcom
int
The cutcom register to use with this point
zoff_status
int
The active/inactive status of the Z offset
adjust_status
int
The active/inactive status of the adjust register
cutcom_status
int
The active/inactive status of the cutcom register
name [ UF_OBJ_NAME_BUFSIZE ]
char
The name of the tracking point

------------

UF_CAM - UF_CUTTER_turn_tracking_point_data_s
UF_CUTTER_turn_tracking_point_data_s
(view source)
Defined in: uf_cutter.h
Also known as:
UF_CUTTER_turn_tracking_point_data_t
UF_CUTTER_turn_tracking_point_data_p_t
Overview
tracking point data structure for a Turning Cutter tracking point
Data Members
tlangl
double
The tool angle of the point
radius
double
The radius value of the point
xoff
double
The postprocessor X offset of the point
yoff
double
The postprocessor Y offset of the point
adjust
int
The adjust register to use with this point
cutcom
int
The cutcom register to use with this point
radiusid
int
The radius id of this point
cluster
int
The P value of this point
name [ UF_OBJ_NAME_BUFSIZE ]
char
The name of the tracking point

------------

UF_DIEENG - UF_DIE_wrap_binder_defining_points_s
UF_DIE_wrap_binder_defining_points_s
(view source)
Defined in: uf_dieeng.h
Overview
use the following structure when input_type == UF_DIEENG_POINTS
Data Members
num_defining_points
int
Number of points included in points array.
a spline will be created through the points
to determine the binder outline.
defining_points
tag_p_t
Points used to create the binder outline.

------------

UF_DIEENG - UF_DIE_wrap_binder_defining_string_s
UF_DIE_wrap_binder_defining_string_s
(view source)
Defined in: uf_dieeng.h
Overview
use the following structure when input_type == UF_DIEENG_BOUNDARY
Data Members
defining_string
UF_STRING_t
A string of objects defining the binder
outline. This structure can contain a
combination of curves, edges, curve features,
a single face, and sketches. If features are
included then the curves produced by that
feature are input. If sketches are included
then the curves in the sketch are input. If a
single face is included then the edges of the
face are input.

------------

UF_DIEENG - UF_DIE_wrap_binder_s
UF_DIE_wrap_binder_s
(view source)
Defined in: uf_dieeng.h
Also known as:
UF_DIE_binder_wrap_t
UF_DIE_binder_wrap_p_t
Overview
The following structure is utilized in the functions:
UF_DIE_create_binder_wrap
UF_DIE_edit_binder_wrap
UF_DIE_ask_binder_wrap
UF_DIE_free_binder_wrap
NOTES:
The value character strings in the below structure can be a numeric value (e.g., "25"),
a fully defined expression (e.g., "p5  = 25"), an existing expression name (e.g., "p5"), or
an expression string (e.g., "p5+p7"). If the fully defined expression exists then an error
is returned. If the expression name does not exist an error is returned. In all other cases
an expression is created. When this value is returned from UF_CURVE_ask_trim, the character
string is a fully defined expression (e.g., "p5=25").
Environment
Internal  and  External
See Also
Refer to
example
History
Originally released in V16.0
Data Members
input_type
UF_DIEENG_opts_t
Type of data input to the function.
Can be either UF_DIEENG_POINTS,
UF_DIEENG_BOUNDARY, or UF_DIEENG_SHEET.
defined_by
union UF_DIE_wrap_binder_union
material_thickness
char*
Material thickness value as an expression.
(See "Notes" below.)
distance_tol
double
Modeling distance tolerance.
angle_tol
double
Modeling angle tolerance.
output_sw
UF_DIEENG_opts_t
Switch to indicate what type of feature
to output.
UF_DIEENG_BINDER_WRAP_FEATURE - output the
smooth binder wrap feature.
UF_DIEENG_ANALYSIS_GEOMETRY - output the
sheet body containing the triangularization
of the binder wrap.

------------

UF_DIEENG - UF_DIE_wrap_binder_sheet_body_s
UF_DIE_wrap_binder_sheet_body_s
(view source)
Defined in: uf_dieeng.h
Overview
use the following structure when input_type == UF_DIEENG_SHEET
Data Members
sheet_body
tag_t
Tag to a sheet body which will be approximated to
create the DIE_BINDER_WRAP feature.

------------

UF_DISP - UF_DISP_conehead_attrb_s_tag
UF_DISP_conehead_attrb_s_tag
(view source)
Defined in: uf_disp_types.h
Also known as:
UF_DISP_conehead_attrb_s
Overview
Structure definition for conehead attribute settings
Data Members
staff_length
double
Length of conehead staff. Default is 0.6
total_length
double
Length of overall conehead = arrowhead+staff
Default is 1.0
cone_radius
double
The radius of the arrowhead's base. The
default is .075
color
int
The color to draw the vector in, or
-1 = Use background Color
0 = Use System Color
font
int
The display font setting:
1 = Solid
2 = Dashed
3 = Phantom
4 = Centerline
5-7 = User Defined
density
int
The density settings
0 = Normal
1 = Heavy
2 = Thin

------------

UF_DISP - UF_DISP_drawing_display_data_s
UF_DISP_drawing_display_data_s
(view source)
Defined in: uf_disp_types.h
Also known as:
UF_DISP_drawing_display_data_t
UF_DISP_drawing_display_data_p_t
Overview
Parameters that control the monochrome display of drawings.
The color settings are in effect only when monochrome display is TRUE.
Data Members
monochrome_display
logical
monochrome or full color display of drawings
system_color
int
system color for monochrome display of drawings
preselection_color
int
preselection color for monochrome display of drawings
foreground_color
int
foreground color for monochrome display of drawings
background_color
int
background color for monochrome display of drawings
show_widths
logical
line width display for monochrome display of drawings

------------

UF_DISP - UF_DISP_facet_s
UF_DISP_facet_s
(view source)
Defined in: uf_disp_types.h
Also known as:
UF_DISP_facet_t
UF_DISP_facet_p_t
Overview
STRUCTURE:  UF_DISP_facet_t
DESCRIPTION: This structure contains the vertices and normals
for ONE facet.  The structure may be put into an
array so that many facets may be displayed at one time.
Data Members
vertices
double *
The vertices are of the form
(X, Y, Z )
((vertices[1], vertices[2], vertices[3]),
(vertices[4], vertices[5], vertices[6])
...
in which each vertex point is represented by an
(x,y,z) coordinate
normals
double *
The normals are of the same form as the vertices
above. The number of normals must equal the
number of vertices

------------

UF_DISP - UF_DISP_grid_s
UF_DISP_grid_s
(view source)
Defined in: uf_disp_types.h
Also known as:
UF_DISP_grid_t
UF_DISP_grid_p_t
Overview
STRUCTURE:  UF_DISP_grid_s
DESCRIPTION: This is the definition of a grid structure. It is used to
specifies the parameters to apply when a grid is used.
There are 3 grid application contexts & 2 grid types. The
grid behaviors and appearances are different among them.
Grid "emphasis" lines and circles are drawn as solid lines,
while other grid line and circles are drawn as a series of
dots.
show_grid        - TRUE to make the grid visible, FALSE otherwise.
snap_to_grid     - TRUE to enable snapping, FALSE otherwise.
grid_color       - 1 to 216
grid_type        - Either rectangular (default) or polar
grid_non_uniform - TRUE allows X & Y units to be different,
FALSE (default) is otherwise.
grid_on_top - TRUE to show grid on top of all displayed graphics
rectangular_grid_emphasis - TRUE (default) to draw the emphasis lines,
FALSE otherwise.
grid_unit_x       - Distance between dots along X in inches/mm.
grid_unit_y       - Distance between dots along Y. If 'grid_non_uniform' is
FALSE, this field is ignored.
grid_line_every_x - No. of dots between each grid line along X.
grid_line_every_y - No. of dots between each grid line along Y. If
'grid_non_uniform' is FALSE, this field is ignored.
grid_emphasis_every_x - This value must be a multiple of
'grid_line_every_x'.
grid_emphasis_every_y - Like 'grid_emphasis_every_x' except it is ignored
when 'grid_non_uniform' is FALSE.
polar_grid_emphasis - TRUE (default) to draw the emphasis lines,
FALSE otherwise.
grid_angular_unit   - Angular distance between dots in degrees (at the
first ring when all dots are visible).
grid_angular_line_every - No. of fully visible dots between each grid line.
grid_angular_emphasis_every - This value must be a multiple of
'grid_angular_line_every'.
grid_radial_unit - Distance between dots along angular lines in inche/mm.
grid_radial_circle_every   - No. of dots between each concentric circles.
grid_radial_emphasis_every - this value must be a multiple of
'grid_radial_circle_every'.
Data Members
show_grid
logical
FALSE
show_labels
logical
snap_to_grid
logical
FALSE
grid_color
int
grid_type
UF_DISP_grid_type_t
UF_DISP_RECTANGULAR_GRID
grid_non_uniform
logical
FALSE
grid_on_top
logical
rectangular_grid_emphasis
logical
TRUE
grid_unit_x
double
0.125 in or 1 mm
grid_unit_y
double
" " " " "
grid_line_every_x
int
4 (0.5 in) or 5 (5 mm)
grid_line_every_y
int
" " " " "
grid_emphasis_every_x
int
2 (1 in) or 10 (10 mm)
grid_emphasis_every_y
int
" " " " "
polar_grid_emphasis
logical
TRUE
grid_angular_unit
double
15 Deg.
grid_angular_line_every
int
3 (45 Deg)
grid_angular_emphasis_every
int
2 (90 Deg)
grid_radial_unit
double
0.125 in or 1 mm
grid_radial_circle_every
int
4 (0.5 in) or 5 (5 mm)
grid_radial_emphasis_every
int
2 (1 in) or 10 (10 mm)

------------

UF_DISP - UF_DISP_inquire_s
UF_DISP_inquire_s
(view source)
Defined in: uf_disp_types.h
Also known as:
UF_DISP_inquire_t
UF_DISP_inquire_p_t
Overview
STRUCTURE:  UF_DISP_inquire_t
DESCRIPTION:  This structure contains information about the context
in which the geometry is displayed.  The user must
check to make sure that the information is available
before using the contents.  There are logicals in this
structure to check to see if information has been returned.
Data Members
context_running
UF_DISP_context_t
Describes the context which is being
executed when the inquire is performed.
The context may be display, selection,
fit, or attention point.
is_view_mode_valid
logical
True if the view mode was returned and
False if no information was available
view_mode
int
View mode describes the views shading
and face analysis mode valid values
are
UF_VIEW_NOT_SHADED
UF_VIEW_PARTIALLY_SHADED
UF_VIEW_FULLY_SHADED
UF_VIEW_ANALYSIS_SHADED
See uf_view.h for definitions
is_atten_pt_valid
logical
True if the atten point was returned and
False if no information was available
atten_pt [ 3 ]
double
The attention point of the geometry
just displayed
is_draw_open_disp
logical
Is the drawing view open for display?
If true then geometry may be added to
the drawing. If false another view
which is not the drawing is open
view_tag
tag_t
View tag of the view being displayed

------------

UF_DISP - UF_DISP_j3d_entity_s
UF_DISP_j3d_entity_s
(view source)
Defined in: uf_disp_types.h
Also known as:
UF_DISP_j3d_entity_t
UF_DISP_j3d_entity_p_t
Data Members
eid
tag_t
NX identifier for this shape
vectors
int
flag for vector data - if true then vectors else triangles
has_transform
int
true if an assembly transform is used
transform [ 4 ]  [ 4 ]
double
assembly transform
point_list
double *
list of points in groups of 3 for x,y,z
normal_list
double *
list of normals in groups of 3 for each point ( triangles
only )
points_per_strip
int *
number of points in each tri strip
num_strips
int
number of triangle strips
total_points
int
total number of points in the point_list
sheet
int
true if this is a sheet body ( need bi-directional normals )
color [ 3 ]
double
RGB color from 0.0 to 1.0 for red, green, blue
name
char *
entity name (if one is found)

------------

UF_DISP - UF_DISP_shade_options_s
UF_DISP_shade_options_s
(view source)
Defined in: uf_disp_types.h
Also known as:
UF_DISP_shade_options_t
UF_DISP_shade_options_p_t
Overview
Structure definition for shading processing options for batch shading.
Data Members
format
UF_DISP_shade_format_t
Format
display
UF_DISP_shade_display_t
Display option
resolution
int
Dots per inch of image,
Draft -> 75
Low -> 180
Medium -> 300
High -> 400
plot_quality
UF_DISP_shade_plot_t
Plot quality
generate_shadows
logical
Generate shadows or not?
facet_quality
double
Quality of facets
0.01 -> 2.0
transparent_shadows
logical
Allow transparent shadows or not?
disable_raytracing
logical
Disable ray tracing or not?
fixed_camera_viewing
logical
Fixed camera viewing or not?
super_sample
int
Super sample
1 -> 5
subdivision_depth
int
Subdivision depth
0 -> 6
raytrace_memory
int
Memory in Mb for ray tracing,
4, 8, 16, 32, 64, 128
radiosity_quality
int
Radiosity quality
0 -> 15
distribute_excess_light
logical
Distribute excess light or not?
use_midpoint_sampling
logical
Use midpoint sampling or not?

------------

UF_DISP - UF_DISP_srfanl_data_s
UF_DISP_srfanl_data_s
(view source)
Defined in: uf_disp_types.h
Also known as:
UF_DISP_srfanl_data_t
Overview
Structure definition for face analysis display parameters. These
parameters affect the display of all faces whose "face analysis"
attribute is TRUE, in all "face analysis" views. Each of
these parameters, is settable by the NX user using the
"face analysis" dialog. The data_range for different analysis type
is automatically calculated.
Data Members
spike_length
double
spike length for a hedgehog display
ref_plane [ 6 ]
double
reference plane, point on a plane & normal. Used
for 'sectional radius' and 'distance' display.
ref_vector [ 3 ]
double
reference vector, used for 'normal radius' and 'slope' display
mid_value
double
mid value of the scalar function data range for GAUSSIAN type
scale_factor
double
scale factor applied to the data range
The range of the scalar function in all
'face analysis' faces in the NX part is called
the 'data-range'. Some portion of this range
is mapped to displayed colors (from red through
green to blue). This mapped range is centered
at 'mid_value' and has size equal to the size of
the data_range times the 'scale_factor'. The
'mid_value' and 'scale_factor' are directly
controllable by the NX user, using sliders on
the 'face analysis' dialog.
This is only for GAUSSIAN type
anal_facet_edge_tol
double
This is the facet edge tolerance for
shaded display. This value is ignored
unless the surf_anal_fineness member
is set to UF_DISP_SHADED_CUSTOMIZE_TOL.
This is an upper
bound on the distance from each
chord to the curve it is approximating
The recommend value is .005 inch.Smaller
values result in finer display but
causes degraded performance. A
value of .01 would give a coarse
display, .0005 would give an extra
fine display but also causes slower
performance.
Refer to the
tolerance mapping table
anal_facet_chord_tol
double
This is the facet chord distance
for shaded display. This value is ignored
unless the surf_anal_fineness member
is set to UF_DISP_SHADED_CUSTOMIZE_TOL.
This is an upper
bound on the distance from a
positions on a facet to the surface.
The recommended value is .005 inch. A
smaller value results in a finer
display but causes degraded
performance. A value of .01 would
give a coarse display, .0025 would
give a fine display, .001 an extra
fine display and .0005 an ultra
fine display.
Refer to the
tolerance mapping table
anal_facet_angle_tol
double
This is the facet angle tolerance
for shaded display. This value is ignored
unless the surf_anal_fineness member
is set to UF_DISP_SHADED_CUSTOMIZE_TOL.
This is an upper bound on the angular
deviation between the surface normals
at any two positions under the facet.
The recommended value is 15 degrees.
A smaller value results in a finer
display, but causes slower
performance. A coarse display would
use a tolerance of 0.0, 15.0 gives
the standard angle, a value of 6.0
would give an extra fine display,
and a value of 3.0 an ultra fine
display.
Refer to the
tolerance mapping table
anal_facet_width_tol
double
Facet width tolerance for analysis
display. This value is ignored
unless the surf_anal_fineness member
is set to UF_DISP_SHADED_CUSTOMIZE_TOL.
This value specifies the
maximum width of a facet. The
recommended value is .3. A smaller
tolerance value causes a finer display
but also causes slower performance. A
value of .075 would give a fine display,
.02 an extra fine display, and .005
an ultra fine display.
Refer to the
tolerance mapping table
surf_anal_data
int
one of the 11 scalar functions to display
UF_DISP_GAUSSIAN_CURVATURE
UF_DISP_MEAN_CURVATURE
UF_DISP_MINIMUM_CURVATURE
UF_DISP_MAXIMUM_CURVATURE
UF_DISP_NORMAL_CURVATURE
UF_DISP_SECTIONAL_CURVATURE
UF_DISP_SLOPE
UF_DISP_DISTANCE
UF_DISP_U_CURVATURE
UF_DISP_V_CURVATURE
UF_DISP_REFLECTION
surf_anal_fineness
int
one of the 6 values of 'fineness'
UF_DISP_SHADED_COARSE
UF_DISP_SHADED_STANDARD
UF_DISP_SHADED_FINE
UF_DISP_SHADED_EXTRA_FINE
UF_DISP_SHADED_ULTRA_FINE
UF_DISP_SHADED_CUSTOMIZE_TOL
Refer to
fineness/shaded tolerance mapping table
refl_type
int
reflection type values are:
UF_DISP_REFL_TYPE_BLACKLINES
UF_DISP_REFL_TYPE_BLKWHTLINES
UF_DISP_REFL_TYPE_COLOREDLINES
UF_DISP_REFL_TYPE_SIMHORIZON
UF_DISP_REFL_TYPE_PHOTOHORIZON
UF_DISP_REFL_TYPE_USERIMAGE
num_refl_lines
int
The number of reflection lines. Must be a
power of 2 between 2 and
UF_DISP_MAX_REFLECTION_LINES
refl_horiz_vert
int
Determines whether to display horizontal,
vertical, or all reflection lines values are:
UF_DISP_REFL_HORIZ
UF_DISP_REFL_VERT
UF_DISP_REFL_HORIZ_AND_VERT
thick_refl_lines
int
One of 3 thicknesses of reflection lines
UF_DISP_REFL_THIN
UF_DISP_REFL_MEDIUM
UF_DISP_REFL_THICK
reflectivity
int
surface reflectivity (blending) factor.
Must be a value between
UF_DISP_REFL_REFLECTIVITY_MIN which results
in no reflection and
UF_DISP_REFL_REFLECTIVITY_MAX, which is the
default, where the surface is absolutely
reflective.
refl_move_type
int
reflection movement type. To use, set it to
one of the following types:
UF_DISP_REFL_TRANSLATE_HORIZ
UF_DISP_REFL_TRANSLATE_VERT
UF_DISP_REFL_ROTATE
refl_move_position
int
reflection translation or rotation factor.
This is used when the reflection movement
type has been set. Must be a value between
UF_DISP_REFL_TRANSLATE_MIN and
UF_DISP_REFL_TRANSLATE_MAX when refl_move_type
is set to translate or between
UF_DISP_REFL_ROTATE_ANGLE_MIN and
UF_DISP_REFL_ROTATE_ANGLE_MAX when refl_move_type
is set to rotate.
refl_smooth_lines
int
Determines whether reflection lines should be
anti-aliased. Must be set to TRUE, the
default or FALSE. Effects both
UF_DISP_REFL_TYPE_BLACKLINES,
UF_DISP_REFL_TYPE_BLKWHTLINES and
UF_DISP_REFL_TYPE_COLOREDLINES
refl_user_image_filename [ MAX_FSPEC_BUFSIZE ]
char
Stores user specified reflection image file name.
Effects UF_DISP_REFL_TYPE_USERIMAGE
num_contours
int
Determines the number of displayed contour
lines, between 2 and UF_DISP_MAX_CONTOUR_LINES
surf_anal_display
int
The type of face analysis display for GAUSSIAN:
UF_DISP_FRINGE
UF_DISP_HEDGEHOG
UF_DISP_CONTOUR_LINES
legend_color_type_gaussian
int
This is blend/sharp type for GAUSSIAN type
legend_color_num_gaussian
int
This is number of color option for GAUSSIAN type
surf_anal_display_mean
int
The type of face analysis display for MEAN:
UF_DISP_FRINGE
UF_DISP_HEDGEHOG
UF_DISP_CONTOUR_LINES
mid_value_mean
double
mid value of the scalar function data range for MEAN type
scale_factor_mean
double
scale factor applied to the data range for MEAN
legend_color_type_mean
int
This is blend/sharp type for MEAN type
legend_color_num_mean
int
This is number of color option for MEAN type
surf_anal_display_max
int
The type of face analysis display for MAX:
UF_DISP_FRINGE
UF_DISP_HEDGEHOG
UF_DISP_CONTOUR_LINES
mid_value_max
double
mid value of the scalar function data range for MAX type
scale_factor_max
double
scale factor applied to the data range for MAX type
legend_color_type_max
int
This is blend/sharp type for MAX type
legend_color_num_max
int
This is number of color option for MAX type
surf_anal_display_min
int
The type of face analysis display for MIN:
UF_DISP_FRINGE
UF_DISP_HEDGEHOG
UF_DISP_CONTOUR_LINES
mid_value_min
double
mid value of the scalar function data range for MIN type
scale_factor_min
double
scale factor applied to the data range for MIN type
legend_color_type_min
int
This is blend/sharp type for MIN type
legend_color_num_min
int
This is number of color option for MIN type
surf_anal_display_normal
int
The type of face analysis display for NORMAL:
UF_DISP_FRINGE
UF_DISP_HEDGEHOG
UF_DISP_CONTOUR_LINES
mid_value_normal
double
mid value of the scalar function data range for NORMAL type
scale_factor_normal
double
scale factor applied to the data range for NORMAL type
legend_color_type_normal
int
This is blend/sharp type for NORMAL type
legend_color_num_normal
int
This is number of color option for NORMAL type
surf_anal_display_sec
int
The type of face analysis display for SECTIONAL:
UF_DISP_FRINGE
UF_DISP_HEDGEHOG
UF_DISP_CONTOUR_LINES
mid_value_sec
double
mid value of the scalar function data range for SECTIONAL type
scale_factor_sec
double
scale factor applied to the data range for SECTIONAL type
legend_color_type_sec
int
This is blend/sharp type for SECTIONAL type
legend_color_num_sec
int
This is number of color option for SECTIONAL type
surf_anal_display_u
int
The type of face analysis display for U:
UF_DISP_FRINGE
UF_DISP_HEDGEHOG
UF_DISP_CONTOUR_LINES
mid_value_u
double
mid value of the scalar function data range for U type
scale_factor_u
double
scale factor applied to the data range for U
legend_color_type_u
int
This is blend/sharp type for U type
legend_color_num_u
int
This is number of color option for U type
surf_anal_display_v
int
The type of face analysis display for V:
UF_DISP_FRINGE
UF_DISP_HEDGEHOG
UF_DISP_CONTOUR_LINES
mid_value_v
double
mid value of the scalar function data range for V type
scale_factor_v
double
scale factor applied to the data range for V type
legend_color_type_v
int
This is blend/sharp type for V type
legend_color_num_v
int
This is number of color option for V type
surf_anal_display_slope
int
The type of face analysis display for SLOPE:
UF_DISP_FRINGE
UF_DISP_HEDGEHOG
UF_DISP_CONTOUR_LINES
mid_value_slope
double
mid value of the scalar function data range for SLOPE type
scale_factor_slope
double
scale factor applied to the data range for SLOPE
legend_color_type_slope
int
This is blend/sharp type for SLOPE type
legend_color_num_slope
int
This is number of color option for SLOPE type
surf_anal_display_distance
int
The type of face analysis display for DISTANCE:
UF_DISP_FRINGE
UF_DISP_HEDGEHOG
UF_DISP_CONTOUR_LINES
mid_value_distance
double
mid value of the scalar function data range for DISTANCE type
scale_factor_distance
double
scale factor applied to the data range for DISTANCE
legend_color_type_distance
int
This is blend/sharp type for DISTANCE type
legend_color_num_distance
int
This is number of color option for DISTANCE type
surf_anal_display_refl
int
This is the reflection display UF_DISP_REFL_LINES

------------

UF_DISP - UF_DISP_system_params_s
UF_DISP_system_params_s
(view source)
Defined in: uf_disp_types.h
Also known as:
UF_DISP_system_params_t
UF_DISP_system_params_p_t
UF_DISP_system_params_c_t
Overview
System display parameters.
Structure fields show_shaded_face_edges, use_face_edges_color,
face_edges_color, and hidden_shaded_face_edges are now represented
by view options. See
UF_VIEW_ask_shaded_edge_options
and
UF_VIEW_set_shaded_edge_options
.
Data Members
tolerance
double
Curve and surface tolerance
dash_size
double
Dash size if font = 1
space_size
double
Space size if font = 1
symbol_size
double
symbol size in line font
facet_edge_tol
double
This is the facet edge tolerance for
shaded display. This is an upper
bound on the distance from each
chord to the curve it is approximating
The recommend value is .005. Smaller
values result in finer display but
causes degraded performance. A
value of .01 would give a coarse
display, .0005 would give an extra
fine display.
Refer to the
tolerance mapping table
facet_chord_tol
double
This is the facet chord distance
for shaded display. This is an upper
bound on the distance from a
positions on a facet to the surface.
The recommended value is .005. A
smaller value results in a finer
display but causes degraded
performance. A value of .01 would
give a coarse display, .0025 would
give a fine display, .001 an extra
fine display and .0005 an ultra
fine display.
Refer to the
tolerance mapping table
facet_angle_tol
double
This is the facet angle tolerance
for shaded display. This is an
upper bound on the angular
deviation between the surface normals
at any two positions under the facet.
The recommended value is 15 degrees.
A smaller value results in a finer
display, but causes slower
performance. A coarse display would
use a tolerance of 0.0, 15.0 gives
the standard angle, a value of 6.0
would give an extra fine display,
and a value of 3.0 an ultra fine
display.
Refer to the
tolerance mapping table
color
int
system display color
preselection_color
int
Preselection color. Note that this is the general
preselection color, and should not be confused with
the one use for monochrome drawings (see
UF_DISP_ask_drawing_display().
handle_color
int
Handle color
font
int
system font mode
1 = software line fonts
2 = hardware line fonts
view_display
int
view names and borders display
1 = ON, 2 = OFF
line_width_display
int
line width display mode
1 = yes, 2 = no
show_shaded_face_edges
logical
Specifies whether or not edges are
displayed for shaded and analysis
faces of solid and sheet bodies. If
TRUE, shaded face edges are displayed
as specified by the use_face_edges_-
color field and the face_edges_color
field. If FALSE, shaded face edges
are not displayed.
use_face_edges_color
logical
Significant only if the show_shaded_-
face_edges field is TRUE. If TRUE,
shaded face edges are displayed in
the color specified by the face_-
edges_color field. If FALSE, face
edges are displayed in the body
color.
face_edges_color
int
Significant only if both the show_-
shaded_face_edges field and the
use_face_edges_color field are TRUE.
Specifies the non-negative index of
the color used to display shaded
face edges.
hidden_shaded_face_edges
int
Controls the appearance of hidden
edges for shaded and analysis faces
of solid and sheet bodies. If set to
UF_DISP_INVISIBLE_HIDDEN_FACE_EDGES,
hidden shaded face edges are not
displayed. If set to UF_DISP_DASHED_-
HIDDEN_FACE_EDGES, hidden shaded face
edges are displayed like visible
shaded face edges but with dashed
line font. If set to a non-negative
color index, hidden shaded face edges
are displayed in this color, and the
color is also used to display other
hidden geometry where the geometry
shows through shaded or analysis
geometry.
hidden_geometry_color
int
Significant only if the hidden_-
shaded_face_edges field is not set
to a color index. Specifies the non-
negative index of the color used to
display hidden geometry where the
geometry shows through shaded or
analysis geometry.
random_color_displayed
logical
Are random colors displayed for the
part? If TRUE, random colors are
displayed on the random color object
type in the displayed part. If
FALSE, normal object colors are used.
random_color_object_type
int
Set to the type of objects on which
random colors will be displayed.
Valid values are found in
UF_DISP_random_color_object_e

------------

UF_DISP - UF_DISP_texture_space_info_s
UF_DISP_texture_space_info_s
(view source)
Defined in: uf_disp_types.h
Also known as:
UF_DISP_texture_space_info_t
UF_DISP_texture_space_info_p_t
Data Members
type
UF_DISP_texture_space_type_t
ts_scale
double
ts_scale1
double
aspect_ratio
double
origin [ 3 ]
double
normal_vector [ 3 ]
double
up_vector [ 3 ]
double
center_point [ 3 ]
double
camera_direction_plane_option
int

------------

UF_DRAW - UF_DRAW_arrow_parms_s
UF_DRAW_arrow_parms_s
(view source)
Defined in: uf_draw_types.h
Also known as:
UF_DRAW_arrow_parms_p_t
UF_DRAW_arrow_parms_t
Data Members
size
double
Arrow size must be greater than 0.
Figure Arrow Display Sizes (A in the figure)
total_length
double
Arrow total length (must be
greater than 0)
incl_angle
double
Arrow included angle
(must be greater than 0)
past_part_dist
double
Arrow past part
(must be greater than 0)
Figure Arrow Past Part Distance
stub_len
double
Arrow stub length
(must be greater than 0)
Figure Stub Length
head_type
UF_DRAW_arw_head_type_t
Arrow head type
UF_DRAW_ansi_arrow = ansi arrow
UF_DRAW_iso_arrow = iso arrow
Figure Ansi vs. ISO arrow head types
head_control
UF_DRAW_arw_head_cntl_t
Arrow head control (style)
(must be greater than 0)
UF_DRAW_open_arrowhead
UF_DRAW_closed_arrowhead
UF_DRAW_filled_arrowhead
Figure Arrowhead Style

------------

UF_DRAW - UF_DRAW_break_region_boundary_s
UF_DRAW_break_region_boundary_s
(view source)
Defined in: uf_draw_types.h
Also known as:
UF_DRAW_break_region_boundary_t
UF_DRAW_break_region_boundary_p_t
Overview
Break Region boundary structure
Data Members
curve_tag
tag_t
Tag of curve defining the break region
boundary
construction_curve
logical
TRUE if hidden; FALSE if visible
hatch_curve
logical
TRUE if curve is to be hatched; FALSE
if not

------------

UF_DRAW - UF_DRAW_break_region_data_s
UF_DRAW_break_region_data_s
(view source)
Defined in: uf_draw_types.h
Also known as:
UF_DRAW_break_region_data_t
UF_DRAW_break_region_data_p_t
Overview
Breakout section data structure.
Data Members
view_tag
tag_t
Tag of broken view
position_type
UF_DRAW_break_position_type_t
Positioning method
distance
double
Distance (gap) between aligned XY boxes
of break region and reference region in
drawing units; for inferred and
distance position types only
reference_regions [ 2 ]
tag_t
Break region(s) to be used as reference
for alignment
alignment_vectors [ 2 ]
tag_t
Direction(s) of alignment in drawing
coordinates

------------

UF_DRAW - UF_DRAW_breakout_data_s
UF_DRAW_breakout_data_s
(view source)
Defined in: uf_draw_types.h
Also known as:
UF_DRAW_breakout_data_t
UF_DRAW_breakout_data_p_t
Overview
Breakout section data structure.
Data Members
base_point
tag_t
Base point on the floor of breakout
extrusion_vector
tag_t
If NULL_TAG, the extrusion vector is
perpendicular to the xy plane of the
view and points toward the viewer.
Otherwise, the vector is perpendicular
to the floor of the breakout section
and points toward the side of the floor
on which the material of the part is
removed.
num_curves
int
Number of breakout curves
curves
tag_p_t
Breakout curves
const_status
logical *
Construction status of each
breakout curve
cut_thru_model
logical
Cut through the model
hidden_line_hatching
logical
Hidden line hatching

------------

UF_DRAW - UF_DRAW_define_boundary_s
UF_DRAW_define_boundary_s
(view source)
Defined in: uf_draw_types.h
Also known as:
UF_DRAW_define_boundary_t
UF_DRAW_define_boundary_p_t
Overview
Define View Boundary structure - setting a break line detail type
view boundary.
Data Members
curve_tag
tag_t
Tag of curve defining the
view boundary.

------------

UF_DRAW - UF_DRAW_half_sxsegs_s
UF_DRAW_half_sxsegs_s
(view source)
Defined in: uf_draw_types.h
Also known as:
UF_DRAW_half_sxsegs_p_t
UF_DRAW_half_sxsegs_t
Data Members
bend_object
UF_DRF_object_p_t
Object associated to bend segment
cut_object
UF_DRF_object_p_t
Object associated to cut segment
arrow_object
UF_DRF_object_p_t
Object associated to arrow
segment

------------

UF_DRAW - UF_DRAW_info_s
UF_DRAW_info_s
(view source)
Defined in: uf_draw_types.h
Also known as:
UF_DRAW_info_p_t
UF_DRAW_info_t
Data Members
size_state
UF_DRAW_size_state_t
Flag specifying the type used in
size, UF_DRAW_METRIC_SIZE,
UF_DRAW_ENGLISH_SIZE or
UF_DRAW_CUSTOM_SIZE.
size
UF_DRAW_size_union_t
The drawing size, as specified in
size_state. If using metric,
then use a UF_DRAW_metric_size_t
variable. If using english, use
a UF_DRAW_english_size_t
variable. If using a custom size,
specify the size in a double array
where size[0] is the height and
size[1] is the length.
drawing_scale
double
The drawing scale.
units
int
The drawing units, either
UF_PART_METRIC or UF_PART_ENGLISH.
projection_angle
UF_DRAW_projection_angle_t
The projection angle, either
UF_DRAW_THIRD_ANGLE_PROJECTION or
UF_DRAW_FIRST_ANGLE_PROJECTION.

------------

UF_DRAW - UF_DRAW_plotter_data_s
UF_DRAW_plotter_data_s
(view source)
Defined in: uf_draw_types.h
Also known as:
UF_DRAW_plotter_data_p_t
UF_DRAW_plotter_data_t
Data Members
plotter_name [ 17 ]
char
Plotter name (16 characters max).
plot_scale
double
Plot scale.
rotation
double
Rotation angle (in degrees).
media_ref_num
int
Media reference number.
copies
int
Number of copies.
plot_origin [ 2 ]
double
Plot origin (XY coordinates).
[0] - X coordinate
[1] - Y coordinate
plot_offset [ 2 ]
double
Plot offset (XY coordinates).
[0] - X offset
[1] - Y offset
pen_assignment
UF_DRAW_pen_assignment_t
Pen assignment.
UF_DRAW_DENSITY
UF_DRAW_COLOR
pen_list [ 16 ]
int
Pen list.
data_source
UF_DRAW_data_source_t
Data source.
UF_DRAW_DRAWING_DATA
UF_DRAW_DEFAULT_DATA

------------

UF_DRAW - UF_DRAW_render_prefs_s
UF_DRAW_render_prefs_s
(view source)
Defined in: uf_draw_types.h
Also known as:
UF_DRAW_render_prefs_p_t
UF_DRAW_render_prefs_t
Data Members
hidden_line
UF_DRAW_hidden_line_t
Hidden line rendering
hidden_line_color
int
Hidden line color
(0=original)
hidden_line_font
int
Hidden line font
(0=original)
hidden_line_width
int
Hidden line width, use
UF_OBJ_WIDTH_NORMAL
UF_OBJ_WIDTH_THIN
UF_OBJ_WIDTH_THICK
UF_OBJ_WIDTH_ORIGINAL
edge_hiding_edge
UF_DRAW_edge_hiding_edge_t
UF_DRAW_edge_hiding_edge_off
UF_DRAW_edge_hiding_edge_on
visible_line_color
int
Visible line color
(0=original)
visible_line_font
int
Visible line font
(0=original)
visible_line_width
int
Visible line width, use
UF_OBJ_WIDTH_NORMAL
UF_OBJ_WIDTH_THIN
UF_OBJ_WIDTH_THICK
UF_OBJ_WIDTH_ORIGINAL
referenced_edges_only
logical
When TRUE, renders only hidden lines
referencing annotation with hidden
line settings above. When FALSE, all
hidden lines are rendered with
hidden line settings above.
edges_hidden_by_own_solid
logical
When TRUE, renders self-hidden
edges according to hidden line
settings above. When FALSE, only
edges hidden by other solids
are rendered according to hidden
line settings above.

------------

UF_DRAW - UF_DRAW_sxline_sxsegs_s
UF_DRAW_sxline_sxsegs_s
(view source)
Defined in: uf_draw_types.h
Also known as:
UF_DRAW_sxline_sxsegs_p_t
UF_DRAW_sxline_sxsegs_t
Data Members
sxseg_type
UF_DRAW_sxseg_type_t
UF_DRAW_sxseg_arrow = arrow segment
UF_DRAW_sxseg_cut = cut segment
UF_DRAW_sxseg_bend = bend segment
sxseg_object
UF_DRF_object_p_t
Object associated to section line segment
sxseg_angle
double
Angle of section segment in degrees from
-180 to 180 (for unfolded section line
segments only)

------------

UF_DRAW - UF_DRAW_sxseg_info_s
UF_DRAW_sxseg_info_s
(view source)
Defined in: uf_draw_types.h
Also known as:
UF_DRAW_sxseg_info_t
UF_DRAW_sxseg_info_p_t
Overview
Section line segment structure
Data Members
sxseg_type
UF_DRAW_sxseg_type_t
Segment type:
UF_DRAW_sxseg_arrow = arrow segment
UF_DRAW_sxseg_cut = cut segment
UF_DRAW_sxseg_bend = bend segment
leg_num
UF_DRAW_sxline_leg_t
Segment leg number:
If REVOLVED Section Line, then leg_num
can be UF_DRAW_sxline_leg1 or
UF_DRAW_sxline_leg2. In all other cases
it will be UF_DRAW_sxline_leg1.
sxseg_mode
UF_DRAW_sxseg_mode_t
Creation mode of segment:
UF_DRAW_system_defined_sxseg
UF_DRAW_user_defined_sxseg
highlight_status
UF_DRAW_sxseg_highlight_t
Segment highlight state
(due to lost associativity)
UF_DRAW_unhighlighted
UF_DRAW_highlighted
sxseg_angle
double
Angle of segment (for unfolded section
line segments only). In degrees from
-180 to 180.

------------

UF_DRAW - UF_DRAW_sxview_prfs_s
UF_DRAW_sxview_prfs_s
(view source)
Defined in: uf_draw_types.h
Also known as:
UF_DRAW_sxview_prfs_p_t
UF_DRAW_sxview_prfs_t
Data Members
sx_section_sheet_body
UF_DRAW_sx_section_sheet_body_t
Section view
Section Sheet Body
UF_DRAW_sx_section_sheet_body_off
UF_DRAW_sx_section_sheet_body_on
sx_background
UF_DRAW_sx_background_t
Section view background
UF_DRAW_sx_background_on
UF_DRAW_sx_background_off
sx_crosshatch
UF_DRAW_sx_crosshatch_t
Section view crosshatch
UF_DRAW_sx_crosshatch_off
UF_DRAW_sx_crosshatch_on
sx_assy_xhatch
UF_DRAW_sx_assy_xhatch_t
xhatch_adj_toler
double

------------

UF_DRAW - UF_DRAW_view_boundary_s
UF_DRAW_view_boundary_s
(view source)
Defined in: uf_draw_types.h
Also known as:
UF_DRAW_view_boundary_t
UF_DRAW_view_boundary_p_t
Overview
View Boundary structure - used for asking boundary curves and
making a view boundary associative to the model.
Data Members
curve_tag
tag_t
Tag of boundary curve.
const_status
logical
Construction status of a curve.
FALSE = not a construction line
TRUE = curve is a construction line
This parameter is unused when defining a
view boundary (you cannot define a view
boundary with a construction curve with
NX Open API).
point_count
int
Number of defining points for the curve.
defining_points
tag_p_t
Array of defining points for the curve
hatch_tag
tag_t
Tag of hatch object

------------

UF_DRAW - UF_DRAW_view_info_s
UF_DRAW_view_info_s
(view source)
Defined in: uf_draw_types.h
Also known as:
UF_DRAW_view_info_p_t
UF_DRAW_view_info_t
Data Members
view_status
UF_DRAW_view_status_t
Active = UF_DRAW_ACTIVE_VIEW,
reference = UF_DRAW_REFERENCE_VIEW.
anchor_point
tag_t
The anchor point of the view. Must
be a smart point (see uf_so.h).
When adding a view, if no anchor
point is desired, use NULL_TAG. If
you wish to set the view reference
point with a "dumb" point, use
uc6484.
view_scale
double
The view scale.
use_ref_pt
logical
If true, then used the saved
reference point.
clean_model_view
logical
v15.0 No longer used, model
views can no longer be cleaned
when imported onto a drawing
inherit_boundary
logical
If TRUE, then the drawing view
will inherit the model view's
boundary.
transfer_annotation
logical
If TRUE, annotations are
moved from model view to
imported drawing view
inherit_pmi
logical
If TRUE, then PMI are copied
from the model view to the
imported drawing view
model_name [ UF_DRAW_MAX_LABEL_LEN ]
char
Part name for the view, filespec with path, must not be NULL or empty.
Used only when importing views
or asking the settings of a view
arrangement_name [ UF_DRAW_MAX_LABEL_LEN ]
char
Name of arrangement, may be '\0'.
Used only when importing views, or
asking the settings of a view.

------------

UF_DRAW - UF_DRAW_view_label_parms_s
UF_DRAW_view_label_parms_s
(view source)
Defined in: uf_draw_types.h
Also known as:
UF_DRAW_view_label_parms_t
UF_DRAW_view_label_parms_p_t
Overview
view label preferences
Data Members
view_label_parm_type
UF_DRAW_view_label_parm_type_t
Parameter type - Detail view,
Section View, or other.
view_label_type
UF_DRAW_view_label_view_text_type_t
View label type - view name or
view letter
letter_format
UF_DRAW_view_label_letter_format_t
Letter format - single letter or
letter separated by dash
view_label_position
UF_DRAW_view_label_position_t
View Label position relative to
view boundary
view_scale_position
UF_DRAW_view_label_scale_position_t
View Scale position relative to
view label
view_scale_value_format
UF_DRAW_view_label_scale_format_t
View Scale value format - ratio,
vertical fraction, horizontal
fraction, or Nx
view_label_text_to_stub_format
UF_DRF_view_label_text_to_stub_format_t
View lable text to stub format -
controls the location of the text
on the parent view label relative
to the stub.
letter_size_factor
double
Character size of letter relative
to the current font
view_scale_prefix_factor
double
Character size of scale label
relative to the current font
view_scale_text_factor
double
Character size of scale value
relative to the current font
view_label
logical
TRUE - include view label;
FALSE - do not include view label
scale_label
logical
TRUE - include scale label;
FALSE - do not include scale label
view_label_customize
logical
TRUE - turn on customized toggle
FALSE - turn off customized toggle
scale_parentheses
logical
TRUE - include parentheses around scale;
FALSE - do not include parentheses around scale;
view_label_prefix [ UF_DRAW_MAX_LABEL_LEN ]
char
View label prefix string
scale_label_prefix [ UF_DRAW_MAX_LABEL_LEN ]
char
Scale label prefix string
view_letter [ UF_DRAW_MAX_LETTER_BUFSIZE ]
char
View letter string
parent_label_type
UF_DRAW_label_on_parent_type_t
label on parent of detail view type
text_to_gap_factor
double
Defines how big the gap will be for embedded
label on parent types
parent_vw_lbl_prefix [ UF_DRAW_MAX_LABEL_LEN ]
char
Parent view label prefix string
show_rotation_symbol
logical
Show rotation symbol
show_rotation_angle
logical
Show rotation angle
secondary_indexing_align
UF_DRAW_secondary_indexing_align_t
Secondary indexing alignment
subscript_size_factor
double
Subscript size factor

------------

UF_DRAW - UF_DRAW_view_prfs_s
UF_DRAW_view_prfs_s
(view source)
Defined in: uf_draw_types.h
Also known as:
UF_DRAW_view_prfs_p_t
UF_DRAW_view_prfs_t
Data Members
hidden_line
UF_DRAW_hidden_line_t
Hidden line removal, use
UF_DRAW_hidden_line_removal_off or
UF_DRAW_hidden_line_removal_on
hidden_line_color
int
Hidden line color
hidden_line_font
int
Hidden line font
hidden_line_width
int
Hidden line width,
please use
UF_OBJ_WIDTH_NORMAL,
UF_OBJ_WIDTH_THIN,
UF_OBJ_WIDTH_THICK, or
UF_OBJ_WIDTH_ORIGINAL
edge_hiding_edge
UF_DRAW_edge_hiding_edge_t
UF_DRAW_edge_hiding_edge_off or
UF_DRAW_edge_hiding_edge_on
smooth
UF_DRAW_smooth_t
Smooth Edges UF_DRAW_smooth_off or
UF_DRAW_smooth_on
tolerance
double
Chord height tolerance for
silhouettes and hidden line
display; must be >= 0.0
silhouettes
UF_DRAW_silhouette_t
UF_DRAW_silhouettes_off or
UF_DRAW_silhouettes_on
uvhatch
UF_DRAW_uvhatch_t
UF_DRAW_uvhatch_off or
UF_DRAW_uvhatch_on
smooth_edge_color
int
Smooth edge color
(0=original)
smooth_edge_font
int
Smooth edge font
(0=original)
smooth_edge_width
int
Smooth edge width
(see hidden_line_width)
smooth_edge_gap
UF_DRAW_gap_t
Smooth edge gap
(0=off, 1 = on)
smooth_edge_gap_size
double
Smooth edge gap
size (in part units)
virtual_intersect
UF_DRAW_virtual_intersect_t
Virtual intersection
curves (0=off, 1 = on)
virtual_intersect_color
int
Virtual
intersection color
(0=original)
virtual_intersect_font
int
Virtual
intersection font
(0=original)
virtual_intersect_width
int
Virtual
intersection width
(0=original)
virtual_intersect_gap
UF_DRAW_gap_t
virtual_intersect_gap_size
double
extracted_edges
UF_DRAW_extracted_edges_t
Associative Extracted
Edge use (0=off, 1=on)
visible_line_color
int
(0 = original)
visible_line_font
int
(0=original)
visible_line_width
int
Please use either
UF_OBJ_WIDTH_NORMAL,
UF_OBJ_WIDTH_THIN,
UF_OBJ_WIDTH_THICK, or
UF_OBJ_WIDTH_ORIGINAL
interfering_solids
int
0 = no interfering solids
1 = yes without Interference Curves
2 = yes and render InterferenceCurves
referenced_edges_only
logical
When TRUE, renders only hidden lines
referencing annotation with hidden line
settings above. When FALSE, all hidden
lines are rendered with hidden line
settings above.
edges_hidden_by_own_solid
logical
When TRUE, renders self-hidden
edges according to hidden line
settings above. When FALSE, only
edges hidden by other solids are
rendered according to hidden line
settings above.
simplify_small_features
int
0 = don't simplify
1 = simplify features
smaller than small_feature_tolerance
when rendering hidden lines.
2 = hide features small than the
small_feature_tolerance when
rendering hidden lines.
small_feature_tolerance
double
Small feature tolerance percentage
(from 0.0 to 5.00). Features
smaller than this percentage of the
model will be simplified when
simplify_small_features is true.
traceline_visible_color
int
Traceline visible color
(0=original)
traceline_visible_font
int
Traceline visible font
(0=original)
traceline_visible_width
int
Traceline visible width
(see hidden_line_width)
traceline_hidden_color
int
Traceline hidden color
(0=original)
traceline_hidden_font
int
Traceline hidden font
(0=invisible)
traceline_hidden_width
int
Traceline hidden width
(see hidden_line_width)
traceline_gap
UF_DRAW_gap_t
Traceline gap
(0=off, 1 = on)
traceline_gap_size
double
Traceline gap
size (in part units)

------------

UF_DRF - UF_DRF_appended_text_s
UF_DRF_appended_text_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_appended_text_t
UF_DRF_appended_text_p_t
Overview
This is a structure to hold dimension appended text at a particular location
Data Members
location
UF_DRF_appended_text_location_t
appended text location
num_lines
int
number of lines of appended text
text
char * *
appended text array

------------

UF_DRF - UF_DRF_arc_info_s
UF_DRF_arc_info_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_arc_info_t
UF_DRF_arc_info_p_t
Overview
This is a structure to hold arc data
History - V15.0 change: The following fields were added: arc_type,
sequence_number, num_symbols, and symbol_data.
Data Members
arc_type
int
arc type
sequence_number
int
arc sequence number
arc_center [ 3 ]
double
x, y coordinate
radius
double
arc radius
start_angle
double
arc start angle
end_angle
double
arc end angle
num_symbols
int
number of User Defined
Symbols
symbol_data
UF_DRF_symbol_instance_t *
User Defined Symbol
data
num_assoc_objs
int
number of associated
objects
assoc_objs
UF_DRF_assoc_info_t *
leader assoc object tag
type, and modifier

------------

UF_DRF - UF_DRF_areafill_s
UF_DRF_areafill_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_areafill_t
UF_DRF_areafill_p_t
Overview
Area Fill: UF_drafting_entity_type, UF_draft_area_fill_subtype
Data Members
material
UF_DRF_valid_material_t
area fill material type
material is defined by the
UF_DRF_valid_material_t
scale
double
area fill scale
angle
double
area fill angle, in radians
tolerance
double
area fill tolerance

------------

UF_DRF - UF_DRF_arrow_info_s
UF_DRF_arrow_info_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_arrow_info_t
UF_DRF_arrow_info_p_t
Overview
This is a structure to hold arrowhead data
History - V15.0 change: The sequence_number field was added.
Data Members
sequence_number
int
arrow sequence number
arrow_type
UF_DRF_arrow_type_t
arrowhead type. See
UF_DRF_arrow_type_t
arrow_fill
UF_DRF_arrow_fill_type_t
arrowhead fill. See
UF_DRF_arrow_fill_type_t
arrow_origin [ 3 ]
double
arrowhead origin in the coordinate
system of the drafting object.
arrow_angle
double
arrowhead angle in degs
arrow_include_angle
double
arrowhead include
angle in degs
arrow_height
double
arrowhead height
arrow_width
double
arrowhead width

------------

UF_DRF - UF_DRF_assoc_info_s
UF_DRF_assoc_info_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_assoc_info_t
UF_DRF_assoc_info_p_t
Overview
This is a structure to hold associativity data
Data Members
assoc_object_tag
tag_t
tag of associated object
assoc_object_view_tag
tag_t
tag of member view of
assoc_object_tag
assoc_type
UF_DRF_assoc_type_t
object associativity type
assoc_modifier
int
object associativity modifier

------------

UF_DRF - UF_DRF_associative_origin_s
UF_DRF_associative_origin_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_associative_origin_t
UF_DRF_associative_origin_p_t
Overview
This data structure is used when setting and querying associative origin
information for an annotation.
Data Members
origin_type
UF_DRF_associative_origin_type_t
Used for UF_DRF_ORIGIN_RELATIVE_TO_VIEW
view_eid
tag_t
View of associativity for the annotation.
view_of_geometry
tag_t
The member view in which the absolute model
point lies. This is used for mapping onto
the drawing.
point_on_geometry
tag_t
Absolute point in absolute space the annotation
is associated with.
vert_annotation
tag_t
Annotation to align
with.
vert_alignment_position
UF_DRF_align_position_t
Alignment position on
vert_annotation to
align to.
horiz_annotation
tag_t
Annotation to align
with.
horiz_alignment_position
UF_DRF_align_position_t
Alignment position on
horiz_annotation to
align to.
aligned_annotation
tag_t
Alignment annotation
dimension_line
int
1 for dimension line 1, 2 for dimension line 2
associated_view
tag_t
The member view in which the absolute model
point lies. This is used for mapping onto
the drawing. May be NULL if annotation is
on the model or the point is on the drawing.
associated_point
tag_t
Origin location of annotation
offset_annotation
tag_t
Annotation to align
to
offset_alignment_position
UF_DRF_align_position_t
Alignment position
on annotation to
align with.
x_offset_factor
double
X Offset factor from
associated point.
y_offset_factor
double
Y Offset factor from
associated point.
stack_annotation
tag_t
Used for UF_DRF_ORIGIN_STACK
stack_alignment_position
UF_DRF_stack_align_position_t

------------

UF_DRF - UF_DRF_assortpart_arc_s
UF_DRF_assortpart_arc_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_assortpart_arc_t
UF_DRF_assortpart_arc_p_t
Overview
Assorted Parts Arc Data
Data Members
num_arcs
int
number of arcs
num_arc_segments
int *
array of number of arc segments per arc
arc_data
double *
arc data
[0,1] 2d arc center in coordinates
of annotation
[2] arc radius
[3,4] start and end angles in radians
.
.
[2num_arc_segments+1,
2num_arc_segments+2] segment angles

------------

UF_DRF - UF_DRF_assortpart_arrow_s
UF_DRF_assortpart_arrow_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_assortpart_arrow_t
UF_DRF_assortpart_arrow_p_t
Overview
Assorted Parts Arrow Data
Data Members
num_arrows
int
number of arrows
arrowhead_subtype
int *
array of arrowhead subtypes per arrow
1 = CLOSED
2 = OPEN
3 = ARCH CROSS
4 = DOT
5 = ORIGIN SYMBOL
6 = NONE
arrow_data
double *
array of arrow data
[0,1] 2d arrow origin in coordinates
of annotation
[2] arrow angle in radians

------------

UF_DRF - UF_DRF_assortpart_line_s
UF_DRF_assortpart_line_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_assortpart_line_t
UF_DRF_assortpart_line_p_t
Overview
Assorted Parts Line Data
Data Members
num_lines
int
number of lines
num_line_segments
int *
array of number of line segments per line
line_data
double *
2d array of line points in coordinates
of annotation

------------

UF_DRF - UF_DRF_assortpart_text_s
UF_DRF_assortpart_text_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_assortpart_text_t
UF_DRF_assortpart_text_p_t
Overview
Assorted Parts Text Data
Data Members
num_text
int
number of text components
num_lines_text
int *
array of number of lines per text component
text
char * *
array of text strings
text_origin
double *
array of 2d origins of text components in
coordinates of annotation

------------

UF_DRF - UF_DRF_centerline_info_s
UF_DRF_centerline_info_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_centerline_info_t
UF_DRF_centerline_info_p_t
Overview
This is a structure to hold information in centerlines
Data Members
num_lines
int
number of centerline
lines
line_info
UF_DRF_draft_aid_line_t *
centerline line info. See
UF_DRF_draft_aid_line_t
num_arcs
int
number of arcs
arc_info
UF_DRF_arc_info_t *
arc information. See
UF_DRF_arc_info_t
num_assoc_objs
int
number of assoc object
assoc_objs
UF_DRF_assoc_info_t *
associated object tag,
type, and modifier. See
UF_DRF_assoc_info_t

------------

UF_DRF - UF_DRF_cfw_s
UF_DRF_cfw_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_cfw_t
UF_DRF_cfw_p_t
Overview
UF_DRF_cfw_t specifies the color, font, and width for a line
Data Members
color
int
Color of the line.
font
int
Font of the line.
width
UF_DRF_line_width_t
Width of the line.

------------

UF_DRF - UF_DRF_chamfer_dimension_data_s
UF_DRF_chamfer_dimension_data_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_chamfer_dimension_data_t
UF_DRF_chamfer_dimension_data_p_t
Data Members
form
UF_DRF_chamfer_dimension_form_t
stub_type
UF_DRF_chamfer_dimension_stub_type_t
leader_type
UF_DRF_chamfer_dimension_leader_type_t
symbol_type
UF_DRF_chamfer_dimension_symbol_type_t
symbol_name
char *
space_factor
double

------------

UF_DRF - UF_DRF_custom_symbol_s
UF_DRF_custom_symbol_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_custom_symbol_t
UF_DRF_custom_symbol_p_t
Overview
This structure contains all the data necessary to create a custom symbol.
Data Members
geometry
tag_t *
Tags of lines, arcs, splines, crosshatch, and
area fill for symbol definition
num_geometry
int
Number of tags in the curves array above.
text
UF_DRF_custom_symbol_text_t *
Array of symbol text structures for symbol
definition.
num_text
int
Number of text structures in the text
array.
anchor_point
tag_t
Tag of the symbol's anchor point.
connections
UF_DRF_symbol_connection_t *
Array of tags for the symbol's leader
connect points.
num_connections
int
Number of leader connection points.
The number may be 0, 1, or 2
leader
UF_DRF_leader_p_t
Pointer to information about the leader
angle
double
The angle of the symbol with respect to
the WCS X-axis
scale
double
The scale of the symbol with respect to
the size of the original geometry
origin [ 3 ]
double
The origin of the symbol in absolute
coordinates.

------------

UF_DRF - UF_DRF_custom_symbol_text_s
UF_DRF_custom_symbol_text_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_custom_symbol_text_t
UF_DRF_custom_symbol_text_p_t
Overview
This structure defines the text data for a custom symbol
Data Members
note_tag
tag_t
This is the tag of the note from which
this text will be based. This object
must be of type UF_drafting_entity_type
and subtype UF_draft_note_subtype
text_type
UF_DRF_custom_symbol_text_type_t
The type of text for this structure
title
char *
The title of this text field.
This title displays in the dialog
when creating the symbol.
min_value
double
This value is the lower bound for
UF_DRF_integer_text and UF_DRF_real_text
types. For integer text, this value is
truncated to an integer form. This value
has no meaning for arbitrary, controlled,
mandatory, or partially controlled text
max_value
double
This value is the upper bound for
UF_DRF_integer_text and UF_DRF_real_text
types. For integer text, this value is
truncated to an integer form. This value
has no meaning for arbitrary, controlled,
mandatory, or partially controlled text
current_value
double
This value is the current value defined for
this text object. This value only has
meaning for UF_DRF_real_text and
UF_DRF_integer_text types. For integer text,
this value is truncated to integer format.
This value must be greater than or equal to
min_value and less than or equal to max_value.
optional_strings
char * *
An array of strings in localized format describing
a list of strings for controlled and partially
controlled text.
num_optional_strings
int
The number of strings in the array above.
current_option
int
The index of the currently selected string for
controlled and partialy controlled text. If
the text type is UF_DRF_partially_controlled_text
and the current_option is -1, then this indicates
that none of the given choices should be used and
the arbitrary text field will contain the string
for this text object.
simple_text
char *
The current value for arbitrary or mandatory text.
This field is only used for the
UF_DRF_arbitrary_text and UF_DRF_mandatory_text
types.

------------

UF_DRF - UF_DRF_diameter_radius_preferences_s
UF_DRF_diameter_radius_preferences_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_diameter_radius_preferences_t
UF_DRF_diameter_radius_preferences_p_t
Overview
UF_DRF_diameter_radius_preferences_t specifies annotation preferences
that only apply to radial type dimensions
Data Members
diameter_symbol_type
UF_DRF_diameter_symbol_t
standard diameter symbol or
user-defined
diameter_symbol [ UF_DRF_DIAMETER_RADIUS_SYMBOL_MAX_BUFSIZE ]
char
text for user-defined diameter symbol
radius_symbol_type
UF_DRF_radius_symbol_t
standard radius symbol or
user-defined
radius_symbol [ UF_DRF_DIAMETER_RADIUS_SYMBOL_MAX_BUFSIZE ]
char
text for user-defined radius symbol
diameter_radius_placement
UF_DRF_diameter_radius_placement_t
placement of diameter/radius symbol
relative to dimension text
text_above_leader
UF_DRF_text_above_leader_t
if option is set to anything other than
UF_DRF_NO_TEXT_ABOVE_LEADER, then
dimension text will be displayed above
the leader stub with the stub extended
to the maximum length of the dimension
text. used with dimension text
orientations of
UF_DRF_TEXT_DIMENSION_HORIZONTAL and
UF_DRF_TEXT_DIMENSION_BY_ANGLE.
for UF_DRF_NO_TEXT_ABOVE_LEADER, the
dimension text displays next to the
leader stub
symbol_to_dimension_text_distance
double
distance between radius/
diameter symbol and dimension
text in character spaces
folded_radius_angle
double
angle of the fold for folded radius
dimensions

------------

UF_DRF - UF_DRF_dim_info_s
UF_DRF_dim_info_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_dim_info_t
UF_DRF_dim_info_p_t
Overview
This is a structure to hold information in dimension
Data Members
num_text
int
number of text block
text_info
UF_DRF_draft_aid_text_info_t *
text information. See
UF_DRF_draft_aid_text_info_t
num_lines
int
number of dimension
lines
dim_line_info
UF_DRF_dim_line_info_t *
dimension line info. See
UF_DRF_dim_line_info_t
num_arcs
int
number of arcs
arc_info
UF_DRF_arc_info_t *
arc information. See
UF_DRF_arc_info_t
num_arrows
int
number of arrowheads
arrow_info
UF_DRF_arrow_info_t *
arrowhead information. See
UF_DRF_arrow_info_t

------------

UF_DRF - UF_DRF_dim_line_info_s
UF_DRF_dim_line_info_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_dim_line_info_t
UF_DRF_dim_line_info_p_t
Overview
This is a structure to hold information for dimension lines
Data Members
line_pnts
UF_DRF_draft_aid_line_t *
dimension lines end
points
num_assoc_objs
int
number of associated
objects
assoc_objs
UF_DRF_assoc_info_t *
leader assoc object tag
type, and modifier

------------

UF_DRF - UF_DRF_dimension_preferences1_s
UF_DRF_dimension_preferences1_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_dimension_preferences1_t
UF_DRF_dimension_preferences1_p_t
Overview
UF_DRF_dimension_preferences1_t specifies annotation preferences
that apply only to dimensions
Data Members
tolerance_type
UF_DRF_tolerance_type_t
upper_tolerance_english
double
inches
lower_tolerance_english
double
inches
upper_tolerance_metric
double
millimeters
lower_tolerance_metric
double
millimeters
upper_tolerance_deg
double
not implemented
lower_tolerance_deg
double
not implemented
dimension_value_dp
int
number of decimal places for primary
dimension value
tolerance_value_dp
int
number of decimal places for primary
tolerance value
dual_dimension_value_dp
int
number of decimal places for
secondary dimension value
dual_tolerance_value_dp
int
number of decimal places for
secondary tolerance value
angular_dimension_value_dp
int
not implemented
angular_tolerance_value_dp
int
not implemented
dim_fraction_denominator
UF_DRF_fraction_denominator_t
fractional precision for primary
dimension and tolerance value
dual_fraction_denominator
UF_DRF_fraction_denominator_t
fractional precision for secondary
primary and tolerance value
text_arrow_placement
UF_DRF_text_arrow_placement_t
automatic placement or manual
placement with arrows in or out
extension_line_display
UF_DRF_extension_line_display_t
number and side for extension
line(s)
arrow_display
UF_DRF_arrow_display_t
number and side for arrow(s)
line_between_arrows
logical
TRUE if a line is to be displayed
between arrows
orientation
UF_DRF_dimension_orientation_t
orientation of dimension text
text_angle
double
angle of text if orientation
is UF_DRF_DIMENSION_TEXT_BY_ANGLE
baseline_offset
double
baselinen dimension offset value
chain_offset
double
chain dimension offset value
narrow_dimension_data
UF_DRF_narrow_dimension_info_p_t
Narrow dimension preferences
narrow_dimension_arrowhead_type
UF_DRF_arrowhead_and_fill_type_t
Narrow dimension arrowhead type
chamfer_dimension_data
UF_DRF_chamfer_dimension_data_p_t
chamfer dimension data
dim_inspection_type
UF_DRF_inspection_type_t
dimension inspection type preference
dim_reference_type
UF_DRF_reference_symbol_type_t
dimension reference type preference
trim_dim_line
UF_DRF_trim_dim_line_style_t
Whether to trim dimension line when text cross both extension lines

------------

UF_DRF - UF_DRF_dimension_preferences_s
UF_DRF_dimension_preferences_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_dimension_preferences_t
UF_DRF_dimension_preferences_p_t
Overview
UF_DRF_dimension_preferences_t specifies annotation preferences
that apply only to dimensions
Data Members
tolerance_type
UF_DRF_tolerance_type_t
upper_tolerance_english
double
inches
lower_tolerance_english
double
inches
upper_tolerance_metric
double
millimeters
lower_tolerance_metric
double
millimeters
upper_tolerance_deg
double
not implemented
lower_tolerance_deg
double
not implemented
dimension_value_dp
int
number of decimal places for primary
dimension value
tolerance_value_dp
int
number of decimal places for primary
tolerance value
dual_dimension_value_dp
int
number of decimal places for
secondary dimension value
dual_tolerance_value_dp
int
number of decimal places for
secondary tolerance value
angular_dimension_value_dp
int
not implemented
angular_tolerance_value_dp
int
not implemented
dim_fraction_denominator
UF_DRF_fraction_denominator_t
fractional precision for primary
dimension and tolerance value
dual_fraction_denominator
UF_DRF_fraction_denominator_t
fractional precision for secondary
primary and tolerance value
text_arrow_placement
UF_DRF_text_arrow_placement_t
automatic placement or manual
placement with arrows in or out
extension_line_display
UF_DRF_extension_line_display_t
number and side for extension
line(s)
arrow_display
UF_DRF_arrow_display_t
number and side for arrow(s)
line_between_arrows
logical
TRUE if a line is to be displayed
between arrows
orientation
UF_DRF_dimension_orientation_t
orientation of dimension text
text_angle
double
angle of text if orientation
is UF_DRF_DIMENSION_TEXT_BY_ANGLE
baseline_offset
double
baselinen dimension offset value
chain_offset
double
chain dimension offset value
narrow_dimension_data
UF_DRF_narrow_dimension_info_t
Narrow dimension preferences
narrow_dimension_arrowhead_type
UF_DRF_arrowhead_and_fill_type_t
Narrow dimension arrowhead type
chamfer_dimension_data
UF_DRF_chamfer_dimension_data_t
chamfer dimension data
dim_inspection_type
UF_DRF_inspection_type_t
dimension inspection type preference
dim_reference_type
UF_DRF_reference_symbol_type_t
dimension reference type preference
trim_dim_line
UF_DRF_trim_dim_line_style_t
Whether to trim dimension line when text cross both extension lines

------------

UF_DRF - UF_DRF_dogleg_info_s
UF_DRF_dogleg_info_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_dogleg_info_t
UF_DRF_dogleg_info_p_t
Overview
This is a structure to hold ordinate dimension origin
dog leg information
Data Members
dogleg_type
UF_DRF_dogleg_type_t
Dog leg type. See
UF_DRF_dogleg_type_t
dogleg_angle
double
Dog leg angle in degrees
dogleg_distance
double
Dog leg distance

------------

UF_DRF - UF_DRF_draft_aid_line_s
UF_DRF_draft_aid_line_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_draft_aid_line_t
UF_DRF_draft_aid_line_p_t
Overview
This is a structure to hold drafting aid line information
History - V15.0 change: The following fields were added: sequence_number,
num_symbols, and symbol_data.
V17.0 segment_pnts is now dynamically allocated.
the minimum size will be its previous fixed size
which was MAX_LINE_NCHARS  6.
Data Members
sequence_number
int
array of line sequence
numbers per line
num_symbols
int
number of User Defined
Symbols
symbol_data
UF_DRF_symbol_instance_t *
User Defined Symbol
num_segments
int
number of lines
segment_pnts
double *
x, y, z line segment end points
in the coordinate system of the
drafting object.

------------

UF_DRF - UF_DRF_draft_aid_text_info_s
UF_DRF_draft_aid_text_info_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_draft_aid_text_info_t
UF_DRF_draft_aid_text_info_p_t
Overview
This is a structure to hold information in drafting aid text
History - V15.0 change: The text_type field was added.
NX2.0 change: The text_type was changed to UF_DRF_text_type_t
Data Members
text_type
UF_DRF_text_type_t
Drafting aid text type
text_font
int
Drafting aid text character font
size
double
Drafting aid text character size
angle
double
Drafting aid text angle in radians
origin [ 3 ]
double
x, y, z coordinates of text origin
in the coordinate system of the
drafting object.
length
double
Drafting aid text length
height
double
Drafting aid text height
distance
double
Drafting aid text distance from
origin (usually the lower left
corner of the first line of text)
to top of the text box.
aspect_ratio
double
Drafting aid text aspect ratio
gap
double
Drafting aid text character gap
line_spacing
double
Drafting aid text line spacing
num_lines
int
Number of drafting aid text lines
text
UF_DRF_draft_aid_text_t *
Drafting aid text data structure
to hold text data

------------

UF_DRF - UF_DRF_draft_aid_text_s
UF_DRF_draft_aid_text_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_draft_aid_text_t
UF_DRF_draft_aid_text_p_t
Overview
This is a structure to hold data in TEXT record.
Data Members
num_chars
int
number of characters
The 132 byte maximum line restriction has been removed.
string is available as a legacy variable containing the
line which will still be truncated to 132 bytes.
Please modify your programs to use full_string instead,
since string will be removed in a future NX release.
UF_DRF_free_text will free this string along with other
variables in the UF_DRF_draft_aid_text_info_t structure.
Note that the old limit of MAX_LINE_BUFSIZE is the number of
bytes, NOT the number of characters. In the default C locale
these two values will be the same. However for localized text
in another locale, there will be multibyte characters.
string [ MAX_LINE_BUFSIZE ]
char
Buffer large enough to hold MAX_LINE_NCHARS characters
num_ints
int
string physical length
full_num_chars
int
number of bytes in full string
full_string
char *
full string (not terminated to 132 bytes)

------------

UF_DRF - UF_DRF_folded_radius_info_s
UF_DRF_folded_radius_info_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_foldedradius_dim_info_t
UF_DRF_folded_radius_info_p_t
Overview
This is a structure to hold in folded radius information
Data Members
fold_location [ 3 ]
double
Fold location in wcs coordinates
fold_location [0] = x value
fold_location [1] = y value
fold_location [2] = z value
fold_angle
double
Folded angle in degrees
fold_offset
double
Folded relative distance

------------

UF_DRF - UF_DRF_gdt_leader_data_s
UF_DRF_gdt_leader_data_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_gdt_leader_data_t
UF_DRF_gdt_leader_data_p_t
Data Members
object
tag_t
This is the tag of the
associated object.
view
tag_t
This is the tag of the member
view of the object_tag entity.
point [ 3 ]
double
This 3D point is the location
of the terminator (or arrow)
of the leader.
intermediate_points
UF_DRF_intermediate_points_t
These are the intermediate
points, if any, between the
stub and the terminator of the
leader.

------------

UF_DRF - UF_DRF_gdt_leader_s
UF_DRF_gdt_leader_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_gdt_leader_t
UF_DRF_gdt_leader_p_t
Data Members
leader_type
UF_DRF_leader_type_t
leader_side
UF_DRF_leader_side_e
num_leaders
int
leader_data [ UF_DRF_LEADER_MAX_LEADERS ]
UF_DRF_gdt_leader_data_t

------------

UF_DRF - UF_DRF_gdt_symbol_info_s
UF_DRF_gdt_symbol_info_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_gdt_symbol_info_t
UF_DRF_gdt_symbol_info_p_t
Overview
This is a structure to hold information in GD&T Symbol
Data Members
num_text
int
number of text block
text_info
UF_DRF_draft_aid_text_info_t *
text information
num_leaders
int
number of leaders
leader_info
UF_DRF_leader_info_t *
leader information. See
UF_DRF_leader_info_t
num_arrows
int
number of arrowheads
arrow_info
UF_DRF_arrow_info_t *
arrowhead information. See
UF_DRF_arrow_info_t

------------

UF_DRF - UF_DRF_hatch_fill_preferences_s
UF_DRF_hatch_fill_preferences_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_hatch_fill_preferences_t
UF_DRF_hatch_fill_preferences_p_t
Overview
UF_DRF_hatch_fill_preferences_t specifies annotation preferences that
apply to crosshatching and area fill
Data Members
hatch_distance
double
distance between crosshatch lines
hatch_angle
double
inclination angle of crosshatch lines
hatch_tolerance
double
controls how closely the system
approximates the boundary along curves
hatch_file [ UF_CFI_MAX_FILE_NAME_BUFSIZE ]
char
name of file containing crosshatch
patterns
hatch_material [ UF_DRF_MAX_HATCH_MATERIAL_NAME_BUFSIZE ]
char
name of crosshatch pattern
area_fill_material
UF_DRF_area_fill_material_t
area fill material or pattern style
area_fill_scale
double
scale of area fill pattern
area_fill_angle
double
rotation angle of area fill pattern
color
int
color for crosshatch and area fill lines
or the area fill solid fill color
width
UF_DRF_line_width_t
width for crosshatch and area fill lines

------------

UF_DRF - UF_DRF_id_symbol_info_s
UF_DRF_id_symbol_info_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_id_symbol_info_t
UF_DRF_id_symbol_info_p_t
Overview
This is a structure to hold information in ID Symbol
Please see the following figure for ID Symbols
Figure ID Symbols
Data Members
size
double
num_text
int
number of text block
text_info
UF_DRF_draft_aid_text_info_t *
text information
num_leaders
int
number of leaders
leader_info
UF_DRF_leader_info_t *
leader information
num_arrows
int
number of arrowheads
arrow_info
UF_DRF_arrow_info_t *
arrowhead information

------------

UF_DRF - UF_DRF_image_data_s
UF_DRF_image_data_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_image_data_t
UF_DRF_image_data_p_t
Overview
The following structure is used to create, edit and query images on drawing
sheets.
Environment
Internal  and  External
See Also
Refer to the
example
UF_DRF_create_image_from_file
UF_DRF_create_image
UF_DRF_init_image_data
UF_DRF_ask_image_data
UF_DRF_free_image_data
UF_DRF_set_image_align_position
UF_DRF_set_image_aspect_ratio_lock
UF_DRF_set_image_height
UF_DRF_set_image_width
UF_DRF_rotate_image
UF_DRF_flip_image_about_height
UF_DRF_flip_image_about_width
History
This structure was originally released in NX2.0.
Data Members
image_name
char *
The name of image in the part
drawing_sheet
tag_t
The drawing sheet on which to create the
image or NULL_TAG to create the image on
the current drawing sheet.
aspect_ratio_locked
logical
TRUE if the image's aspect ratio
cannot be changed
width
double
The width of the image in drawing
sheet units
0.0 to use original image length
height
double
The height of the image in drawing
sheet units
0.0 to use original image height
alignment_position
UF_DRF_align_position_t
The location to use when aligning the
image to another object
origin [ 3 ]
double
Point in drawing sheet units defining the
image origin which is located at the
image alignment_position
width_dir [ 3 ]
double
Vector defining the direction in which
the image width is displayed
Currently, images can only be rotated in
90-degree increments so this vector will
always be parallel or perpendicular to
the drawing sheet's X-axis
height_dir [ 3 ]
double
Vector defining the direction in which
the image height is displayed
Currently, images can only be rotated in
90-degree increments so this vector will
always be parallel or perpendicular to
the drawing sheet's Y-axis

------------

UF_DRF - UF_DRF_intermediate_points_s
UF_DRF_intermediate_points_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_intermediate_points_t
UF_DRF_intermediate_points_p_t
Overview
This structure defines a set of intermediate points for a single leader
of an annotation.
Data Members
num_points
int
The number of intermediate points for this leader.
num_points must be greater than or equal to zero.
The number of points corresponds directly to the
number of points between the stub and the leader
terminator. The ordering of the points is also
important. The first point (points[0][]) describes
the closest intermediate point to the leader
terminator. The nth point describes the
intermediate point closest to the stub (or
annotation if there is no stub. Here is a sample
of a leader with 3 intermediate points and their
relative indices. Note that the stub points are not
considered intermediate points:
(points[2][...])
/ \
/ \ ----------------> (terminator)
ANN -(stub)--/ \ / (points[0][...])
\ /
\ /
(points[1][...])
points
double * *
A two-dimensional array of doubles. The first
dimension of this array should be equal to num_points.
The second dimension of this array is fixed at 3, since
each set of three doubles describes a 3 dimensional
point in absolute coordinates.

------------

UF_DRF - UF_DRF_label_info_s
UF_DRF_label_info_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_label_info_t
UF_DRF_label_info_p_t
Overview
This is a structure to hold information in label
Data Members
num_text
int
number of text block
text_info
UF_DRF_draft_aid_text_info_t *
text information. See
UF_DRF_draft_aid_text_info_t
num_leaders
int
number of leaders
leader_info
UF_DRF_leader_info_t *
leader information. See
UF_DRF_leader_info_t
num_arrows
int
number of arrowheads
arrow_info
UF_DRF_arrow_info_t *
arrowhead information . See
UF_DRF_arrow_info_t

------------

UF_DRF - UF_DRF_leader_data_s
UF_DRF_leader_data_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_leader_data_t
UF_DRF_leader_data_p_t
Overview
A structure encapsulating the information needed to create a set of annotation
leaders for a single annotation.  This structure can specify any number
of leaders, each with it's own set of intermediate points. This structure is
nearly identical to UF_DRF_leader_t except for that it contains the point
information for the leader terminators in associativity_data
Data Members
num_leaders
int
The number of leaders in the structure
associativity_data
UF_DRF_object_assoc_data_t *
An array containing the information for each
associativity for that object. Use UF_free
to free this array of allocated memory.
leader_orientation
UF_DRF_leader_orientation_t
This enumerated type describes the orientation
of the leader's stub. For now, UF_DRF_LEADER_TOP
and UF_DRF_LEADER_BOTTOM are invalid
arguments for this structure.
intermediate_points
UF_DRF_intermediate_points_t *
This is an array of intermediate point
structures. The number of structures
in this array should correspond to
the number of leaders defined in num_leaders.

------------

UF_DRF - UF_DRF_leader_info_s
UF_DRF_leader_info_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_leader_info_t
UF_DRF_leader_info_p_t
Overview
This is a structure to hold information for a leader.
Data Members
leader_attach_type [ 7 ]
UF_DRF_leader_attach_type_t
Each leader may have up to 7 intermediate
points. This is an array of the attachment
types for each of the points. [0] is the
information for the first point, [1] is
for the second point, etc.
Each element can have one of the values:
UF_DRF_leader_attach_object
UF_DRF_leader_attach_screen
UF_DRF_leader_attach_triangle
Only a GD&T symbol may have the type,
UF_DRF_leader_attach_triangle.
num_linebks
int
Number of graphical line elements used
to represent the leader in the display.
leader_pnts
UF_DRF_draft_aid_line_t *
Array of structures, one for each
of the num_linebks line elements.
Each line element may have multiple
line segments.
num_assoc_objs
int
number of associated objects
assoc_objs
UF_DRF_assoc_info_t *
Array of leader associated objects,
one structure for each of the
num_assoc_objs objects.

------------

UF_DRF - UF_DRF_leader_s
UF_DRF_leader_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_leader_t
UF_DRF_leader_p_t
Overview
A structure encapsulating the information needed to create a set of annotation
leaders for a single annotation.  This structure can specify any number
of leaders, each with it's own set of intermediate points.
Data Members
num_leaders
int
The number of leaders in the structure
leader_terminators
tag_t *
An array of tags for the leader
terminators. There must be exactly
one(1) tag for each leader represented
in the structure.
leader_orientation
UF_DRF_leader_orientation_t
This enumerated type describes the orientation
of the leader's stub. For now, UF_DRF_LEADER_TOP
and UF_DRF_LEADER_BOTTOM are invalid
arguments for this structure.
intermediate_points
UF_DRF_intermediate_points_t *
This is an array of intermediate point
structures. The number of structures
in this array should correspond to
the number of leaders defined in num_leaders.

------------

UF_DRF - UF_DRF_lettering_preferences_s
UF_DRF_lettering_preferences_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_lettering_preferences_t
UF_DRF_lettering_preferences_p_t
Overview
UF_DRF_lettering_preferences_t specifies the lettering preferences for
dimension text, appended text, tolerance text, and general text.
Data Members
align_position
UF_DRF_align_position_t
one of nine site locations in
the text rectangle used to
place the text
horiz_text_just
UF_DRF_text_just_t
horizontal text
justification
gdt_frame_height_factor
double
GD&T frame height
factor
angle
double
angle for general text
dimension_text
UF_DRF_lettering_t
lettering preferences for
dimension text
appended_text
UF_DRF_lettering_t
lettering preferences for
appended text
tolerance_text
UF_DRF_lettering_t
lettering preferences for
tolerance text
general_text
UF_DRF_lettering_t
lettering preferences for
drafting aid text
dim_dim_line_space_factor
double
this controls spacing between bottom most piece of text on the dimension
and the dimension line when text orientation is
UF_DRF_DIMENSION_TEXT_OVER_DIMENSION_LINE. This factor is applied to the
dimension text character size to determine the spacing
dim_app_text_space_factor
double
controls spacing between before appended text and next piece of
dimension text to its right, and spacing between the after appended
text and next piece of dimension text to its left. This factor is
applied to the appended text character size to determine the spacing
dim_tol_text_space_factor
double
controls spacing between dimension main text and after tolerance text.
this factor is applied to the tolerance text character size to determine
the spacing

------------

UF_DRF - UF_DRF_lettering_s
UF_DRF_lettering_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_lettering_t
UF_DRF_lettering_p_t
Overview
UF_DRF_lettering_t specifies the lettering preferences for a single class
of lettering text.
Data Members
size
double
height of character
character_space_factor
double
multiplier applied to fonts's
standard character spacing
aspect_ratio
double
ratio of length to height for
a character
line_space_factor
double
multiplier applied to font's
standard line spacing
cfw
UF_DRF_text_cfw_t
color, font, width

------------

UF_DRF - UF_DRF_line_arrow_preferences_s
UF_DRF_line_arrow_preferences_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_line_arrow_preferences_t
UF_DRF_line_arrow_preferences_p_t
Overview
UF_DRF_line_arrow_preferences_t specifies the preferences that apply
to leaders, arrows and extension lines for both dimensions and
other annotations.
Data Members
first_arrow_type
UF_DRF_arrowhead_and_fill_type_t
type and fill status for
first arrowhead
second_arrow_type
UF_DRF_arrowhead_and_fill_type_t
type and fill status for
second arrowhead
leader_location
UF_DRF_vertical_text_just_t
vertical text alignment
for leader
arrowhead_length
double
arrowhead length
arrowhead_included_angle
double
arrowhead angle
dot_arrowhead_diameter
double
dot diameter
stub_length
double
dogleg on label or
dimension leader
text_to_line_distance
double
distance from text to
arrow line or stub
line_past_arrow_distance
double
distance an extension
line extends past point
of arrow
oblique_extension_line_angle
double
extension line angle
first_pos_to_extension_line_distance
double
distance from object
being dimensioned to the
start of 1st extension
line or arc
second_pos_to_extension_line_distance
double
distance from object
being dimensioned to the
start of 2nd extension
line or arc
datum_length_past_arrow
double
length of the datum extension
line past it's arrow
text_over_stub_factor
double
text over stub spacing
factor.
first_extension_line_cfw
UF_DRF_cfw_t
first_arrowhead_cfw
UF_DRF_cfw_t
first_arrow_line_cfw
UF_DRF_cfw_t
second_extension_line_cfw
UF_DRF_cfw_t
second_arrowhead_cfw
UF_DRF_cfw_t
second_arrow_line_cfw
UF_DRF_cfw_t
arrow_out_length_factor
double
allAroundSymbolSize
double
size of all around symbol in leader

------------

UF_DRF - UF_DRF_line_object_s
UF_DRF_line_object_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_line_object_t
UF_DRF_line_object_p_t
Overview
Line associativity structure
Data Members
line_assoc_type
UF_DRF_assoc_line_type_t
line associativity type as defined by
UF_DRF_assoc_line_type_t,
UF_DRF_EXISTING_LINE
UF_DRF_TWO_POINTS
UF_DRF_DWG_LINE
object1
UF_DRF_object_t
For UF_DRF_EXISTING_LINE this is the
UF_DRF_object_t that contains the line
definition as defined by UF_DRF_object_t.
For UF_DRF_TWO_POINTS this is the
UF_DRF_object_t that contains the first
point definition as defined by
UF_DRF_object_t.
For UF_DRF_DWG_LINE this is the
UF_DRF_object_t that defines the first
endpoint of the line in
object.assoc_dwg_pos.
point_object2
UF_DRF_object_t
For UF_DRF_EXISTING_LINE this is unused.
For UF_DRF_TWO_POINTS this is the
UF_DRF_object_t that contains the second
point definition as defined by
UF_DRF_object_t.
For UF_DRF_DWG_LINE this is the
UF_DRF_object_t that defines the second
endpoint of the line in
object.assoc_dwg_pos.

------------

UF_DRF - UF_DRF_narrow_dimension_info_s
UF_DRF_narrow_dimension_info_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_narrow_dimension_info_t
UF_DRF_narrow_dimension_info_p_t
Data Members
display_type
UF_DRF_narrow_dimension_display_type_t
text_orientation
UF_DRF_narrow_dimension_text_orientation_t
leader_angle
double
text_offset
double

------------

UF_DRF - UF_DRF_object_assoc_data_s
UF_DRF_object_assoc_data_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_object_assoc_data_t
UF_DRF_object_assoc_data_p_t
Overview
The following structures is used to manage the associativities for
drafting entities, dimensions, GD&T display instances, and
Smart Model display instances and callouts.
Data Members
assoc_object_1
tag_t
Tag of first referenced object
assoc_object_2
tag_t
Tag of second referenced object (for
intersections)
object_view
tag_t
Drawing or drafting member view of the
associatied objects.
NOTE: For intersections, both objects must
lie in the same view.
point_type
UF_DRF_object_assoc_point_type_t
line_type
UF_DRF_object_assoc_line_type_t
Line option data
base_pt_1 [ 3 ]
double
Used for line options with 1 point
(in absolute of work view)
base_pt_2 [ 3 ]
double
Used for line options with 2 points
(in absolute of work view)
entered_angle
double
Used for entered angle line method
(in radians)
assoc_point [ 3 ]
double

------------

UF_DRF - UF_DRF_object_s
UF_DRF_object_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_object_t
UF_DRF_object_p_t
Overview
object specification structure
Data Members
object_tag
tag_t
tag of associated object
depending on object_assoc_type, object
may be a point, line, arc, conic,
cubic spline, B curve, pattern, solid
curve, utility symbol (centerline),
annotation, or ignored
object_view_tag
tag_t
tag of member view of
object_tag
object_assoc_type
UF_DRF_assoc_type_t
object associativity type
UF_DRF_end_point
UF_DRF_arc_center
object must be an arc
UF_DRF_tangency
object must be an arc
UF_DRF_intersection
UF_DRF_dwg_pos
UF_DRF_utility_symbol
UF_DRF_on_annotation
UF_DRF_on_stub
object_assoc_modifier
int
object associativity modifier
- if object_assoc_type = UF_DRF_end_point,
UF_DRF_first_end_point on object or
UF_DRF_last_end_point on object.
- if object_assoc_type = UF_DRF_tangency,
parameter percentage (0 - 100) to compute
approximate tangent point on object
- if object_assoc_type = UF_DRF_arc_center,
UF_DRF_intersection, UF_DRF_dwg_pos,
UF_DRF_utility_symbol, modifier is ignored
object2_tag
tag_t
- if object_assoc_type =
UF_DRF_intersection,
tag of second object of intersection
and second object must reside in
member view of object_view_tag
described above
- if object_assoc_type =
UF_DRF_end_point,
UF_DRF_arc_center,
UF_DRF_tangency,
UF_DRF_dwg_pos,
UF_DRF_utility_symbol,
second object is ignored
assoc_dwg_pos [ 2 ]
double
if object_assoc_type = UF_DRF_dwg_pos,
assoc_dwg_pos[0] = x drawing abs coordinate
assoc_dwg_pos[1] = y drawing abs coordinate
if object_assoc_type = UF_DRF_intersection,
intersection closest to assoc_dwg_pos
if object_assoc_type = UF_DRF_end_point,
UF_DRF_arc_center, UF_DRF_tangency,
or UF_DRF_utility_symbol, assoc_dwg_pos is
ignored

------------

UF_DRF - UF_DRF_orddimension_info_s
UF_DRF_orddimension_info_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_orddimension_info_t
UF_DRF_orddimension_info_p_t
Overview
This is a structure to hold ordinate dimension information
Data Members
orddim
UF_DRF_dim_info_t *
orddisp
UF_DRF_orddisp_info_t
dogleg
UF_DRF_dogleg_info_t
dogleg_distance
double
margin_type
UF_DRF_orddim_margin_type_t
margin_offset
double

------------

UF_DRF - UF_DRF_orddisp_info_s
UF_DRF_orddisp_info_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_orddisp_info_t
UF_DRF_orddisp_info_p_t
Overview
This is a structure to hold ordinate dimension origin display
information
Data Members
quadrant
UF_DRF_quadrant_type_t
positive quadrant
name_display
UF_DRF_ordorigin_display_type_t
Ordinate dimension
origin name display type. See
UF_DRF_ordorigin_display_type_t
origin_name [ MAX_LINE_BUFSIZE ]
char
The name of origin
arr_display
UF_DRF_ordarrow_line_type_t
Ordinate dimension
arrow and line display types. See
UF_DRF_ordarrow_line_type_t
symfont
int
Symbol font

------------

UF_DRF - UF_DRF_render_table_s
UF_DRF_render_table_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_render_table_t
UF_DRF_render_table_p_t
Data Members
begin_line
UF_DRF_begin_line_fn_t
end_line
UF_DRF_end_line_fn_t
set_to_position
UF_DRF_set_to_position_fn_t
draw_to_position
UF_DRF_draw_to_position_fn_t
draw_arc
UF_DRF_draw_arc_fn_t
draw_char
UF_DRF_draw_char_fn_t
draw_standard_font_string
UF_DRF_draw_standard_font_string_fn_t
If the draw_standard_font_string field is not NULL then it
will get called to display a string that uses a standard font
instead of using stroke lines to display the standard font string
draw_user_symbol
UF_DRF_draw_user_symbol_fn_t
set_cfw
UF_DRF_set_cfw_fn_t
push_orientation
UF_DRF_push_orientation_fn_t
pop_orientation
UF_DRF_pop_orientation_fn_t
fill_region
UF_DRF_fill_region_fn_t
standardFontFunCharSize
double
The character size that corresponds to the font size
passed into the draw_standard_font_string function.

------------

UF_DRF - UF_DRF_stroke_info_s
UF_DRF_stroke_info_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_stroke_info_t
UF_DRF_stroke_info_p_t
Overview
This is a structure to hold the User Defined Symbol
stroke data information.
Data Members
pen_status
UF_DRF_ud_symbol_pen_type_t
UF_DRF_UD_SYMBOL_DRAW= draw,
UF_DRF_UD_SYMBOL_MOVE = move
x_length
int
Integerized X value in the range
0-127, representing a number from
0 to the symbol length
y_length
int
Integerized Y value in the range
0-127, representing a number from
0 to the symbol length

------------

UF_DRF - UF_DRF_symbol_connection_s
UF_DRF_symbol_connection_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_symbol_connection_t
UF_DRF_symbol_connection_p_t
Overview
This structure contains the information which defines a leader connection
for a Custom Symbol.
Data Members
connection_type
UF_DRF_symbol_connection_type_t
Description of the connection type (e.g. Left or right)
connection_point
tag_t
The tag of the connection point

------------

UF_DRF - UF_DRF_symbol_create_data_s
UF_DRF_symbol_create_data_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_symbol_create_data_t
UF_DRF_symbol_create_data_p_t
Overview
Symbol Create Data
Data Members
symbol_name [ SYMBOL_NAME_SIZE+1 ]
char
symbol name (8 characters
maximum)
angle
double
angle (in degrees)
length
double
length
height
double
height
anchor_tag
tag_t
point object representing the
location of the anchor point

------------

UF_DRF - UF_DRF_symbol_data_s
UF_DRF_symbol_data_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_symbol_data_t
UF_DRF_symbol_data_p_t
Overview
Symbol Data
Data Members
anchor_point [ 3 ]
double
model space x,y,z of anchor point
orient_point [ 3 ]
double
model space x,y,z of orientation point
angle
double
symbol angle (in degrees)
length
double
symbol length
height
double
symbol height
symbol_font_tag
tag_t
symbol font object tag

------------

UF_DRF - UF_DRF_symbol_instance_s
UF_DRF_symbol_instance_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_symbol_instance_t
UF_DRF_symbol_instance_p_t
Overview
This is a structure to hold embedded user defined symbol
History - This structure was originally released in V15.0.
Data Members
master
tag_t
master symbol
is_gap
logical
TRUE if a gap, else FALSE
origin [ 3 ]
double
symbol origin in csys of annotation
parameter_on_element
double
normalized parameter on line or arc
symbol_length
double
length of symbol
symbol_height
double
height of symbol
creation_mask
int
symbol creation mask
record_number
int
record number in owning component
segment_number
int
segment number of owning component
segment
is_mirrored
logical
TRUE if reflected about its X axis
is_reflected
logical
TRUE if reflected about line between
anchor and connection pt

------------

UF_DRF - UF_DRF_symbol_preferences_s
UF_DRF_symbol_preferences_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_symbol_preferences_t
UF_DRF_symbol_preferences_p_t
Overview
UF_DRF_symbol_preferences_t specifies the preferences for
each NX symbol type.
Data Members
id_symbol_size
double
id_symbol_cfw
UF_DRF_cfw_t
color, font, width
user_defined_symbol_cfw
UF_DRF_cfw_t
color, font, width
centerline_symbol_cfw
UF_DRF_cfw_t
font is not supported
intersection_symbol_cfw
UF_DRF_cfw_t
color, font, width
target_symbol_cfw
UF_DRF_cfw_t
color, font, width
gdt_symbol_cfw
UF_DRF_cfw_t
color, font, width

------------

UF_DRF - UF_DRF_text_cfw_s
UF_DRF_text_cfw_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_text_cfw_t
UF_DRF_text_cfw_p_t
Overview
UF_DRF_text_cfw_t specifies the color, font, and width for a text
Data Members
color
int
Text color
font
int
Text font
width
UF_DRF_line_width_t
Text weight

------------

UF_DRF - UF_DRF_text_s
UF_DRF_text_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_text_t
UF_DRF_text_p_t
Overview
text specification
set the desired TEXT ENTRY MODE preference (with UF_DRF_set_preferences)
to activate the desired component of the text structure
MPI[7] TEXT ENTRY MODE
1 = ONLY AUTOMATIC TEXT
2 = AUTOMATIC TEXT and APPENDED TEXT
3 = ONLY MANUAL TEXT
4 = MANUAL TEXT and APPENDED TEXT
an example of initializing the appended_text element of the structure in a C++ program:
UF_DRF_text_t drf_text;
char appended_text[3][133] = { "Appended Text Line 1",
"Appended Text Line 2",
"Appended Text Line 3" };
drf_text.lines_app_text = 3;
drf_text.appended_text = appended_text;
The type of the appended_text field now specifies the length of
the character string in order to avoid errors from some compilers.
This has the added benefit of eliminating the cast formerly
required in the appended_text field assignment above.
Using the new data type here is an example of initializing the appended_text field
of the UF_DRF_text_t struct in a C++ program:
UF_DRF_text_t             drf_text;
UF_DRF_one_apptext_line_t appended_text[] = { "Appended Text Line 1",
"Appended Text Line 2",
"Appended Text Line 3" };
drf_text.lines_app_text = 3;
drf_text.appended_text = appended_text;
This is the preferred method as there is no longer any dependence on the size of 133.
Data Members
user_dim_text
char *
user supplied dimension text string
lines_app_text
int
number of lines of appended text
appended_text
UF_DRF_one_apptext_line_t *
appended text array

------------

UF_DRF - UF_DRF_ud_symbol_font_info_s
UF_DRF_ud_symbol_font_info_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_ud_symbol_font_info_t
UF_DRF_ud_symbol_font_info_p_t
Overview
This structure contains the User Defined Symbol font information.
Please refer to the following figures
Figure: The two connecting points
Figure: Symbol Height and Symbol Length
Data Members
anchor_point
int
This is integerized x, y value for
anchor point.
bits 0 ~ 6 represent y value and
bits 7 ~ 14 represent x value
orientation_point
int
this is integerized x, y value for
orientation point.
bits 0 ~ 6 represent y value and
bits 7 ~ 14 represent x value
factor
double
User Defined Symbol factor
length
double
User Defined Symbol length
height
double
User Defined Symbol height
num_stroke
int
Number of strokes
stroke_info
UF_DRF_stroke_info_t *
Stroke data stored as data structure
UF_DRF_stroke_info_t

------------

UF_DRF - UF_DRF_uds_size_s
UF_DRF_uds_size_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_uds_size_t
UF_DRF_uds_size_p_t
Overview
Structure defining the length / height or scale / aspect ratio parameters
of embedded or standalone symbols.
Data Members
uds_size_type
UF_DRF_uds_size_type_t
If the uds type is set to UF_DRF_LENGTH_HEIGHT, then the following
parameters are interpreted as ?length and height?. If the uds
type is set to UF_DRF_SCALE_ASPECT_RATIO, then the following
parameters are interpreted as ?scale and aspect ratio?.
length_or_scale
double
height_or_aspect_ratio
double

------------

UF_DRF - UF_DRF_units_format_preferences_s
UF_DRF_units_format_preferences_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_units_format_preferences_t
UF_DRF_units_format_preferences_p_t
Overview
UF_DRF_units_format_preferences_t specifies the preferences for display
of linear and angular dimensions and dual dimension format.
In v17.0, the data structure has changed. An element controlling the units
of the tolerance of angular dimension and an element controlling the zero
suppression for angular dimension have been added. The display leading
zeros option has been removed.
Data Members
dimension_linear_units
UF_DRF_linear_units_t
linear units for primary
value
linear_fraction_type
UF_DRF_fraction_type_t
primary format -
decimal or fractional
decimal_point_character
UF_DRF_decimal_point_character_t
use period or comma for
decimal point
display_trailing_zeros
logical
if TRUE, display zeros
trailing a significant digit
for dimension value
dimension_tolerance_placement
UF_DRF_tolerance_placement_t
placement of tolerance text
relative to dimension text
dimension_angular_format
UF_DRF_angular_units_t
use decimal or
degree [minute] [second]
format for angular nominal format only
dim_angular_format_tolerance
UF_DRF_angular_units_t
use decimal or
degree [minute] [second]
format for angular tolerance format only
angular_suppress_zeros
UF_DRF_angular_suppress_zeros_t
suppress zero options
display all zeros, or
suppress leading zeros, or
suppress any zeros, or
suppress trailing zeros for angular dimension only
dual_dimension_format
UF_DRF_dual_dimension_format_t
set no dual dimension or
specify placement of dual
dimension relative to
primary dimension
dual_dimension_units
UF_DRF_linear_units_t
linear units for secondary
value
dual_fraction_type
UF_DRF_fraction_type_t
secondary format -
decimal or fractional
dual_convert_tolerance
logical
if TRUE, secondary tolerance
value will be computed from
primary tolerance value

------------

UF_DRF - UF_DRF_weld_sym_info_s
UF_DRF_weld_sym_info_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_weld_sym_info_t
UF_DRF_weld_sym_info_p_t
Overview
This is the structure to specify weld symbol information like finish type,
contour type, weld type, angle, number of welds, size and pitch.
Data Members
finish_type
UF_DRF_weld_finish_types_t
finish type
contour_type
UF_DRF_weld_contour_types_t
contour type
weld_type
UF_DRF_weld_symbol_types_t
weld type
size_code
UF_DRF_weld_size_code_t
size code - applicable
only for ISO and DIN
angle [ MAX_LINE_BUFSIZE ]
char
Groove Angle or Countersink
Angle
num_root_depth [ MAX_LINE_BUFSIZE ]
char
Number of Welds or Root
opening or Depth of Weld as
the case may be
size [ MAX_LINE_BUFSIZE ]
char
size of the weld
pitch [ MAX_LINE_BUFSIZE ]
char
pitch of the weld

------------

UF_DRF - UF_DRF_weld_symbols_s
UF_DRF_weld_symbols_s
(view source)
Defined in: uf_drf_types.h
Also known as:
UF_DRF_weld_symbols_t
UF_DRF_weld_symbols_p_t
Data Members
sym_info_top
UF_DRF_weld_sym_info_t
symbols info for top
sym_info_bottom
UF_DRF_weld_sym_info_t
symbols info for
bottom
extension
UF_DRF_weld_sym_ext_type_t
extension
ident_line_type
UF_DRF_weld_ident_line_type_t
type of identification
line
peripheral_flag
int
variable indicating
whether allround symbol
is required or not.
If peripheral_flag = 0,
then no allround symbol.
If peripheral_flag = 1,
then allround symbol
is required
field_flag
int
value for field flag
field_flag = 0 for weld
at site;
field_flag= 1 for weld
at field
staggered_flag
int
indicates whether weld is
staggered or not.
staggered_flag = 0 for
non-staggered welds;
staggered_flag = 1 for
staggered welds
center_flag
int
indicates whether weld to
be centered with respect
to reference line.
Applicable for spot and
seam welds only.
center_flag = 0 => donot
center;
center_flag = 1 => center
num_lines
int
number of lines of
reference text
symbol_standard [ UF_OBJ_NAME_BUFSIZE ]
char
standard for the weld
symbol. Has to be one
among the following :
ANSI, ISO, DIN, JIS.
reference_text
char * *
multi line reference
text
scale_factor
double
scale factor to be used
for creating the welding
symbol

------------

UF_EPLIB_TYPES - UF_EPLIB_charx_s
UF_EPLIB_charx_s
(view source)
Defined in: uf_eplib_types.h
Also known as:
UF_EPLIB_charx_t
UF_EPLIB_charx_p_t
UF_ROUTE_charx_p_t
UF_ROUTE_charx_t
Overview
Characteristic description
Data Members
type
int
see UF_ELIB_type_e
title [ UF_ATTR_MAX_TITLE_BUFSIZE ]
char
Charx title
value
UF_EPLIB_charx_value_u_t

------------

UF_EPLIB_TYPES - UF_EPLIB_charx_value_u
UF_EPLIB_charx_value_u
(view source)
Defined in: uf_eplib_types.h
Also known as:
UF_EPLIB_charx_value_u_t
UF_EPLIB_charx_value_u_p_t
Overview
Characteristic Value Structure
Data Members
i_value
int
UF_EPLIB_CHARX_TYPE_INT - Integer charx value
r_value
double
UF_EPLIB_CHARX_TYPE_REAL - Real charx value
s_value
char *
UF_EPLIB_CHARX_TYPE_STR - String charx value
UF_EPLIB_CHARX_TYPE_INT_EXPR - Expression integer charx value
UF_EPLIB_CHARX_TYPE_REAL_EXPR - Expression real charx value
UF_EPLIB_CHARX_TYPE_STR_EXPR - Expression string charx value

------------

UF_EPLIB_TYPES - UF_EPLIB_multi_val_charx_s
UF_EPLIB_multi_val_charx_s
(view source)
Defined in: uf_eplib_types.h
Also known as:
UF_EPLIB_multi_val_charx_t
UF_EPLIB_multi_val_charx_p_t
Overview
Multi valued characteristic definition.  Typically used for Specification
characteristics in an application view.
Data Members
type
UF_ELIB_type_e
title [ UF_ATTR_MAX_TITLE_BUFSIZE ]
char
Charx title
num_values
int
Number of possible characteristic values
values
UF_EPLIB_charx_value_u_t *
len:num_values

------------

UF_EPLIB_TYPES - UF_EPLIB_part_lib_part_s
UF_EPLIB_part_lib_part_s
(view source)
Defined in: uf_eplib_types.h
Also known as:
UF_EPLIB_part_lib_part_t
UF_EPLIB_part_lib_part_p_t
UF_ROUTE_part_lib_part_p_t
UF_ROUTE_part_lib_part_t
Data Members
num_charx
int
charx
UF_EPLIB_charx_p_t

------------

UF_EPLIB_TYPES - UF_EPLIB_part_lib_s
UF_EPLIB_part_lib_s
(view source)
Defined in: uf_eplib_types.h
Also known as:
UF_EPLIB_part_lib_t
UF_EPLIB_part_lib_p_t
Data Members
part_number
char *
part_file_name
char *
family_member_name
char *
part_library_view
UF_EPLIB_part_library_view_t *
external_library
char *
part_library_type
int
entry_point
char *

------------

UF_EPLIB_TYPES - UF_EPLIB_part_library_view_node_s
UF_EPLIB_part_library_view_node_s
(view source)
Defined in: uf_eplib_types.h
Also known as:
UF_EPLIB_part_lib_view_node_t
UF_EPLIB_part_lib_view_node_p_t
Data Members
identifier
char *
name
char *
bitmap
char *
filter
char *
table
UF_EPLIB_part_table_t *
num_subnodes
int
subnodes
struct UF_EPLIB_part_library_view_node_s * *

------------

UF_EPLIB_TYPES - UF_EPLIB_part_library_view_s
UF_EPLIB_part_library_view_s
(view source)
Defined in: uf_eplib_types.h
Also known as:
UF_EPLIB_part_library_view_t
UF_EPLIB_part_library_view_p_t
Data Members
name
char *
top
UF_EPLIB_part_lib_view_node_t *

------------

UF_EPLIB_TYPES - UF_EPLIB_part_table_applcx_s
UF_EPLIB_part_table_applcx_s
(view source)
Defined in: uf_eplib_types.h
Also known as:
UF_EPLIB_part_table_applcx_t
UF_EPLIB_part_table_applcx_p_t
Data Members
name
char *
format
char *
appl_columns
char * *
num_appl_col
int

------------

UF_EPLIB_TYPES - UF_EPLIB_part_table_column_s
UF_EPLIB_part_table_column_s
(view source)
Defined in: uf_eplib_types.h
Also known as:
UF_EPLIB_part_table_column_t
UF_EPLIB_part_table_column_p_t
Data Members
type
int
name
char *
hidden
logical
variable
logical

------------

UF_EPLIB_TYPES - UF_EPLIB_part_table_index_s
UF_EPLIB_part_table_index_s
(view source)
Defined in: uf_eplib_types.h
Also known as:
UF_EPLIB_part_table_index_t
UF_EPLIB_part_table_index_p_t
Data Members
row
int
part_number
char *

------------

UF_EPLIB_TYPES - UF_EPLIB_part_table_s
UF_EPLIB_part_table_s
(view source)
Defined in: uf_eplib_types.h
Also known as:
UF_EPLIB_part_table_t
UF_EPLIB_part_table_p_t
Data Members
name
char *
description
char *
image
char *
columns
UF_EPLIB_part_table_column_t * *
num_columns
int
num_rows
int
data
UF_EPLIB_part_table_datum_t *
applied
UF_EPLIB_part_table_applcx_t * *
num_applied
int
load_status
int
pn_index
UF_EPLIB_part_table_index_t *

------------

UF_EVAL - UF_EVAL_arc_s
UF_EVAL_arc_s
(view source)
Defined in: uf_eval.h
Also known as:
UF_EVAL_arc_t
UF_EVAL_arc_p_t
Data Members
is_periodic
logical
Is the curve periodic or not?
limits [ 2 ]
double
Curve limits (in radians): [0] = min; [1] = max
radius
double
Radius
center [ 3 ]
double
Center (ABS coordinates)
x_axis [ 3 ]
double
Unit direction vector of the x axis (ABS)
y_axis [ 3 ]
double
Unit direction vector of the y axis (ABS)

------------

UF_EVAL - UF_EVAL_ellipse_s
UF_EVAL_ellipse_s
(view source)
Defined in: uf_eval.h
Also known as:
UF_EVAL_ellipse_t
UF_EVAL_ellipse_p_t
Data Members
is_periodic
logical
Is the curve periodic or not?
limits [ 2 ]
double
Curve limits: [0] = min; [1] = max
minor
double
Minor radius
major
double
Major radius
center [ 3 ]
double
Center (ABS coordinates)
x_axis [ 3 ]
double
Unit direction vector of the x axis (ABS)
y_axis [ 3 ]
double
Unit direction vector of the y axis (ABS)

------------

UF_EVAL - UF_EVAL_hyperbola_s
UF_EVAL_hyperbola_s
(view source)
Defined in: uf_eval.h
Also known as:
UF_EVAL_hyperbola_t
UF_EVAL_hyperbola_p_t
Data Members
limits [ 2 ]
double
Curve limits: [0] = min [1] = max
k1
double
First coefficient for evaluating hyperbola
k2
double
Second coefficient for evaluating hyperbola
Note that the limits and k1,k2 are values used for
efficient evaluation of the hyperbola and are
not the same as the start/end parameters and k1,k2
of UF_CURVE_ask_conic_data.
center [ 3 ]
double
Center (ABS coordinates)
x_axis [ 3 ]
double
Unit direction vector of the x axis (ABS)
y_axis [ 3 ]
double
Unit direction vector of the y axis (ABS)

------------

UF_EVAL - UF_EVAL_line_s
UF_EVAL_line_s
(view source)
Defined in: uf_eval.h
Also known as:
UF_EVAL_line_t
UF_EVAL_line_p_t
Data Members
length
double
Line length
start [ 3 ]
double
Start point (ABS coordinates)
end [ 3 ]
double
End point (ABS coordinates)
unit [ 3 ]
double
Unit direction vector (ABS coordinates)

------------

UF_EVAL - UF_EVAL_parabola_s
UF_EVAL_parabola_s
(view source)
Defined in: uf_eval.h
Also known as:
UF_EVAL_parabola_t
UF_EVAL_parabola_p_t
Data Members
limits [ 2 ]
double
Curve limits: [0] = min [1] = max
k1
double
Conic coefficient
center [ 3 ]
double
Center (ABS coordinates)
x_axis [ 3 ]
double
Unit direction vector of the x axis (ABS)
y_axis [ 3 ]
double
Unit direction vector of the y axis (ABS)

------------

UF_EVAL - UF_EVAL_spline_s
UF_EVAL_spline_s
(view source)
Defined in: uf_eval.h
Also known as:
UF_EVAL_spline_t
UF_EVAL_spline_p_t
Data Members
is_periodic
logical
Is the curve periodic or not?
is_rational
logical
Is the spline rational or not?
order
int
Order of the spline
num_knots
int
Number of knot values (double)
num_control
int
Number of control vertices (PNT4_t)

------------

UF_EVAL - UF_EVALSF_pos3_s
UF_EVALSF_pos3_s
(view source)
Defined in: uf_evalsf.h
Also known as:
UF_EVALSF_pos3_t
UF_EVALSF_pos3_p_t
UF_EVALSF_pos3_c_t
UF_EVALSF_pos3_pc_t
Overview
Definition for 3D position
Data Members
distance
double
separation between surface and reference point
uv [ 2 ]
double
uv-parameter pair
pnt3 [ 3 ]
double
3D point

------------

UF_FACET - UF_FACET_parameters_s
UF_FACET_parameters_s
(view source)
Defined in: uf_facet.h
Also known as:
UF_FACET_parameters_t
UF_FACET_parameters_p_t
UF_FACET_parameters_c_t
UF_FACET_parameters_pc_t
Overview
From V14.0, the name of this structure was changed from
UF_FACET_faceting_params_s to UF_FACET_parameters_s. Programs written prior
to V14.0 that used this structure must be rewritten.
Please note the following items:
. When a solid body is faceted the faceter is always requested to ensure that
the vertices of facets in adjacent faces match along model edges.
. A macro (UF_FACET_INIT_PARAMETERS) is provided to initialize the structure
to some reasonable value. This macro initializes the version field to the
current version correctly. If this version field is set by the user's
program, the behavior of the program becomes unpredictable.
. The CAM users should ensure that the following guidelines are followed when
faceting to ensure that the model that is generated is marked for use by
CAM processors. If the model does not meet the minimum faceting parametric
requirements, the model is not useable for the CAM processors and the
processors might regenerate the model.
1.  Set the variables in the UF_FACET_parameters_t structure as follows:
-  max_facet_edges = 3
-  number_storage_type = FACET_TYPE_DOUBLE
-  specify_surface_tolerance = true
-  surface_dist_tolerance <= 0.0381 (mm)
-  curve_dist_tolerance  <= 0.0381 (mm)
-  surface_angular_tolerance <= 0.4
-  specify_curve_tolerance = true
-  curve_angular_tolerance <= 0.4
-  specify_parameters = true
-  specify_view_direction = true
-  silh_view_direction[0] = tool_axis i component
-  silh_view_direction[1] = tool_axis j component
-  silh_view_direction[2] = tool_axis k component
-  silh_chord_tolerance <= surface_dist_tolerance/2.0
2.  Create the facet model on the geometry by using this module.
3.  Use the function UF_CAM_PREPRO_mark_model_as_cam to mark the facet
model for recognition by CAM processors.
UF_FACET_faceting_params_s is used both for representing the default faceting
parameters, and for the faceting parameters used to facet a particular solid.
The default faceting parameters are inquired using
UF_FACET_ask_default_parameters and set with UF_FACET_set_default_parameters.
At the start of an Open API program the default faceting parameters are:
max_facet_edges = 3
specify_surface_tolerance = false
specify_curve_tolerance = false
specify_convex_facets = true
specify_max_facet_size = false
number_storage_type = UF_FACET_TYPE_FLOAT
specify_view_direction = false
specify_parameters = false
store_face_tags = false
The following string defined constants specify NULL values for all facet_ids,
vertex_ids, and edge_ids.
UF_FACET_NULL_FACET_ID
UF_FACET_NULL_VERTEX_ID
UF_FACET_NULL_EDGE_ID
Data Members
version
int
The version of this structure.
If UF_FACET_INIT_PARAMETERS macro
is used this field will be initialized
with the proper value. All calls to
the functions
UF_FACET_ask_default_parameters and
UF_FACET_ask_model_parameters
should be preceeded by the use of the
macro to ensure proper initialization of
this member.
max_facet_edges
int
The maximum number of edges allowed
in the facets that are to be generated.
specify_surface_tolerance
logical
If this value is true, then
values must be specified for
surface_dist_tolerance
and surface_angular_tolerance. If
this value is false then values for
surface_dist_tolerance and
surface_angular_tolerance will be
determined by the system based on the
body box or face box of the solid entity
being faceted.
surface_dist_tolerance
double
This is the maximum distance from
the surface to the facet.
surface_angular_tolerance
double
This is the maximum angular variation
in radians of the surface normal
over the facet. A value of zero
indicates no constraint.
specify_curve_tolerance
logical
This indicates that values are to be
specified for curve_dist_tolerance
and curve_angular_tolerance and
curve_max_length. If this value is false
then values for curve_dist_tolerance
and curve_angular_tolerance will be
determined by the system based on the
body box or face box of the solid
entity being faceted, and no restriction
will be placed on the maximum length
of curve that can be represented
by a single facet edge.
curve_dist_tolerance
double
This is the maximum distance between
the facet edge and the curve segment
represented by the facet edge. This
applies only to those facet edges lying
along solid edges.
curve_angular_tolerance
double
This is the maximum angular variation
in radians of the curve tangent along
the curve segment represented by the
facet edge. This applies only to those
facet edges lying along solid edges.
A value of zero indicates no constraint.
curve_max_length
double
specify_convex_facets
logical
This indicates that the facets
generated by the faceter should all be
convex
specify_max_facet_size
logical
This indicates that a maximum width of
facet is to be specified using
max_facet_size. If this field is false
then no maximum facet size is imposed.
max_facet_size
double
This is the maximum width of a facet.
This is only used if
specify_max_facet_size is TRUE.
number_storage_type
int
This indicates whether the real
numbers for facet vertices and facet
normals should be stored as floats
(UF_FACET_TYPE_FLOAT) or as doubles
(UF_FACET_TYPE_DOUBLE). Note that this
option applies only when a faceted model
is being created, and is ignored when the
model is updated.
specify_parameters
logical
This indicates that the model will be
created with the parametric information
for each vertex. Should parameters at
the vertices be obtained for the facets
of the model.
specify_view_direction
logical
Should we use a viewing direction
for denser faceting around
silhouettes. The denser faceting will
honor the tolerance specified by
silh_chord_tolerance in the silhouette
with respect to the view direction
specified by silh_view_direction vector.
If this is false, there is no special
consideration for any silhouette area.
silh_view_direction [ 3 ]
double
If use_view_direction is specified,
then this is the view direction to use.
silh_chord_tolerance
double
If use_view_direction is specified
then this is the tolerance which will be
used as a tighter surface tolerance
in the silhouette area specified
by the view direction.
store_face_tags
logical
Should this FACET body record face
tags or not. Note that this must be set
to "true" for the functions
UF_FACET_ask_solid_face_of_face_id,
UF_FACET_ask_solid_face_of_facet, and
UF_FACET_ask_face_id_of_solid_face to
return meaningful results.

------------

UF_FAM - UF_FAM_attribute_data_s
UF_FAM_attribute_data_s
(view source)
Defined in: uf_fam_types.h
Also known as:
UF_FAM_attribute_data_t
UF_FAM_attribute_data_p_t
Data Members
subtype
int
A flag indicating the attribute type.
base_object
tag_t
The object this family attribute is
based on.
When subtype is set to
UF_fam_attr_text_subtype,
base_object should be set to NULL_TAG.
When subtype is set to
UF_fam_attr_numeric_subtype,
base_object should be set to NULL_TAG.
When subtype is set to
UF_fam_attr_integer_subtype,
base_object should be set to NULL_TAG.
When subtype is set to
UF_fam_attr_double_subtype,
base_object should be set to NULL_TAG.
When subtype is set to
UF_fam_attr_string_subtype,
base_object should be set to NULL_TAG.
When subtype is set to
UF_fam_attr_part_subtype,
base_object should be set to a part
attribute tag.
When subtype is set to
UF_fam_attr_name_subtype,
base_object should be set to NULL_TAG.
When subtype is set to
UF_fam_attr_instance_subtype,
base_object should be set to an
instance_tag.
When subtype is set to
UF_fam_attr_exp_subtype,
base_object should be set to an
expression tag.
When subtype is set to
UF_fam_attr_mirror_subtype,
base_object should be set to a mirror
feature tag.
When subtype is set to
UF_fam_attr_density_subtype,
base_object should be set to a solid
body tag.
When subtype is set to
UF_fam_attr_feature_subtype,
base_object should be set to a
suppressible feature tag.
rules
char *
The rules for the attribute. (NOT USED)
value
char *
The current value of the attribute.
name
char *
The name for the attribute.

------------

UF_FAM - UF_FAM_class_data_s
UF_FAM_class_data_s
(view source)
Defined in: uf_fam_types.h
Also known as:
UF_FAM_class_data_t
UF_FAM_class_data_p_t
Data Members
subtype
int
A flag indicating the type of
attributes in this class.
Valid values are :
UF_fam_attr_text_subtype
UF_fam_attr_numeric_subtype
UF_fam_attr_integer_subtype
UF_fam_attr_double_subtype
UF_fam_attr_string_subtype
UF_fam_attr_part_subtype
UF_fam_attr_name_subtype
UF_fam_attr_instance_subtype
UF_fam_attr_exp_subtype
UF_fam_attr_mirror_subtype
UF_fam_attr_density_subtype
UF_fam_attr_feature_subtype
attribute_count
int
The number of attributes
in this class
attribute_data
UF_FAM_attribute_data_t *
An array of family
attribute structures(see
below).
Each attribute structure
represents a member of the
attribute class.
name
char *
The name of the attribute class.

------------

UF_FAM - UF_FAM_family_data_s
UF_FAM_family_data_s
(view source)
Defined in: uf_fam_types.h
Also known as:
UF_FAM_family_data_t
UF_FAM_family_data_p_t
Data Members
subtype
int
A flag indicating which type of family
this is. Currently this can only be set to
UF_fam_part_subtype
attribute_count
int
The number of attributes of the
family.
member_count
int
The number of members in the family.
attributes
tag_t *
An array of family attribute tags which
describe the parameters of the family.
name
char *
The name for the family.

------------

UF_FAM - UF_FAM_intent_data_s
UF_FAM_intent_data_s
(view source)
Defined in: uf_fam_types.h
Also known as:
UF_FAM_intent_data_t
UF_FAM_intent_data_p_t
Data Members
family
tag_t
The family involved in the intent.
member_index
int
Desired family member...used
only when attribute_count equals
zero.
attribute_count
int
The number of family
attributes involved in the
intent
attributes
tag_t *
An array of attribute tags.
match_criteria
char * *
The match criteria for this
intent...one per attribute.
NOTE: The match_criteria field
only requires an attribute value
for part and feature attributes.
All other attributes must be
initialized with both the
name and value
(e.g. "<attribute_name> ==
<attribute_value>".
name
char *
The name of the intent

------------

UF_FAM - UF_FAM_member_data_s
UF_FAM_member_data_s
(view source)
Defined in: uf_fam_types.h
Also known as:
UF_FAM_member_data_t
UF_FAM_member_data_p_t
Data Members
value_count
int
The number of member values.
values
char * *
An array of values for this
member. When this array of values
is returned from an enquiry
function, each value is dynamically
allocated, and must be freed with
UF_free.

------------

UF_FORGEO - UF_FORGEO_forsurf_s
UF_FORGEO_forsurf_s
(view source)
Defined in: uf_forgeo.h
Also known as:
UF_FORGEO_forsurf_t
UF_FORGEO_forsurf_p_t
Overview
Structure defining the foreign surface.
In the foreign surface structure, the transformation matrix operates as a
post-multiplier on row vectors containing homogenous coordinates as:
(x',y',z',s') = (x,y,z,s)T
where the conventional 3D coordinates are
(x/s,y/s,z/s).
The matrix consists of
0
R     0
0
Tx Ty Tz S
R = a non singular transformation matrix. This matrix contains the rotation,
reflection, local scaling and shearing components.
T = a translation vector
S = a scaling factor that has to be greater than zero.
The subscripts of "transform" corresponding to the above form are:
[0][0]   [1][0]   [2][0]   [3][0]
[0][1]   [1][1]   [2][1]   [3][1]
[0][2]   [1][2]   [2][2]   [3][2]
[0][3]   [1][3]   [2][3]   [3][3]
After initializing the foreign surface data structure you will use
UF_BREP functions to create a body from the surface data.
See Also
description
Data Members
char_data
char *
character string data for surface
nspace
int
space required by surface loader, in doubles
used to define length of "fg_data"
input to registered functions
num_ints
int
number of integers defining surface
int_array
int *
array of integers for surface
num_doubles
int
number of doubles defining surface
double_array
double *
array of doubles for surface
transform [ 4 ]  [ 4 ]
double
4x4 transformation array
the "perspective" elements must be 0.0

------------

UF_GDT - UF_GDT_annotation_tags_s
UF_GDT_annotation_tags_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_annotation_tags_t
UF_GDT_annotation_tags_p_t
Overview
Defines information for annotation data
Data Members
dimension_tags
tag_p_t
num_dimension_tags
int
feature_control_frame_tags
tag_p_t
created as notes
num_feature_control_frame_tags
int
appended_text_tags
tag_p_t
created as notes
num_appended_text_tags
int
num_non_dimensional_leaders
int

------------

UF_GDT - UF_GDT_callout_string_s
UF_GDT_callout_string_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_callout_string_t
UF_GDT_callout_string_p_t
Overview
Defines information for tolerance callout string
Data Members
tolerance
tag_t
Tolerance feature or FCF tag
type
UF_GDT_tolerance_type_t
Tolerance type
string
char *
Callout string for tolerance

------------

UF_GDT - UF_GDT_data_frame_s
UF_GDT_data_frame_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_data_frame_t
UF_GDT_data_frame_p_t
Overview
Contains the data concerning a single data frame for a feature control
frame.
Data Members
tolerance_zone
UF_GDT_tolerance_zone_p_t
Tolerance zone for frame
primary
UF_GDT_datum_reference_p_t
Primary datum reference data
secondary
UF_GDT_datum_reference_p_t
Secondary datum reference data
tertiary
UF_GDT_datum_reference_p_t
Tertiary datum reference data
modifier_data
UF_GDT_modifier_data_p_t
Frame modifiers

------------

UF_GDT - UF_GDT_datum_identifier_s
UF_GDT_datum_identifier_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_datum_identifier_t
UF_GDT_datum_identifier_p_t
Overview
Defines the attributes of a datum identifier
Data Members
datum_label
char *
Datum label of identifier
def_feat
tag_t
OBSOLETE: Unused by System
is_individual
logical
TRUE if datum is individual

------------

UF_GDT - UF_GDT_datum_reference_s
UF_GDT_datum_reference_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_datum_reference_t
UF_GDT_datum_reference_p_t
Overview
Contains data concerning a datum reference located in a feature control
frame. In the case of a multiple datum the first datum listed in the array
is the multiple datum.
Data Members
datum_feature
tag_t
Tolerance feature for
this datum
material_condition
UF_GDT_material_modifier_t *
Array of the datum
reference's material
condition modifiers
num_modifiers
int
Number of modifiers
for datum

------------

UF_GDT - UF_GDT_datum_target_line_s
UF_GDT_datum_target_line_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_datum_target_line_t
UF_GDT_datum_target_line_p_t
Overview
Defines information pertaining to target line data
Data Members
start_point
tag_t
Identifier of line start point (smart pt)
end_point
tag_t
Identifier of line end point (smart pt)
start_data [ 3 ]
double
Absolute position of start point (this is
used for OUTPUT only)
end_data [ 3 ]
double
Absolute position of end point (this is used
for OUTPUT only)
datum_feature
tag_t
Identifier of parent datum
target_index
int
Index of target

------------

UF_GDT - UF_GDT_datum_target_point_s
UF_GDT_datum_target_point_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_datum_target_point_t
UF_GDT_datum_target_point_p_t
Overview
Contains information pertaining to a datum target point.
Data Members
point_on_surface
tag_t
The identifier of the point which defines the
target point
point_data [ 3 ]
double
The actual position of the target on their
referencing plane
datum_feature
tag_t
The identifier of the datum feature that the
target constrains
target_index
int
The identifier of the target point

------------

UF_GDT - UF_GDT_depth_tolerance_s
UF_GDT_depth_tolerance_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_depth_tolerance_t
UF_GDT_depth_tolerance_p_t
Overview
Defines the attributes of a depth tolerance . These are used by the depth
tolerance ask and set routines. The values of the upper and
lower tolerance values are both ADDED to the nominal value to obtain the
overall tolerance for the feature.
Functions affected by the modification of this structure are:
UF_GDT_ask_depth_tolerance_parms
UF_GDT_set_depth_tolerance_parms
Data Members
nominal_value
double
Nominal value of tolerance
upper_tol
UF_GDT_tolerance_value_t
Upper tolerance value
lower_tol
UF_GDT_tolerance_value_t
Lower tolerance value
tol_format
UF_GDT_tol_format_t
Displayed format of the
depth tol
decimal_format
int
Nominal Precision

------------

UF_GDT - UF_GDT_description_s
UF_GDT_description_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_description_t
UF_GDT_description_p_t
Overview
Defines the attributes required to describe a tolerance feature
Alternatively the name and description of the tolerance feature may be
manipulated directly using character strings and the UF_OBJ_read/write
routines
Data Members
name
char *
Name of the tolerance feature/datum
NOTE :
. The name supplied may not be NULL.
. The name supplied must be unique within the
context of the tolerancing module.
. The name must be less than 31 characters in length.
description
char *
Description of the tolerance feature
NOTE : The description supplied is user defined and
may be NULL.

------------

UF_GDT - UF_GDT_directed_dimension1_s
UF_GDT_directed_dimension1_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_directed_dimension1_t
UF_GDT_directed_dimension1_p_t
Data Members
type
UF_GDT_directed_dimension_type_t
Type of directed
dimension
size_data
UF_GDT_size_tolerance_p_t
Size data for the
dimension
origin
tag_t
Tag of the origin
tolerance feature.
OBSOLETE IN V17.0
origin_surfs
UF_GDT_surface_parms_p_t
Surface data for the
origin feature.
origin_def
UF_GDT_geometric_definition_t
Definition for the
origin feature.

------------

UF_GDT - UF_GDT_directed_dimension_s
UF_GDT_directed_dimension_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_directed_dimension_t
UF_GDT_directed_dimension_p_t
Overview
Defines information for directed dimensions data
Data Members
type
UF_GDT_directed_dimension_type_t
Type of directed
dimension
size_data
UF_GDT_size_tolerance_t
Size data for the
dimension
origin
tag_t
Tag of the origin
tolerance feature.
OBSOLETE IN V17.0
origin_surfs
UF_GDT_surface_parms_p_t
Surface data for the
origin feature.
origin_def
UF_GDT_geometric_definition_t
Definition for the
origin feature.

------------

UF_GDT - UF_GDT_drf_data_s
UF_GDT_drf_data_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_drf_data_t
UF_GDT_drf_data_p_t
Overview
Represents a datum reference frame object
Data Members
name
char *
Name of datum reference frame
description
char *
Description of datum reference
frame
primary
UF_GDT_drf_reference_p_t
Primary datum reference data
secondary
UF_GDT_drf_reference_p_t
Secondary datum reference data
tertiary
UF_GDT_drf_reference_p_t
Tertiary datum reference data

------------

UF_GDT - UF_GDT_drf_reference_s
UF_GDT_drf_reference_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_drf_reference_t
UF_GDT_drf_reference_p_t
Overview
Contains data concerning a datum reference located in a feature control
frame. In the case of a multiple datum the first datum listed in the array
is the multiple datum.
Data Members
datum_reference
UF_GDT_datum_reference_t
definition
tag_t

------------

UF_GDT - UF_GDT_fcf_s
UF_GDT_fcf_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_fcf_t
UF_GDT_fcf_p_t
Overview
Defines the information for a feature control frame (geometric tolerance)
used by add, ask, create, and set routines.
Data Members
characteristic
UF_GDT_characteristic_t
Type of geometric tolerance
num_frames
int
The number of frames in the
geometric tolerance call-out
data_frame
UF_GDT_data_frame_p_t
Array of data frames for the
fcf

------------

UF_GDT - UF_GDT_feature_parms_s
UF_GDT_feature_parms_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_feature_parms_t
UF_GDT_feature_parms_p_t
Overview
Defines the set of general properties for the tolerance feature. This data
is common to all tolerance features.
Functions affected by the modification of this structure are:
UF_GDT_create_datum_identifier
UF_GDT_create_datum_multiple
UF_GDT_create_fcf
UF_GDT_create_size_tolerance
UF_GDT_ask_feature_parms
Data Members
num_faces
int
Number of faces in the tolerance
feature specification.
NOTE: For wall thickness use
sets member below.
face_list
tag_t *
Array of faces that describe the
tolerance feature.
NOTE: For wall thickness use
sets member below.
For spline/gear features, use sets member below.
descript
UF_GDT_description_p_t
The unique name and Description of
the tolerance feature
feature
UF_GDT_feature_type_t
Geometric feature type of the
tolerance feature
pattern
UF_GDT_pattern_type_t
Pattern type of the tolerance
feature
modifier_data
UF_GDT_modifier_data_p_t
Tolerance feature Modifier
data
num_sets
int
Number of distinct sets of surfaces
for this feature
NOTE: To use face_list member
set this argument to 0.
sets
UF_GDT_surface_parms_p_t *
Array of surface sets for this
feature
def
UF_GDT_geometric_definition_t
Geometric Definition for this
feature
num_modl_sets
int
Number of modeling features sets
NOTE: To use sets or face_list member,
set this argument to 0.
modl_sets
UF_GDT_modl_data_p_t *
Modeling feature data sets for
tolerance feature creation

------------

UF_GDT - UF_GDT_geometric_definition_s
UF_GDT_geometric_definition_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_geometric_definition_t
UF_GDT_geometric_definition_p_t
Overview
Defines information for feature definition data
Data Members
type
UF_GDT_geometric_definition_type_t
Type of definition
so_tag
tag_t
Smart object of definition
radius
double
UNUSED
trimmed_sheet
tag_t
Trimmed sheet of region
definition

------------

UF_GDT - UF_GDT_keyword_s
UF_GDT_keyword_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_keyword_t
UF_GDT_keyword_p_t
Overview
Defines structure to return keyword data
Data Members
id
UF_GDT_keyword_id_t
Keyword id

------------

UF_GDT - UF_GDT_leader_spec_s
UF_GDT_leader_spec_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_leader_spec_t
UF_GDT_leader_spec_p_t
Overview
Defines information for leader data
Data Members
view
tag_t
Tag of view the leader terminates in
terminator
tag_t
Tag of object leader is attached to
attach_point
UF_GDT_point_t
Point of the leader's terminator
stub_points [ 2 ]
UF_GDT_point_t
Stub start and end points. Used only
in UF_GDT__ask_leader, not used for
leader creation.
num_intermediates
int
Number of intermediate points
intermediates
UF_GDT_point_p_t
Array of intermediate leader points.
Stored from terminator to callout.
Does not include stub points or the
leader terminator point.
type
UF_GDT_leader_type_t
The type of leader's arrowhead
is_profile_leader
logical
Is the leader a profile leader
filled
logical
Is the leader's arrowhead filled?
all_around
logical
Is the leader an all_around leader?
all_around_diameter
double
Diameter of the all around symbol
dot_diameter
double
Diameter of dot, if a dot terminator
arrowhead_length
double
Length of the leader arrowhead
arrowhead_angle
double
Angle of leader arrowhead (Degrees)
stub_length
double
Length of the leader's stub
direction
UF_GDT_stub_direction_t
Direction of the leader's stub
profile_term2
tag_t
2nd profile leader attachment object
profile_attach
UF_GDT_point_t
2nd profile leader attachment point
profile_ldr_length
double
Length of the 2nd profile leader
leader_color
int
Color of the leader
leader_font
int
Font of the leader
leader_width
int
(Line) Width of the leader
This width should be described
using the UF_OBJ_WIDTH definitions
in uf_obj.h
arrowhead_color
int
Color of the leader's arrowhead
arrowhead_font
int
Font of the leader's arrowhead
arrowhead_width
int
(Line) Width of leader's arrowhead
This width should be described
using the UF_OBJ_WIDTH definitions
in uf_obj.h
arrow_info
UF_DRF_arrow_info_t
Structure about the terminator.
Used only with UF_GDT__ask_leader, not
for leader creation.
Arrow_info includes:
arrow sequence number
arrowhead type
arrowhead fill
arrowhead origin
arrowhead angle (Radians)
arrowhead include angle (Radians)
arrowhead height/length
arrowhead width

------------

UF_GDT - UF_GDT_limits_and_fits_data_s
UF_GDT_limits_and_fits_data_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_limits_and_fits_data_t
UF_GDT_limits_and_fits_data_p_t
Data Members
deviation
char *
Fundamental deviation letter
fit_type
char *
Type of fit system
fit_grade
int
Fit grade
tol_grade
int
Tolerance grade
dim_precision
int
Nominal dimension precision
display_type
UF_GDT_limits_and_fits_display_type_t
Instance display type

------------

UF_GDT - UF_GDT_limits_and_fits_tolerance_s
UF_GDT_limits_and_fits_tolerance_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_limits_and_fits_tolerance_t
UF_GDT_limits_and_fits_tolerance_p_t
Data Members
limits_and_fits_data
UF_GDT_limits_and_fits_data_p_t
Limits and fits data
plus_minus_data
UF_GDT_size_tolerance_p_t
Plus minus data

------------

UF_GDT - UF_GDT_modifier_data_s
UF_GDT_modifier_data_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_modifier_data_t
UF_GDT_modifier_data_p_t
Overview
Defines information for the various modifications and refinements for a
feature control frame
The UF_GDT_MAX_BONUS frame modifier requires that the bonus_tol field be set.
Data Members
num_modifiers
int
Number of modifiers
modifier_types
UF_GDT_modifier_types_t *
Array of modifier types
proj_zone
UF_GDT_proj_zone_t *
Projected zone data
unit_length
UF_GDT_unit_basis_t *
Unit basis length data
unit_area
UF_GDT_unit_basis_t *
Unit basis area data
statistics
UF_GDT_statistical_info_t *
Statistical data
bonus_tol
UF_GDT_tolerance_value_t *
Maximum bonus tolerance data
num_keywords
int
Number of keywords
keywords
UF_GDT_keyword_p_t
Array of keywords

------------

UF_GDT - UF_GDT_modl_data_s
UF_GDT_modl_data_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_modl_data_t
UF_GDT_modl_data_p_t
Overview
The following data structure contains modeling feature data. Currently,
tolerance feature can reference following NX modeling features -
1. Simple Hole
2. Counterbore Hole
3. Countersink Hole
4. Extrusion/Revolution
5. Boss
6. Edge Blend
7. Rectangular Pad
8. Rectangular Slot
9. Ball End Slot
10. U Slot
11. T Slot
12. Cylindrical Pocket
13. Rectangular Pocket
14. Symbolic Thread
This data can be used in create/ask/set routines for modeling  based
tolerance features.
Data Members
num_modl_features
int
Number of modeling features
modl_feature_list
tag_p_t
Modeling feature list
modl_param
UF_GDT_modl_parameter_t
Modeling feature parameter to use for
face mapping between modeling feature and
tolerance feature
face_map
tag_t
Object to use for inter part face mapping
face_map = NULL_TAG, for tolerance
feature in piece part
= Part occurrence tag, for
tolerance feature in assembly part
= Linked feature tag, for tolerance
feature referencing wave linked
geometry

------------

UF_GDT - UF_GDT_multiple_datum_s
UF_GDT_multiple_datum_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_multiple_datum_t
UF_GDT_multiple_datum_p_t
Overview
Contains information used by the multiple datum add, ask, create, and set
routines.
Data Members
num_datums
int
Number of datum identifiers that
define the multiple datum
datum_features
tag_t *
Array of datum features referenced
by the geometric tolerance
def_feat
tag_t
Where multiple feature types are
possible a defining model feature
for the multiple datum

------------

UF_GDT - UF_GDT_point_s
UF_GDT_point_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_point_t
UF_GDT_point_p_t
Overview
Defines coordinates of a 3-D point
Data Members
coords [ 3 ]
double

------------

UF_GDT - UF_GDT_product_attribute_s
UF_GDT_product_attribute_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_product_attribute_t
UF_GDT_product_attribute_p_t
Overview
The following data structure contains the product attributes for the tolerance feature.
Please refer <uf_pd_types.h> for detailed description of product attributes.
Data Members
num_attributes
int
Number of product attributes.
attributes
UF_PD_product_attribute_p_t
List of product attributes.

------------

UF_GDT - UF_GDT_proj_zone_s
UF_GDT_proj_zone_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_proj_zone_t
UF_GDT_proj_zone_p_t
Data Members
expression
tag_t
Tolerance value represented by an expression
value
double
Actual value of the tolerance
decimal_format
int
Number of digits to right of decimal point
direction
tag_t
The direction of the zone

------------

UF_GDT - UF_GDT_size_tolerance_s
UF_GDT_size_tolerance_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_size_tolerance_t
UF_GDT_size_tolerance_p_t
Overview
Defines the attributes of a size tolerance . These are used by the size
tolerance add, ask, create, and set routines. The values of the upper and
lower tolerance values are both ADDED to the nominal value to obtain the
overall tolerance for the feature.
Functions affected by the modification of this structure are:
UF_GDT_add_size_tolerance
UF_GDT_create_size_tolerance
UF_GDT_ask_size_tolerance_parms
UF_GDT_ask_size_tolerance_tag
UF_GDT_set_size_tolerance_parms
Data Members
value_type
UF_GDT_size_value_type_t
Type of size tolerance value
dimension
tag_t
Tolerance value's dimension
identifier
NOTE: This field is no longer
used and will always return
a NULL_TAG.
nominal_value
double
Nominal value of tolerance
upper_tol
UF_GDT_tolerance_value_t
Upper tolerance value
lower_tol
UF_GDT_tolerance_value_t
Lower tolerance value
tol_format
UF_GDT_tol_format_t
Displayed format of the
size tol
modifier_data
UF_GDT_modifier_data_p_t
Modifier data
decimal_format
int
Nominal Precision

------------

UF_GDT - UF_GDT_statistical_info_s
UF_GDT_statistical_info_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_statistical_info_t
UF_GDT_statistical_info_p_t
Overview
Information used to apply statistical information to a tolerance
specification (will evolve to accept additional statistical data)
Data Members
other_statistical_data
void *
Statistical data as needed

------------

UF_GDT - UF_GDT_surface_parms_s
UF_GDT_surface_parms_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_surface_parms_t
UF_GDT_surface_parms_p_t
Overview
Defines the surfaces of a feature.  These are used by the ask, create, and
set routines for tolerance feature. They are also used to define the
origin surfaces for directed dimensions.
Functions affected by the modification of this structure are:
UF_GDT_ask_directed_dimension
UF_GDT_ask_feature_parms
UF_GDT_create_datum_identifier
UF_GDT_create_fcf
UF_GDT_create_instance
UF_GDT_create_size_tolerance
UF_GDT_set_directed_dimension
Data Members
num_faces
int
Number of faces that define
the current surface
faces
tag_p_t
Set of face tags

------------

UF_GDT - UF_GDT_target_cyl_area_s
UF_GDT_target_cyl_area_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_target_cyl_area_t
UF_GDT_target_cyl_area_p_t
Overview
Defines information for cylindrical target area
Data Members
datum_feature
tag_t
Parent datum feature
target_index
int
Unique index of datum target
start_point
tag_t
Identifier of start point locating
the start point of the target
end_point
tag_t
Identifier of end point locating
the end point of the target
start_location [ 3 ]
double
Absolute position of start point
(output only)
end_location [ 3 ]
double
Absolute position of end point
(output only)

------------

UF_GDT - UF_GDT_target_dia_area_s
UF_GDT_target_dia_area_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_target_dia_area_t
UF_GDT_target_dia_area_p_t
Overview
Defines the parameters for constructing a circular or annular datum
target area.
Data Members
datum_feature
tag_t
The tag of the parent datum feature the target
is to be applied to.
target_index
int
Datum target index to assign to new datum
targets. On creation, the target index must be
unique in the context of the other datum targets
on the feature.
point
tag_t
Identifier of smart point locating the center
of the target.
diameter
UF_GDT_tolerance_value_t
Size of the outer datum target area diameter
inner_dia
UF_GDT_tolerance_value_t
Size of the inner diameter for annular areas
is_planar
logical
Is this a planar datum target area?
Creation and Query routines only.
orientation
tag_t
Orientation of area relative to surface.
Should be XFORM tag (see uf_so.h). A
NULL_TAG will default to surface orientation.
location [ 3 ]
double
Absolute position of target (output only)

------------

UF_GDT - UF_GDT_target_non_planar_data_s
UF_GDT_target_non_planar_data_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_target_non_planar_data_t
UF_GDT_target_non_planar_data_p_t
Overview
Defines information for non planar datum target area trim operations
Data Members
project_normals
logical
Project along surface normals or use the
projection vector.
projection_vector [ 3 ]
double
Vector for curves projected along a vector
point_key
int
Point defines region to:
0 = discard or 1 = keep
point_coords [ 3 ]
double
Location of the keep/discard point (ABS)

------------

UF_GDT - UF_GDT_target_rect_area_s
UF_GDT_target_rect_area_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_target_rect_area_t
UF_GDT_target_rect_area_p_t
Overview
Defines information for rectangular target area data
Data Members
datum_feature
tag_t
This corresponds to the tag of the parent datum
feature the target is to be applied to.
target_index
int
Datum target index to assign to new datum
targets. On creation, the target index must be
unique in the context of the other datum targets
on the feature.
point
tag_t
Identifier of smart point locating the center
of the target.
is_planar
logical
Is this a planar datum target area?
Creation and Query routines only.
orientation
tag_t
Orientation of area relative to surface.
Should be XFORM tag (see uf_so.h). A
NULL_TAG will default to surface orientation.
length
UF_GDT_tolerance_value_t
Length of rectangular area
height
UF_GDT_tolerance_value_t
Height of rectangular area
location [ 3 ]
double
Absolute position of target (output only)

------------

UF_GDT - UF_GDT_target_udef_area_s
UF_GDT_target_udef_area_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_target_udef_area_t
UF_GDT_target_udef_area_p_t
Overview
Defines information for user defined target area data
Data Members
datum_feature
tag_t
This corresponds to the tag of the parent datum
feature the target is to be applied to.
target_index
int
Datum target index to assign to new datum
targets. On creation, the target index must be
unique in the context of the other datum targets
on the feature.
curves
tag_p_t
Array of curves defining the user defined area.
If planar, then the curves must for a closed
planar loop.
If not planar, then the curves will be used with
np_data to create the area.
num_curves
int
Number of curves in the array
is_planar
logical
Is this a planar datum target area?
Creation and Query routines only.
np_data
struct UF_GDT_target_non_planar_data_s

------------

UF_GDT - UF_GDT_thread_data_s
UF_GDT_thread_data_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_thread_data_t
UF_GDT_thread_data_p_t
Data Members
pitch_dia_grade
int
Tolerance grade based on pitch diameter
pitch_dia_deviation
char*
Deviation based on pitch diameter
grade
int
Tolerance grade based on major/minor diameter
deviation
char*
Deviation based on major/minor diameter
thread_class
int
Thread class for ANSI non-metric threads

------------

UF_GDT - UF_GDT_thread_tolerance_s
UF_GDT_thread_tolerance_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_thread_tolerance_t
UF_GDT_thread_tolerance_p_t
Data Members
thread_tol
UF_GDT_thread_data_p_t
Thread data
modifier_data
UF_GDT_modifier_data_p_t
Modifier data

------------

UF_GDT - UF_GDT_tolerance_value_s
UF_GDT_tolerance_value_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_tolerance_value_t
UF_GDT_tolerance_value_p_t
Overview
Defines a tolerance for a feature control frame callout
or zone refinement
Data Members
expression
tag_t
Tolerance value represented by an expression.
NOTE: If set to "NULL_TAG", the "value" of the
nominal will be used on input. For output,
the expression will contain the expressions
reference and if created using an expression,
the value will contain the value of that
expression.
value
double
Actual value of the tolerance
decimal_format
int
Number of digits to right of decimal point

------------

UF_GDT - UF_GDT_tolerance_zone_s
UF_GDT_tolerance_zone_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_tolerance_zone_t
UF_GDT_tolerance_zone_p_t
Overview
Information describing the shape of the zone being represented by a
specific feature control frame
Data Members
zone_shape
UF_GDT_zone_shape_t
Shape of the tolerance
zone
planar_ref
tag_t
Object that defines
zone when it is not
defined by the face set
expression
tag_t
Expression for the
tolerance value
value
double
Actual value of the
tolerance
decimal_format
int
Number of digits right
of decimal
material_modifier
UF_GDT_material_modifier_t
Material modifier

------------

UF_GDT - UF_GDT_unit_basis_s
UF_GDT_unit_basis_s
(view source)
Defined in: uf_gdt.h
Also known as:
UF_GDT_unit_basis_t
UF_GDT_unit_basis_p_t
Overview
Defines information pertaining to a unit basis (length/area) refinement
Data Members
tolerance_expression
tag_t
Expression defining tolerance value
length_expression
tag_t
Expression defining unit length
width_expression
tag_t
Expression defining unit width
decimal_format
int
Decimal format of the expressions
ub_decimal_format
int
Decimal format of the length/width
expressions

------------

UF_PART - UF_import_part_modes_s
UF_import_part_modes_s
(view source)
Defined in: uf_part_types.h
Also known as:
UF_import_part_modes_t
UF_import_part_modes_p_t
Overview
Data structure and constants used in part import
History
NX2: plist_mode is no longer used.
Data Members
layer_mode
int
0 = Merge on work layer
1 = Merge on original layers
group_mode
int
0 = Merge ungrouped
1 = Merge grouped
csys_mode
int
Not used by Open API applications
plist_mode
int
NOTE: plist_mode is no longer used
view_mode
int
0 = do not retrieve views and layouts.
1 = retrieve views and layouts.
cam_mode
logical
If true, merge in tools and parameter
sets, if false do not.
use_search_dirs
logical
This is not used by Open API applications.

------------

UF_LAYER - UF_LAYER_category_info_s
UF_LAYER_category_info_s
(view source)
Defined in: uf_layer.h
Also known as:
UF_LAYER_category_info_t
UF_LAYER_category_info_p_t
Data Members
name [ UF_OBJ_NAME_BUFSIZE ]
char
The name of this category.
layer_mask [ UF_LAYER_MAX_LAYER ]
logical
A logical for each layer, does
it belong to this category or not.
layer_mask[0] is TRUE if layer 1
belongs to the category, otherwise
it is false. layer_mask[1] applies
to layer 2, and so on.
descr [ UF_OBJ_NAME_BUFSIZE ]
char
This is the description of this
layer category.

------------

UF_LAYER - UF_LAYER_status_info_s
UF_LAYER_status_info_s
(view source)
Defined in: uf_layer.h
Also known as:
UF_LAYER_status_info_t
UF_LAYER_status_info_p_t
Data Members
layer_number
int
The layer number that this status is for.
Valid layers are UF_LAYER_MIN_LAYER to
UF_LAYER_MAX_LAYER inclusive.
layer_status
int
The layer status. One of the values:
UF_LAYER_WORK_LAYER
UF_LAYER_ACTIVE_LAYER
UF_LAYER_REFERENCE_LAYER
UF_LAYER_INACTIVE_LAYER

------------

UF_DEFS - uf_list_s
uf_list_s
(view source)
Defined in: uf_defs.h
Also known as:
uf_list_p_t
uf_list_t
Data Members
eid
tag_t
Object ID
next
struct uf_list_s *
Pointer to the next OID in the list

------------

UF_MB - UF_MB_action_s
UF_MB_action_s
(view source)
Defined in: uf_mb.h
Also known as:
UF_MB_action_t
UF_MB_action_p_t
Overview
The UF_MB_action_t typedef is used to declare an array of one
or more action structures.  Each structure instance in this
array specifies an action name that matches an action specification
from a menu file, e.g.:
Action registration in ufsta of Open API shared library:
-----------------------------------------------------------
static UF_MB_action_t actionTable[] =
{
{ "select_test",         Select,              NULL  },
{  "curvature",           Curvature,           NULL  },
{  "curing",              Curing,              NULL  },
{  "query",               Query,               NULL  },
{  "open_curve_palette",  persistent_dlg,      NULL  },
{  "close_curve_palette", closePalette,        NULL  },
{  "dialog_test",         persistent_dlg_app2, NULL  },
{  NULL, NULL, NULL}
};
...
UF_MB_add_actions( actionTable );
Menu File exerpt:
-----------------------------------------------------------
BUTTON CURVATURE
LABEL Curvature...
ACTIONS curvature
Data Members
action_name
char *
action_cb
UF_MB_cb_t

------------

UF_MB - UF_MB_application_data_s
UF_MB_application_data_s
(view source)
Defined in: uf_mb.h
Also known as:
UF_MB_application_t
UF_MB_application_p_t
Overview
The UF_MB_application_t structure is used to register a custom
application with NX and specify its characteristics.
Data Members
id
int
The application identifier assigned
to the custom application by
NX. There are currently no
MenuScript API routines that use this
value, but there may be in
the future. This is returned by the
UF_MB routines.
name
char *
The application name. This is
provided by the Open API program.
This name MUST match the name of the
application button used to enter the
application.
init_proc
UF_MB_init_proc_t
This is input by the Open API
program. This is the pointer to the
application's initialization routine.
exit_proc
UF_MB_exit_proc_t
This is input by the Open API
program. This is the pointer to the
application's exit/cleanup method.
enter_proc
UF_MB_enter_proc_t
This is input by the Open API
program. This is the pointer to the
application's main entry point.
drawings_supported
logical
This is input by the Open API
program. Set to true if the custom
application supports drawings.
design_in_context_supported
logical
This is input by the Open API
program. Should be set to true if the
custom application supports design
in context,
e.g. work part different from the
displayed part when in an assembly.
supports_undo
logical
This is input by the Open API
program. Should be set to true if
the custom application supports undo.

------------

UF_MB - UF_MB_cb_s
UF_MB_cb_s
(view source)
Defined in: uf_mb.h
Also known as:
UF_MB_cb_t
UF_MB_cb_p_t
Overview
The UF_MB_cb_t is used to declare a callback and the callback argument
for an action to be specified in a MenuScript menu file.  This
structure is nested within each element of a UF_MB_action_t array that
is passed to UF_MB_add_actions to build a table for binding action
names specified on ACTION statements in menu files to their
corresponding callbacks and callback arguments.
Data Members
cb
UF_MB_callback_t
cb_data
UF_MB_data_t

------------

UF_MB - UF_MB_styler_actions_s
UF_MB_styler_actions_s
(view source)
Defined in: uf_mb.h
Also known as:
UF_MB_styler_actions_t
UF_MB_styler_actions_p_t
Overview
The following structure is used to associate the callbacks of a UIStyler
dialog to a menubar action.  This structure is used with the function
UF_MB_add_styler_actions. You must have associated your UIStyler dlg file to
a push button using MenuScript in order to use UF_MB_add_styler_actions.
Please note that the information for this structure is automatically provided
to you in your template source file.
Data Members
styler_file
char *
The name of the styler file that you wish to
associate your callbacks with.
client_data
void *
This is an address of valid data. Your client
data is passed to all of your callback functions
when they are invoked. Client data is technically
the address of any value; for example, pointers to
variables, data structures or arrays.
callback_list
UF_STYLER_callback_info_p_t
This is the list of
functions that you wish to associate to
your dialog. The UIStyler automatically generates
this list and places it in the file associated
with your ".dlg" file. This list should not be
modified directly. If you wish to alter your
callback list, you must regenerate your template
code from the UIStyler.
is_top_dialog
int
This is an indicator that informs the menubar of
the location of your dialog. UF_STYLER_IS_TOP or
UF_STYLER_IS_NOT_TOP are the acceptable values.

------------

UF_CAM - UF_MFM_recognize_options_s
UF_MFM_recognize_options_s
(view source)
Defined in: uf_mfm.h
Also known as:
UF_MFM_recognize_options_t
UF_MFM_recognize_options_p_t
Overview
The options used in feature recognition.
Environment
Internal  and  External
Data Members
ignore_cad
logical
Ignore CAD features during feature recognition
Set to TRUE if CAD features should be recognzed

------------

UF_MODL - UF_MODL_b_surface_along_driver_normals_data_s
UF_MODL_b_surface_along_driver_normals_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_b_surface_along_driver_normals_data_t
UF_MODL_b_surface_along_driver_normals_data_p_t
Overview
The following structure holds data that is specific to the
UF_MODL_b_surface_along_driver_normals type of quilt surface.
This structure completely defines all creation parameters of this type
of surface.
Data Members
quilt_data
UF_MODL_quilt_data_t
Structure of common
elements of the quilt
feature.
projection_limit
char *
projection distance limit
(= 0 if no limit)
driver_surface
tag_t
driver b-surface

------------

UF_MODL - UF_MODL_b_surface_along_fixed_vector_data_s
UF_MODL_b_surface_along_fixed_vector_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_b_surface_along_fixed_vector_data_t
UF_MODL_b_surface_along_fixed_vector_data_p_t
Overview
The following structure holds data that is specific to the
UF_MODL_b_surface_along_fixed_vector type of quilt surface. This
structure completely defines all creation parameters of this type of
surface.
Data Members
quilt_data
UF_MODL_quilt_data_t
Structure of common
elements of the quilt
feature.
projection_vector [ 3 ]
double
projection vector
driver_surface
tag_t
driver b-surface

------------

UF_MODL - UF_MODL_bead_plane_fixed_s
UF_MODL_bead_plane_fixed_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_bead_plane_fixed_t
Overview
plane_normal_type == UF_MODL_FIXED_DIRECTION
Data Members
normal_direction
UF_MODL_vector_p_t
direction info to define
the normal of the
orientation plane of the
bead sections

------------

UF_MODL - UF_MODL_bead_section_parms_s
UF_MODL_bead_section_parms_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_bead_section_parms_t
UF_MODL_bead_section_parms_p_t
Data Members
shape
UF_MODL_bead_shape_t
cross sectional shape
type of bead
radius
UF_MODL_parm_p_t
radius of the blend
between bead walls and
secondary face if one
is defined or just
between the bead walls
if there isn't one
placement_width
UF_MODL_parm_p_t
width of the bead in
the placement face
placement_width_relative
UF_MODL_bead_width_relative_t
Indication of
how placement width
is measured.
secondary_width
UF_MODL_parm_p_t
width of the bead in
the secondary face
secondary_width_relative
UF_MODL_bead_width_relative_t
When a radius
is specified along with
a secondary width, this
defines how the
secondary width is
measured.
taper_angle
UF_MODL_parm_p_t
angle between the bead
wall and the section
axis at the centerline
taper_angle_relative
UF_MODL_bead_angle_relative_t
Indication of how
the taper angle is
measured.
height
UF_MODL_parm_p_t
height of bead along
the section axis
blend_radius
UF_MODL_parm_p_t
Radius of blend between
side walls and placement
faces
end_cap_radius
UF_MODL_parm_p_t
Radius of the end caps on
a circular bead. This is
measured tangent to the
end of the centerline.
It must be greater than
the height and the
radius.
end_cap_angle
UF_MODL_parm_p_t
Angle of the end cap
taper on the v bead
end_cap_option
UF_MODL_bead_ends_t
Indicates where end
caps should be placed
on the bead
attach
UF_MODL_bead_attach_t
If TRUE, boolean bead
to the target body.
If FALSE, a separate body
will be created.
hollow
UF_MODL_bead_hollow_t
If TRUE, create a hollow
bead which preserves the
thickness of the target
solid body. Only
applicable when attach
is TRUE.

------------

UF_MODL - UF_MODL_bead_section_plane_s
UF_MODL_bead_section_plane_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_bead_section_plane_t
UF_MODL_bead_section_plane_p_t
Overview
This structure is used to define the normal of the orientation plane
for the bead sections.
Data Members
plane_normal_type
UF_MODL_bead_plane_normal_t
Indication of how the
section plan normal is
being defined, either as
a tangent along the
centerline or a fixed
direction.
defined_by
UF_MODL_bead_plane_defined_by_t
Additional information
required if the
plane_normal_type is
UF_MODL_FIXED_DIRECTION.
In this case, this will
be a pointer to direction
information which defines
the fixed normal of the
orientation plane.

------------

UF_MODL - UF_MODL_bend_operation_data_s
UF_MODL_bend_operation_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_bend_operation_data_t
UF_MODL_bend_operation_data_p_t
Overview
Bend operation data
Data Members
operation_type
UF_MODL_bend_operation_e_t
Bend operation type
bend_edge
tag_t
Bend edge
bend_face
tag_t
Bend face
use_adjacent_bend_face
logical
parent_operation
tag_t
Parent operation
target_angle [ UF_MAX_EXP_BUFSIZE ]
char
Target angle
baf [ UF_MAX_EXP_BUFSIZE ]
char
Bend allowance formula
use_global_baf
logical
Use Global BAF switch

------------

UF_MODL - UF_MODL_blend_edge_s
UF_MODL_blend_edge_s
(view source)
Defined in: uf_modl_blends.h
Also known as:
UF_MODL_blend_edge_t
UF_MODL_blend_edge_p_t
Data Members
edge
tag_t
an edge eid or an edge collector eid. Collector
cannot be used for cliff edge blend or used
to specify variable or setback data.
cliff_edge
tag_t
an cliff-edge eid
number_points
int
number of selected points on an edge
start_setback_dis [ UF_MAX_EXP_BUFSIZE ]
char
setback distance of an edge-start point
end_setback_dis [ UF_MAX_EXP_BUFSIZE ]
char
setback distance of an edge-end point
point_data
UF_MODL_blend_point_p_t
point data on an edge

------------

UF_MODL - UF_MODL_blend_faces_create_data_s
UF_MODL_blend_faces_create_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_blend_faces_create_data_t
UF_MODL_blend_faces_create_data_p_t
Data Members
first_set
tag_t *
Array of tags of faces and/or bodies
which make up the first set of
faces.
first_set_size
int
Number of objects in the first_set
array.
flip_first_normal
logical
Determine which side of the first
face from the first set of faces
the blend lies. If TRUE, the
blend lies in the direction of the
face normal.
second_set
tag_t *
Array of tags of faces and/or bodies
which make up the second set of
faces.
second_set_size
int
Number of objects in the second_set
array.
flip_second_normal
logical
Determine which side of the first
face from the second set of faces
the blend lies. If TRUE, the
blend lies in the direction of the
face normal.
propagate
logical
If TRUE, the blend is allowed to
propagate past smooth edges beyond
the provided sets of faces.
cliff_edges
tag_t *
Array of edge tags. The blend is
constrained to be a cliffedge blend
in the region of the given edges.
n_cliff_edges
int
Number of tags in the cliff_edges
array.
thls
tag_t *
Array of edges or curves. The blend
is constrained to be a tangent hold
line blend in the region of the
given edges or curves.
n_thls
int
Number of tages in the thls array.
proj_on_first_set
logical
If TRUE, project thls curves on the
first face set. If FALSE, project
thls curves on the second face set.
This is only used when thls curves
are provided.
end_overflow
logical
If TRUE, allow end tangent and notch
overflow.
blend_tolerance
char *
Tolerance associated with the
blend.
trim_option
UF_MODL_trim_blend_option
Blend trimming option.
radius_type
UF_MODL_blend_radius_type
Blend radius type.
default_radius
char *
Radius for the constant radius
blend.
law_parameters
void *
Law parameters for a law controlled
blend.

------------

UF_MODL - UF_MODL_blend_faces_limit_data_s
UF_MODL_blend_faces_limit_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_blend_faces_limit_data_t
UF_MODL_blend_faces_limit_data_p_t
Data Members
use_start_limit
logical
If TRUE, the blend is trimmed to start
in a constant parameter line determined
by a start limiting plane. The blend
lies on the positive side of the
plane.
start_limit [ 6 ]
double
Definition of the start limit plane
(point and a normal vector).
use_end_limit
logical
If TRUE, the blend is trimmed to end in
a constant parameter line determined
by a start limiting plane. The blend
lies on the positive side of the
plane.
end_limit [ 6 ]
double
Definition of the end limit plane
(point and a normal vector).
use_help_point
logical
If TRUE, use a help point to
differentiate between multiple
alternative possible blends between
the faces. If there is a blend which
passes close to the help point, it is
the one created.
help_point [ 3 ]
double
Coordinates of the help point.

------------

UF_MODL - UF_MODL_blend_point_data_s
UF_MODL_blend_point_data_s
(view source)
Defined in: uf_modl_blends.h
Also known as:
UF_MODL_blend_point_data_t
UF_MODL_blend_point_data_p_t
Overview
Point Data for Variable Radius Structure
Data Members
radius [ UF_MAX_EXP_BUFSIZE ]
char
variable radius at a point
parameter
double
parameter at a point Its the percentage of paramter value
so can have values ranging from 0.0 to 1.0
radius_exp
tag_t
Expression TAG will only be set during Edit, User can edit the
radius string to edit the new value
status
int
When adding Status = 1 and To remove Status = 0

------------

UF_MODL - UF_MODL_blend_point_s
UF_MODL_blend_point_s
(view source)
Defined in: uf_modl_blends.h
Also known as:
UF_MODL_blend_point_t
UF_MODL_blend_point_p_t
Data Members
radius [ UF_MAX_EXP_BUFSIZE ]
char
variable radius at a point
parameter
double
parameter at a point

------------

UF_MODL - UF_MODL_bracket_outline_data_s
UF_MODL_bracket_outline_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_bracket_outline_data_t
UF_MODL_bracket_outline_data_p_t
Data Members
reference_geometry_type
int
0 = Clearance Points, 1 = Edge,
2 = Length. The user can specify
either clearance points to
define the outline, select
an edge or specify a
length (pad or flange)
num_clr_pts
int
Number of clearance points on the
reference/base face. This number
is used only when
reference_geometry_type = 0 ,
i.e when clearance points are
specified . The minimum number of
points can be one and maximum of
two points
data
union UF_MODL_bracket_outline_data_union

------------

UF_MODL - UF_MODL_bsurf_row_info_s
UF_MODL_bsurf_row_info_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_bsurf_row_info_t
UF_MODL_bsurf_row_info_p_t
Data Members
num_points
int
points
double *
weight
double *

------------

UF_MODL - UF_MODL_bsurface_s
UF_MODL_bsurface_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_bsurface_t
UF_MODL_bsurface_p_t
Data Members
num_poles_u
int
num_poles_v
int
order_u
int
order_v
int
is_rational
int
knots_u
double *
knots_v
double *
poles) [ 4 ]
double (*

------------

UF_MODL - UF_MODL_compare_entity_info_s
UF_MODL_compare_entity_info_s
(view source)
Defined in: uf_mdlcmp.h
Also known as:
UF_MODL_compare_entity_info_t
UF_MODL_compare_entity_info_p_t
UF_MODL_compare_edge_info_p_t
Overview
Description:
Collection of entities, features and expressions
Environment
Internal and External
History
This enumeration was originally released in NX 2.0
Data Members
num_entities
int
number of entities
entity_info
UF_MODL_compare_entity_match_t *
array of matching data

------------

UF_MODL - UF_MODL_compare_entity_match_s
UF_MODL_compare_entity_match_s
(view source)
Defined in: uf_mdlcmp.h
Also known as:
UF_MODL_compare_entity_match_t
UF_MODL_compare_entity_match_p_t
UF_MODL_compare_edge_match_p_t
Overview
Description:
Structure for entity, feature and expression matches
Environment
Internal and External
History
This enumeration was originally released in NX 2.0
Data Members
entity_tag
tag_t
entity of body
match_entity
tag_t
matching entity
type
UF_MODL_compare_entity_type_e
classifier
max_deviation
double
maximum deviation calculated among all sampling points for geometry-related entities
avg_deviation
double
average deviation of the sampling points for geometry-related entities

------------

UF_MODL - UF_MODL_compare_options_s
UF_MODL_compare_options_s
(view source)
Defined in: uf_mdlcmp.h
Also known as:
UF_MODL_compare_options_t
UF_MODL_compare_options_p_t
Overview
Description:
Structure for comparison options
Environment
Internal and External
History
This enumeration was originally released in NX 3.0
Note:
This is new structure for NX3.0 version of the functionality
Data Members
version
int
Version number. For internal use.
tolerance
double
Tolerance to be used to determine
if two geometries can be considered
coincident
accuracy
UF_MODL_compare_accuracy_t
Accuracy setting for comparison
compare_feat_and_exp
logical
Whether to compare features and
expressions. Applicable only if
part1 and part2 are related.
identical_face_rule
UF_MODL_compare_identicalface_rule_t
Rule for classifying faces as identical
continue_if_examine_geom_fails
logical
If any body fails in examine
geometry, continue with comparison,
results may not be meaningful
generate_report
logical
generate HTML report for the
compared parts

------------

UF_MODL - UF_MODL_compare_part_entities_data_3_s
UF_MODL_compare_part_entities_data_3_s
(view source)
Defined in: uf_mdlcmp.h
Also known as:
UF_MODL_compare_part_entities_data_3_t
UF_MODL_compare_part_entities_data_3_p_t
Overview
Used as a replacement for UF_MODL_compare_part_entities_data_s in
the common API - Open C API programs may continue to use the original
UF_MODL_compare_part_entities_data_s structure.
Data Members
edges
UF_MODL_compare_entity_info_p_t
edges from part
faces
UF_MODL_compare_entity_info_p_t
faces from part
features
UF_MODL_compare_entity_info_p_t
features from part
expressions
UF_MODL_compare_entity_info_p_t
expressions from part

------------

UF_MODL - UF_MODL_compare_part_entities_data_s
UF_MODL_compare_part_entities_data_s
(view source)
Defined in: uf_mdlcmp.h
Also known as:
UF_MODL_compare_part_entities_data_t
UF_MODL_compare_part_entities_data_p_t
Data Members
edges
UF_MODL_compare_entity_info_t
edges from part
faces
UF_MODL_compare_entity_info_t
faces from part
features
UF_MODL_compare_entity_info_t
features from part
expressions
UF_MODL_compare_entity_info_t
expressions from part

------------

UF_MODL - UF_MODL_compare_part_map_data_3_s
UF_MODL_compare_part_map_data_3_s
(view source)
Defined in: uf_mdlcmp.h
Also known as:
UF_MODL_compare_part_map_data_3_t
UF_MODL_compare_part_map_data_3_p_t
Overview
Description:
Comparison results map data.
Used as a replacement for UF_MODL_compare_part_map_data_s in
the common API - Open C API programs may continue to use the original
UF_MODL_compare_part_map_data_s structure.
Environment
Internal and External
History
This structures is equivalent to UF_MODL_compare_part_map_data_s
only difference is members are pointers instead of objects.
Data Members
part1
UF_MODL_compare_part_entities_data_3_p_t
entities data for part 1
part2
UF_MODL_compare_part_entities_data_3_p_t
entities data for part 2
identical_parts
logical
flag whether parts are
identical

------------

UF_MODL - UF_MODL_compare_part_map_data_s
UF_MODL_compare_part_map_data_s
(view source)
Defined in: uf_mdlcmp.h
Also known as:
UF_MODL_compare_part_map_data_t
UF_MODL_compare_part_map_data_p_t
Overview
Description:
Comparison results map data
Environment
Internal and External
History
This enumeration was originally released in NX 2.0
Data Members
part1
UF_MODL_compare_part_entities_data_t
entities data for part 1
part2
UF_MODL_compare_part_entities_data_t
entities data for part 1
identical_parts
logical
flag whether parts are
identical

------------

UF_CURVE - UF_MODL_curve_fit_data_s
UF_MODL_curve_fit_data_s
(view source)
Defined in: uf_curve.h
Also known as:
UF_MODL_curve_fit_data
UF_CURVE_curve_fit_data
Overview
UF_MODL_curve_fit_data = UF_CURVE_curve_fit_data
Data Members
curve_fit_method
int
curve fit method 0=cubic, 1=quintic, 2=advanced
maximum_degree
int
maximum degree
maximum_segments
int
maximum number of segments

------------

UF_MODL - UF_MODL_curve_mesh_along_driver_normals_data_s
UF_MODL_curve_mesh_along_driver_normals_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_curve_mesh_along_driver_normals_data_t
UF_MODL_curve_mesh_along_driver_normals_data_p_t
Overview
The following structure holds data that is specific to the
UF_MODL_curve_mesh_along_driver_normals type of quilt surface.
This structure completely defines all creation parameters of this type
of surface.
Data Members
quilt_data
UF_MODL_quilt_data_t
Structure of common
elements of the quilt
feature.
projection_limit
char *
projection distance limit
(= 0 if no limit)
primary_curves
UF_STRING_p_t
string of primary curves
cross_curves
UF_STRING_p_t
string of cross curves

------------

UF_MODL - UF_MODL_curve_mesh_along_fixed_vector_data_s
UF_MODL_curve_mesh_along_fixed_vector_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_curve_mesh_along_fixed_vector_data_t
UF_MODLcurve_mesh_along_fixed_vector_data__p_t
Overview
The following structure holds data that is specific to the
UF_MODL_curve_mesh_along_fixed_vector type of quilt surface.
This structure completely defines all creation parameters of this type
of surface.
Data Members
quilt_data
UF_MODL_quilt_data_t
Structure of common
elements of the quilt
feature.
projection_vector [ 3 ]
double
projection vector
primary_curves
UF_STRING_p_t
string of primary curves
cross_curves
UF_STRING_p_t
string of cross curves

------------

UF_MODL - UF_MODL_devchk_ee_info_s
UF_MODL_devchk_ee_info_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_devchk_ee_info_t
UF_MODL_devchk_ee_info_p_t
Data Members
dev_type
int
0 - no deviation
1 - step
2 - overlap
3 - gap
face_1_tag
tag_t
face tag on which edge_1_pnt lies
edge_1_pnt [ 3 ]
double
point on an edge of face_pairs[0] used for
deviation checking
norm_1 [ 3 ]
double
face normal at edge_1_pnt
face_2_tag
tag_t
face tag on which edge_2_pnt lies
edge_2_pnt [ 3 ]
double
point on an edge of face_pairs[1], where the
minimum deviation occured from edge_1_pnt
norm_2 [ 3 ]
double
face normal at edge_2_pnt
edge_dist
double
distance between edge_1_pnt and edge_2_pnt
norm_angle
double
Angle between the face normals

------------

UF_MODL - UF_MODL_deviation_check_data_s
UF_MODL_deviation_check_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_deviation_check_data_t
UF_MODL_deviation_check_data_p_t
Overview
Following is a structure definition for deviation checking.
It holds the output data of deviation checking.
Data Members
number_of_points_checked
int
Number of points checked
minimum_distance_error
double
Minimum distance deviation
maximum_distance_error
double
Maximum distance deviation
average_distance_error
double
Average distance deviation
minimum_angle_error
double
Minimum angle deviation
maximum_angle_error
double
Maximum angle deviation
average_angle_error
double
Average angle deviation
distance_errors
double *
Distance deviation at check points
angle_errors
double *
Angle deviations at check points
check_points) [ 3 ]
double (*
Points used in deviation checking

------------

UF_MODL - UF_MODL_dfo_constraint_s
UF_MODL_dfo_constraint_s
(view source)
Defined in: uf_modl_dfo.h
Also known as:
UF_MODL_dfo_constraint_t
UF_MODL_dfo_constraint_p_t
Overview
Constraint data is represented as below. Generally, constraints are defined by a target face ("from_face") and a reference ("to_object").
Target Face is one of the faces defined by UF_MODL_dfo_region_t. Constraint reference can be face, edge, line, datum plane, datum axis, etc.,
and and it is always abstracted as a direction and a point, thus the input 'to_object' should be a smart direction based
on an underlying entity (see uf_so.h). Some constraint types, such as angle, parallel, perpendicular and tangent, will
need a smart point to control the result, namely, "thru_point", which specifies that the destination of the target face
will pass through some point.
Data Members
type
UF_MODL_dfo_constraint_type_t
from_face
tag_t
target face
to_object
tag_t
constraint reference. smart direction is needed
thru_point
tag_t
through point. smart point is needed
value [ UF_MAX_EXP_BUFSIZE ]
char
distance or angle value. Any expression string.

------------

UF_MODL - UF_MODL_dfo_region_s
UF_MODL_dfo_region_s
(view source)
Defined in: uf_modl_dfo.h
Also known as:
UF_MODL_dfo_region_t
UF_MODL_dfo_region_p_t
Overview
Faces that will be operated by a Direct Modeling operations are defined in the following UF_MODL_dfo_region_t structure.
"boundary_faces" are optional, and you may specify more than one seed faces.  If there is no boundary faces,
the seed faces will be processed. Otherwise, the extracted region between the first seed face and boundary
faces, as well as other seed faces, will be operated.
All blends adjacent to the extracted region will be automatically recognized. If users want to, in purpose, treat some of them as not blends,
they can store these faces in the "excluded_faces" array. This is however not encouraged.
For sheet body, the region cannot be faces on the sheet body boundary.
Data Members
seed_faces
tag_t *
seed faces
num_seed
int
number of seed faces
boundary_faces
tag_t *
boundary faces, optional
num_boundary
int
number of boundary faces. 0 if no boundary faces
excluded_faces
tag_t *
faces which shouldn't be treated as Blends, and must be kept invariant
num_exclude
int
number of excluded faces

------------

UF_MODL - UF_MODL_die_tip_info_s
UF_MODL_die_tip_info_s
(view source)
Defined in: uf_modl_dieeng.h
Also known as:
UF_MODL_die_tip_info_t
UF_MODL_die_tip_info_p_t
Overview
Following is a structure definition for die tip feature inquiry data.
It contains all the information needed to define the product orientation
in the die.
Data Members
product
tag_t
Tag of product body being tipped
origin [ 3 ]
double
origin on product body that is
mapped to center of operation box
center [ 3 ]
double
center of operation box
defining_tip_feature
tag_t
tag of feature that actually
defined the product orientation,
NULL_TAG if this feature defined
the product orientation
trans [ 3 ]
double
translation from center of die
num_trans_reasons
int
number of strings in following array,
will be 0 if no reasons supplied
trans_reasons
char * *
reasons supplied for translation,
will be NULL if no reason,
the memory for these strings should
be freed by calling UF_free
num_steps
int
number of steps in the product
orientation definition, also the
size of the following arrays
rot_axis
int *
for each step, the axis the
rotation is performed about
=0 -> X
=1 -> Y
=2 -> Z
=3 -> -X
=4 -> -Y
=5 -> -Z,
the memory for this array should
be freed by calling UF_free
rot_angle
double *
for each step, the angle of
rotation in degrees, the memory
for this array should be freed
by calling UF_free
num_rot_reasons
int *
number of reasons for each step,
will be 0 if no reasons supplied
for a step, the memory for this
array should be freed by
calling UF_free
rot_reasons
char * * *
for each step, the reasons supplied
for the rotation, an entry will
be NULL if no reasons, the memory
for each string should be freed
by calling UF_free, the string array
should be freed by calling UF_free,
and the complete array should also be
freed by calling UF_free
(e.g., UF_free(rot_reasons[0..n][0..n]);,
UF_free(rot_reasons[0..n]);
and UF_free(rot_reasons);)

------------

UF_MODL - UF_MODL_dimension_data_s
UF_MODL_dimension_data_s
(view source)
Defined in: uf_modl_expressions.h
Also known as:
UF_MODL_dimension_data_t
UF_MODL_dimension_data_p_t
Overview
The structure UF_MODL_dimension_data_s stores the data to create drafting
dimension data for feature expressions.  The structure is filled by the
function UF_MODL_get_dimension_data (see below ).
Data Members
type
int
Type of dimension - 0 - Parallel
1 - Diameter
2- angular
3- Radial
4 - RPO
feature_tag
tag_t
The tag of the feature associated with the
dimension
value
double
The value of the expression from which we
create the dimension.
first_point [ 3 ]
double
The absolute coordinates of objects used to
create the dimension. For a parallel
dimension this is the first point necessary
to create the dimension. For a diameter or
radial dimension this is the center of the
arc from which we create the dimension. For
an angular or RPO dimension????
second_point [ 3 ]
double
The second point necessary to create the
parallel dimension. This is unused for the
other types of dimensions.
origin [ 3 ]
double
Origin for the dimension placement in
absolute coordinates.
start_angle
double
Start angle for arc of radial dimensions in radians
end_angle
double
End angle for arc of radial dimensions in radians
csys_tag
tag_t
This is the coordinate system which defines
the XY plane on which the dimension is
created.
drf_txt
char *
Dimension text associated with the dimension.
top_array
tag_t *
Topological information associated with the
feature (such as faces or edges) which should
be used to customize the dimension creation by
the user. This array must be freed by the
user by calling UF_free.
num_top_array
int
Number of topological entities returned
first_line
UF_CURVE_line_t
Used only when the dimension is angular,
this is the first line to be created for
the angular dimension.
second_line
UF_CURVE_line_t
Used only when the dimension is angular,
this is the Second line to be created for
the angular dimension.

------------

UF_MODL - UF_MODL_edge_blend_data_s
UF_MODL_edge_blend_data_s
(view source)
Defined in: uf_modl_blends.h
Also known as:
UF_MODL_edge_blend_data_t
UF_MODL_edge_blend_data_p_t
Data Members
blend_type
int
type of created blends
0 - regular edge blend
1 - cliff-edge blend
blend_instanced
logical
instanced blend
blend_setback
logical
setback blend
vrb_tolerance
double
tolerance of a variable blend
blend_radius [ UF_MAX_EXP_BUFSIZE ]
char
radius of a regular blend
smooth_overflow
logical
blend smooth overflow
cliff_overflow
logical
blend cliff overflow
notch_overflow
logical
blend notch overflow
number_edges
int
number of edges to be blended
edge_data
UF_MODL_blend_edge_p_t
Data of an edge to be blended or an edge collector.
If input an edge collector, input it in the first
element array. Extra elements in the array can be
used to input varialbe radius data and/or setback
data. But the edges specified for these data must
be the edges of the collector, otherwise they will
be ignored.

------------

UF_MODL - UF_MODL_edge_blend_mult_data_s
UF_MODL_edge_blend_mult_data_s
(view source)
Defined in: uf_modl_blends.h
Also known as:
UF_MODL_edge_blend_mult_data_t
UF_MODL_edge_blend_mult_data_p_t
Overview
New Edge Blend Data Structure with Multiple Chainsets, Variable Radius, Setback, Stopshort and
Options enabled
Data Members
blend_instanced
logical
instanced blend
vrb_tolerance
double
tolerance of a variable blend
smooth_overflow
logical
blend smooth overflow
cliff_overflow
logical
blend cliff overflow
notch_overflow
logical
blend notch overflow
allow_twist_patches
logical
Allow twist patches to be created.
The corresponding option in interactive NX
is Remove Self Intersections. When
allow_twist_patches is TRUE it corresponds
to Remove Self Intersections being set to OFF
soften_vertices
logical
Y-Blend
num_sets
int
number of blend sets to be blended
edge_data
UF_MODL_edge_blend_set_p_t *
Data of an edges/Blendset to be blended or an edge collector.
num_var_rad
int
Number of points where variable radius is defined
var_edges
tag_t *
The edge on which the variable radius is defined
var_radius_data
UF_MODL_blend_point_data_t *
Location of the edge and radius value for the variable
radius
num_setback
int
Number of edges that have setbacks defined.
setback_data
UF_MODL_edge_blend_setback_data_p_t *
Setback data on the edges.
num_stopshort
int
Number of edges that have stopshorts defined.
stopshort_data
UF_MODL_edge_blend_stopshort_data_p_t *
Stopshort data on the edges.

------------

UF_MODL - UF_MODL_edge_blend_set_s
UF_MODL_edge_blend_set_s
(view source)
Defined in: uf_modl_blends.h
Also known as:
UF_MODL_edge_blend_set_t
UF_MODL_edge_blend_set_p_t
Overview
Blend Set(Chainset) Data Structure
Data Members
edge_collector
tag_t
The edge collector, if this is a NULL_TAG, then
the edges will be read from num_edges and edges
num_edges
int
The edges with a constant radius. Is honored only
when the edge_collector is NULL_TAG
edges
tag_t*
radius [ UF_MAX_EXP_BUFSIZE ]
char
Radius associated with these edges
radius_exp
tag_t
Expression TAG will only be set during Edit, User can edit the
radius string to edit the new value
status
int
When adding Status = 1 and To remove Status = 0

------------

UF_MODL - UF_MODL_edge_blend_setback_data_s
UF_MODL_edge_blend_setback_data_s
(view source)
Defined in: uf_modl_blends.h
Also known as:
UF_MODL_edge_blend_setback_data_t
UF_MODL_edge_blend_setback_data_p_t
Overview
Setback Data Structure
Data Members
edge
tag_t
The edge on which setback distance has to be specified
from_start
logical
if true, then the setback is defined at the start vertex.
Otherwise, it is defined at the end vertex.
distance [ UF_MAX_EXP_BUFSIZE ]
char
Setback distance
distance_exp
tag_t
Expression TAG will only be set during Edit, User can edit the
distance string to edit the new value
status
int
When adding Status = 1 and To remove Status = 0

------------

UF_MODL - UF_MODL_edge_blend_stopshort_data_s
UF_MODL_edge_blend_stopshort_data_s
(view source)
Defined in: uf_modl_blends.h
Also known as:
UF_MODL_edge_blend_stopshort_data_t
UF_MODL_edge_blend_stopshort_data_p_t
Overview
Stopshort Data Structure
Data Members
edge
tag_t
The edge where the stopshort is defined
from_start
logical
if true, then the stopshort is defined from the start of edge.
Otherwise, it is defined from the end of edge.
distance [ UF_MAX_EXP_BUFSIZE ]
char
%Stopshort distance [0 - 100]
distance_exp
tag_t
Expression TAG will only be set during Edit, User can edit the
distance string to edit the new value
status
int
When adding Status = 1 and To remove Status = 0

------------

UF_MODL - UF_MODL_face_blend_create_data_s
UF_MODL_face_blend_create_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_face_blend_create_data_t
UF_MODL_face_blend_create_data_p_t
Overview
This new create face blend data structure is intended to replace the old
one in the feature.
Data Members
first_set
tag_t *
You can input individual faces or a
face collector.
first_set_size
int
flip_first_normal
logical
second_set
tag_t *
You can input individual faces or a
face collector.
second_set_size
int
flip_second_normal
logical
propagate
logical
cliff_edges
tag_t *
n_cliff_edges
int
thls
tag_t *
You can input individual edges or curves or
you can input an edge or curve collector.
n_thls
int
proj_on_first_set
logical
this only takes effect if
the thls are curves and the
first and second face sets
are on different bodies.
end_overflow
logical
blend_tolerance
char *
trim_option
UF_MODL_trim_blend_option
radius_type
UF_MODL_blend_radius_type
default_radius
char *
thls_1
tag_t *
This is used for soft blend to
specify the tangent control lines
on the second face set. thls are
used as the tangent control lines
on the first face set. You can input
individual edges or curves or you
can input an edge or curve collector.
n_thls_1
int
law_parameters
UF_MODL_parm_p_t *
law_parameters should be an array of UF_MODL_parm_p_t whose length is
determined by the UF_MODL_blend_radius_type being used
UF_MODL_blend_radius_type law_parameters
UF_CONSTANT
or UF_TANGENCY_CONTROLLED NULL (we will ignore it anyway)
UF_LAW_CONTROLLED
or UF_DISC
or UF_ISOPARAMETER One element array. Must have
method_type == UF_MODL_PARM_LAW_SPINE,
to specify the radius data and the spine.
UF_CONIC Three-element array. First element must
have method_type == UF_MODL_PARM_LAW_SPINE
and will specify first offset1 and spine.
Second element will specify offset2.
Third element will specify rho values.
UF_CONIC_AUTO_RHO Two-element array. First element must have
method_type == UF_MODL_PARM_LAW_SPINE
and will specify first offset1 and spine.
Second element will specify offset2.
UF_MATCH_TANGENTS One-element array. Must have
method_type == UF_MODL_PARM_LAW_SPINE,
Only the spine information will be used,
the other data should be NULL.
UF_MATCH_CURVATURE Two-element array. First element must have
method_type == UF_MODL_PARM_LAW_SPINE
and will specify skew and spine.
Second element will specify rho values.
remove_self_int
logical
New Option added in NX3,Remove Surface Self-Intersections
Will work only for Constant radius rolling ball blends,
Will not work with cliff edges,tangency control, DISC,
Law controlled, ISOPARAM blends

------------

UF_MODL - UF_MODL_faces_s
UF_MODL_faces_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_faces_t
UF_MODL_faces_p_t
Overview
The following structure allows definition of an array of
faces along with an extension option.
Data Members
number_of_faces
int
Number of faces supplied in the
following array.
faces
tag_t *
Array of faces to be used in the
function. Note that some
functions may allow planes and
datum planes in this array.
face_extension
UF_MODL_face_extension_t
Indication of how the faces
should be extended if the
function allows for face
extension.

------------

UF_MODL - UF_MODL_features_s
UF_MODL_features_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_features_t
UF_MODL_features_p_t
Data Members
feat_count
int
feat_tags
tag_t *
feat_type [ MAX_LINE_BUFSIZE ]
char

------------

UF_MODL - UF_MODL_flange_data_s
UF_MODL_flange_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_flange_data_t
UF_MODL_flange_data_p_t
Overview
This structure contains the parametric information used to define
a flange feature.
Data Members
angle_type
int
Bend or Included angle.
length_type
int
Tangent or Contour length.
radius_type
int
Inside or Outside radius.
ltaper_type
int
Left Side: Flange, Bend Area, or Web.
rtaper_type
int
Right Side: Flange, Bend Area, or Web.
reverse_direction
logical
Negate direction: X x Z. TRUE/FALSE
ref_line_type
int
None(0), Contour(1), Mold(2), Both(3)
thickness
char *
Thickness expression.
width
char *
Width expression.
angle
char *
Angle expression.
length
char *
Length expression.
radius
char *
Radius expression.
left_joint_type
int
None(0), Taper(1), Simple Miter(2),
Full Miter(3), Butt(4).
right_joint_type
int
None(0), Taper(1), Simple Miter(2),
Full Miter(3), Butt(4).
ltaper [ 2 ]
char *
Left Taper Angles expression.
rtaper [ 2 ]
char *
Right Taper Angles expression.
lmiter [ 3 ]
char *
Left Miter angle, Miter Phase Angle
and Miter Relief angle.
rmiter [ 3 ]
char *
Right Miter angle, Miter Phase Angle
and Miter Relief angle.
lbutt
char *
Left Butt length
rbutt
char *
Right Butt length
bend_allowance_formula
char *
Bend Allowance Formula

------------

UF_MODL - UF_MODL_genflg_state_data_s
UF_MODL_genflg_state_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_genflg_state_data_t
UF_MODL_genflg_state_data_p_t
Data Members
tolerance_str [ UF_MAX_EXP_BUFSIZE ]
char
Tolerance
plus
UF_MODL_parm_p_t
The law specification of the target
face extension between the bend edge
and the start of the bend. This is
an array with step_count entries.
bend_radius
UF_MODL_parm_p_t
The law specification of the radius
of the bend. This is an array with
step_count entries
bend_angle
UF_MODL_parm_p_t
The law specification of the angle
of the bend. This is an array with
step count entries.
web_length
UF_MODL_parm_p_t
The law specification of the length
of the surface extension after the
bend. This is an array with step
count entries.
r_value_str [ UF_MAX_EXP_BUFSIZE ]
char
Average strain ratio.
For homogenous material this
value is 1. r_value is used
when area_preserve is set
to FALSE.

------------

UF_MODL - UF_MODL_gflange_data_s
UF_MODL_gflange_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_gflange_data_t
UF_MODL_gflange_data_p_t
Data Members
bend_edge
UF_STRING_p_t
An edge in the tangent face
used as the attachment edge
for the generalized
flange
add_tangent_edges
logical
TRUE = selects all edges
tangent to the selected edge.
FALSE = do not allow tangent
edges
spine
UF_STRING_p_t
An edge or curve used to
define the section planes
for the bend and web. If
this values is null, the
bend edge string is used
as the spine string.
mode
UF_MODL_gflange_mode_t
Flange Creation Mode
gflange_mode_specific_data
UF_MODL_mode_specific_data_t
Input data
specific to the
generalized
flange
creation
mode
thickness_str [ UF_MAX_EXP_BUFSIZE ]
char
Thickness of the solid body
created. If the Modeling
preference for body type is
set to solid, this is used
only when infer_thickness is
set to FALSE
number_target_faces
int
Number of target faces
target_faces
tag_p_t
Target Faces
bend_allow_formula
char *
Bend Allowance Formula
gflange_options
UF_MODL_gflange_options_data_p_t
General Flange
options

------------

UF_MODL - UF_MODL_gflange_options_data_s
UF_MODL_gflange_options_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_gflange_options_data_t
UF_MODL_gflange_options_data_p_t
Data Members
infer_thickness
logical
TRUE = Thickness derived from target
geometry,
FALSE = To be given explicitly
infer_spine
logical
TRUE = System generates spine normal to
all section curves.
FALSE = Use bend edge or spine
r_value [ UF_MAX_EXP_BUFSIZE ]
char
average strain ratio.
For homogenous material this
value is 1. r_value is used
when area_preserve is set
to FALSE.
area_preserve
logical
FALSE = Use the above r_value,
TRUE = Do not use the r_value, set
it to infinite.
distortion
UF_MODL_gflange_distort_t
Distortion
tolerance [ UF_MAX_EXP_BUFSIZE ]
char
Tolerance
max_sample_pts [ UF_MAX_EXP_BUFSIZE ]
char
Maximum number of
sample points
contour_lines
logical
Contour Lines
form_block_lines
logical
Form Block Lines
mold_lines
logical
Mold Lines

------------

UF_MODL - UF_MODL_gflange_parameters_mode_data_s
UF_MODL_gflange_parameters_mode_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_gflange_parameters_mode_data_t
UF_MODL_gflange_parameters_mode_data_p_t
Data Members
step_count
int
The number of steps in the
generalized flange. Zero is an
invalid number. For each step
include a value for the
bend radius, bend angle and web
length.
plus
UF_MODL_parm_p_t
The law specification of the target
face extension between the bend edge
and the start of the bend. This is
an array with step_count entries.
bend_radius
UF_MODL_parm_p_t
The law specification of the radius
of the bend. This is an array with
step_count entries
bend_angle
UF_MODL_parm_p_t
The law specification of the angle
of the bend. This is an array with
step count entries.
web_length
UF_MODL_parm_p_t
The law specification of the length
of the surface extension after the
bend. This is an array with step
count entries.
radius_in_out
int *
Inner/Outer radius for steps
0 = inner radius in use
1 = outer radius in use,
This is an array with step count
entries.
flip_bend_direction
logical
TRUE = Bend in the direction
opposite to the system
inferred bend direction.
FALSE = Use system inferred bend
direction.

------------

UF_MODL - UF_MODL_gflange_punch_vector_mode_data_s
UF_MODL_gflange_punch_vector_mode_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_gflange_punch_vector_mode_data_t
UF_MODL_gflange_punch_vector_mode_data_p_t
Data Members
step_count
int
The number of steps in the
generalized flange. Zero is an
invalid number. For each step
include a value for the bend
radius, bend angle and web length
plus
UF_MODL_parm_p_t
The law specification of the target
face extension between the bend edge
and the start of the bend. This is
an array with step count entries.
bend_radius
UF_MODL_parm_p_t
The law specification of the radius
of the bend. This is an array
with step count entries.
bend_angle
UF_MODL_parm_p_t
The law specification of the angle of
the bend.This is an array with
step count entries.
web_length
UF_MODL_parm_p_t
The law specification of the length
of the surface extension after the
bend. This is an array with step count
entries.
radius_in_out
int *
Inner/Outer radius for steps
0 = inner radius in use
1 = outer radius in use
Dimension of the array
= step_count
punch_vector
UF_MODL_vector_p_t
Punch Vector
flip_bend_direction
logical
TRUE = Bend in the direction
opposite to the system
inferred bend direction.
FALSE = Use system inferred bend
direction.

------------

UF_MODL - UF_MODL_gflange_sections_mode_data_s
UF_MODL_gflange_sections_mode_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_gflange_sections_mode_data_t
UF_MODL_gflange_sections_mode_data_p_t
Data Members
section_curves
UF_STRING_p_t
Each section must consist of curves
and/or edges that comprise an open G1
string. They must start tangent to
the target face. Each section must lie
in a plane that is normal to spine.
One end of the each section must touch
the bend edge.
extend_start
logical
TRUE = Maintain a constant section from
last defined section to the
spine start.
FALSE = To create generalized flange
till the last section near the
spine start
extend_end
logical
TRUE = Maintain a constant section
from last defined section to
the spine end.
FALSE = To create generalized flange
till the last section near
the spine end

------------

UF_MODL - UF_MODL_gflange_shaping_faces_mode_data_s
UF_MODL_gflange_shaping_faces_mode_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_gflange_shaping_faces_mode_data_t
UF_MODL_gflange_shaping_faces_mode_data_p_t
Data Members
number_shaping_faces
int
Number of shaping faces
shaping_faces
tag_p_t
Shaping faces . They must not be from
the body of the target faces. They
must be G1 continuous faces from a
single body. They must be G1 with the
target faces at the bend edge.

------------

UF_MODL - UF_MODL_imprint_faces_data_s
UF_MODL_imprint_faces_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_imprint_faces_data_t
UF_MODL_imprint_faces_data_p_t
Overview
This structure contains the parametric information used to define an
imprint feature which will imprint an edge on every face in <imprint_faces>
where they intersect with <imprint_datum_plane>.  The faces must all be on
the same body.  It is an error if none of the faces intersect
<imprint_datum_plane>.
Data Members
n_imprint_faces
int
The number of faces
imprint_faces
tag_t *
Array of faces to be imprinted
imprint_datum_plane
tag_t
The datum plane of intersection

------------

UF_MODL - UF_MODL_imprint_loop_data_s
UF_MODL_imprint_loop_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_imprint_loop_data_t
UF_MODL_imprint_loop_data_p_t
Overview
This structure contains the parametric information used to define an
imprint feature which will imprint edges on all the faces connected to
<imprint_face> which intersect with <imprint_datum_plane>.  Hence it will
define a closed loop on the solid, even if the geometry of the solid is
later changed.  It is an error if the face does not intersect
<imprint_datum_plane>.
Data Members
imprint_face
tag_t
The face defining the starting
point of the imprint
imprint_datum_plane
tag_t
The datum plane of intersection

------------

UF_MODL - UF_MODL_inset_flange_data_s
UF_MODL_inset_flange_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_inset_flange_data_t
UF_MODL_inset_flange_data_p_t
Overview
This structure represents the information necessary to create
an inset flange feature.
Data Members
flange_data
UF_MODL_flange_data_p_t
Inheritted flange information.
inset_type
int
Inset Dimension: Expression, Outer Tangent,
Inner Tangent, Outer Mold Line, DIN Mold Line,
Inner Mold Line.
lrelief_type
int
Left Side: None, Rectangular, Obround.
rrelief_type
int
Right Side: None, Rectangular, Obround.
inset
char *
Inset expression.
lrelief
char *
Left Relief expression.
rrelief
char *
Right Relief expression.

------------

UF_MODL - UF_MODL_intersect_info_coincide_s
UF_MODL_intersect_info_coincide_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_intersect_info_coincide_t
Overview
intersect_type == UF_MODL_INTERSECT_COINCIDE
Data Members
identifier
tag_t
object_1_first_parm
double
object_1_second_parm
double
object_2_first_parm
double
object_2_second_parm
double

------------

UF_MODL - UF_MODL_intersect_info_curve_s
UF_MODL_intersect_info_curve_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_intersect_info_curve_t
Overview
intersect_type == UF_MODL_INTERSECT_CURVE
Data Members
identifier
tag_t

------------

UF_MODL - UF_MODL_intersect_info_point_s
UF_MODL_intersect_info_point_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_intersect_info_point_t
Overview
intersect_type == UF_MODL_INTERSECT_POINT
Data Members
coords [ 3 ]
double
object_1_u_parm
double
object_1_v_parm
double
object_2_u_parm
double
object_2_v_parm
double

------------

UF_MODL - UF_MODL_intersect_info_s
UF_MODL_intersect_info_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_intersect_info_t
UF_MODL_intersect_info_p_t
Data Members
intersect_type
UF_MODL_intersect_type_t
intersect
UF_MODL_intersect_info_intersect_t

------------

UF_MODL - UF_MODL_law_constant_s
UF_MODL_law_constant_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_law_constant_t
Overview
method_type == UF_MODL_LAW_CONSTANT
Data Members
value [ MAX_LINE_BUFSIZE ]
char
The law evaluates to this constant
value along the entire parameter
range of the law.

------------

UF_MODL - UF_MODL_law_curve_s
UF_MODL_law_curve_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_law_curve_t
Overview
method_type == UF_MODL_LAW_CURVE.  The law evaluates to the "Y" distance
between the given profile and the base curve, the profile should be in the
X-Y plane. If a base curve is not supplied, then the X axis is used as a base.
Data Members
law_profile
UF_STRING_t
Profile defining the law.
base
tag_t
Base curve of the law. If a base is not
desired, set this to NULL_TAG.
direction
UF_MODL_curve_direction_t
Indication if the base curve should
start from the beginning or end
of the curve. This is unused if no
base curve is defined.

------------

UF_MODL - UF_MODL_law_equation_s
UF_MODL_law_equation_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_law_equation_t
Overview
method_type == UF_MODL_LAW_EQUATION.  The law evaluates to the result of
solving the equation, while varying the variable specified from 0 to 1.
Data Members
parm [ MAX_LINE_BUFSIZE ]
char
A character string containing the
dependent variable of the equation
which varies from 0 to 1 during
evaluation of the law.
function [ MAX_LINE_BUFSIZE ]
char
A character string containing
the equation that should be solved
to determine the value of the law.
Note that this equation must have
the variable defined in "parm"
in it.

------------

UF_MODL - UF_MODL_law_linear_cubic_s
UF_MODL_law_linear_cubic_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_law_linear_cubic_t
Overview
method_type == UF_MODL_LAW_LINEAR or UF_MODL_LAW_CUBIC.  The law evaluates
in a linear progression, or cubic progression along the parameter range of
the law.
Data Members
start_value [ MAX_LINE_BUFSIZE ]
char
The starting value.
end_value [ MAX_LINE_BUFSIZE ]
char
The ending value.

------------

UF_MODL - UF_MODL_law_no_spine_constant_s
UF_MODL_law_no_spine_constant_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_law_no_spine_constant_t
Overview
method_type == UF_MODL_LAW_CONSTANT.  The law evaluates to this constant
value along the entire parameter range of the law.
Data Members
value [ MAX_LINE_BUFSIZE ]
char
A character string containing the
constant value desired.

------------

UF_MODL - UF_MODL_law_no_spine_curve_s
UF_MODL_law_no_spine_curve_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_law_no_spine_curve_t
Overview
method_type == UF_MODL_LAW_CURVE.  The law evaluates to the "Y" distance
between the given profile and the base curve, the profile should be in the
X-Y plane. If a base curve is not supplied, then the X axis is used as a base.
Data Members
law_profile
UF_STRING_t
Profile defining the law.
base
tag_t
Base curve of the law. If the base curve is
not desired, set this to NULL_TAG.
direction
UF_MODL_curve_direction_t
Indication if the base curve should
start from the beginning or end of
the curve.

------------

UF_MODL - UF_MODL_law_no_spine_equation_s
UF_MODL_law_no_spine_equation_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_law_no_spine_equation_t
Overview
method_type == UF_MODL_LAW_EQUATION.  The law evaluates to the result of
solving the equation while varying the variable specified from 0 to 1.
Data Members
parm [ MAX_LINE_BUFSIZE ]
char
A character string containing the
dependent variable of the
equation, this variable varies
from 0 to 1 during evaluation of
the law.
function [ MAX_LINE_BUFSIZE ]
char
A character string containing
the equation that should be solved
to determine the value of the law.
Note that this equation must have
the variable defined by "parm"
in it.

------------

UF_MODL - UF_MODL_law_no_spine_linear_cubic_s
UF_MODL_law_no_spine_linear_cubic_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_law_no_spine_linear_cubic_t
Overview
method_type == UF_MODL_LAW_LINEAR or UF_MODL_LAW_CUBIC.  The law evaluates
in a linear progression or cubic progression along the parameter range
of the law.
Data Members
start_value [ MAX_LINE_BUFSIZE ]
char
A character string containing
the starting value desired.
end_value [ MAX_LINE_BUFSIZE ]
char
A character string containing
the ending value desired.

------------

UF_MODL - UF_MODL_law_no_spine_s
UF_MODL_law_no_spine_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_law_no_spine_t
UF_MODL_law_no_spine_p_t
Overview
The following structure is used to define a law without a spine.
Note for all character string values in the structure, if the character
string is in expression format (e.g., p5=25,  p5+p7), and the
expression does not exist, an expression is created and the law is
associated to that expression. If the expression does exist, then the
existing expression is edited, and the law is associated to that
expression. If the character string contains an expression name (e.g.,
p5) and the expression exists, the law is associated to that expression,
if the expression does not exist an error occurs. If the character string
is a numeric value (e.g., 25) the law is not associated to an expression.
When a function is returning the law structure for a particular
parameter, all character string values are fully defined expressions
(i.e., p5=25), if they had an associated expression
Data Members
method_type
UF_MODL_law_method_t
Indication of how
the law is being
defined.
defined_by
UF_MODL_law_no_spine_defined_by_union_t
Definition of the
law.

------------

UF_MODL - UF_MODL_law_spine_pt_val_s
UF_MODL_law_spine_pt_val_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_law_spine_pt_val_t
UF_MODL_law_spine_pt_val_p_t
Overview
This structure is used in conjunction with the law spine structure to
define points and associated values on a spine.
Data Members
pt [ 3 ]
double
Point coordinates at which to associate
the corresponding value. The closest
point on the spine to this point is used.
If the spine is closed and the end point
is put in the array twice, the beginning
of the spine is used for the first point
and the ending for the second point.
value [ MAX_LINE_BUFSIZE ]
char
The value assigned to the law at the
given point.

------------

UF_MODL - UF_MODL_law_spine_pts_linear_cubic_s
UF_MODL_law_spine_pts_linear_cubic_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_law_spine_pts_linear_cubic_t
Overview
method_type == UF_MODL_LAW_SPINE_PTS_LINEAR or UF_MODL_LAW_SPINE_PTS_CUBIC
The law evaluates to the values supplied at the corresponding spine points,
and varies linearly or cubically in between these values.
Data Members
number_of_pts_vals
int
Number of elements in the
pts_vals array.
pts_vals
UF_MODL_law_spine_pt_val_t *
Array of points on spine
curves at which values
are defined and the
corresponding values.

------------

UF_MODL - UF_MODL_law_spine_s
UF_MODL_law_spine_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_law_spine_t
UF_MODL_law_spine_p_t
Overview
This structure defines a law, with a spine, in conjunction with the
UF_MODL_parm structure.
Note for all character string values in the structure, if the character
string is in expression format (e.g., p5=25,  p5+p7), and the
expression does not exist, an expression is created and the law is
associated to that expression. If the expression does exist, then the
existing expression is edited, and the law is associated to that
expression. If the character string contains an expression name
(e.g., p5) and the expression exists, the law is associated to that
expression, if the expression does not exist an error occurs. If
the character string is a numeric value (e.g., 25), the law is not
associated to an expression.
Data Members
spine_profile
UF_STRING_t
A profile used to define the
spine of the law.
method_type
UF_MODL_law_method_t
Indication of how the law is
being defined.
defined_by
UF_MODL_law_defined_by_t
The definition of the law

------------

UF_MODL - UF_MODL_lawext_data_s
UF_MODL_lawext_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_lawext_data_t
UF_MODL_lawext_data_p_t
Overview
Following is a structure definition for law extension feature data.
It includes all the input elements to create a law controlled extension
surface.
Minimum four parameters are required to be specified. The base curve, one
of the options in direction reference, length law and angle law are required
for creation of the feature. The law parameters, length_law_parms and
angle_law_parms may be defined using UF_MODL_create_law ( ).
The specification of spine is optional and can be specified at following
three places.
1. Feature spine
2. Length law spine
3. Angle law spine
It is necessary that spine should be unique where ever specified. Only feature
can have spine specified but only law(s) cannot have spine specified.
Data Members
ref_type
UF_MODL_lawext_dirref_t
Direction reference type
length_law_parms
void *
For the specification of
length law parameters
angle_law_parms
void *
For the specification of
angle law parameters
curve
UF_STRING_p_t
Pointer to string for base curve
from which extension surface will
be created
n_faces
int
Number of faces used for direction
reference.
A face collection may be used as the
one and only member of the array.
Will be zero if direction
reference type is not set to
UF_MODL_lawext_dirref_face
face_ids
tag_t *
Array of n_faces number of tags used
for direction reference. Only used if
direction reference type is set to
UF_MODL_lawext_dirref_face
smart_dir
tag_t
Smart direction vector tag. Only used
if direction reference type is set to
UF_MODL_lawext_dirref_vector
spine
UF_STRING_p_t
Pointer to spine string (optional).
If set to NULL, curve is used as spine
distance_tol
double
Distance tolerance
angle_tol
double
Angle tolerance
merge
int
Merge faces
bisided
int
Extend on both sides or not

------------

UF_MODL - UF_MODL_linked_ext_s
UF_MODL_linked_ext_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_linked_ext_t
UF_MODL_linked_ext_p_t
Overview
Define the data structure for an Linked Exterior feature.
Data Members
num_bodies
int
Number of candidate bodies.
bodies
tag_t *
Candidate bodies.
xforms
tag_t *
Array of xforms. One for each body,
determines the position of the body
relative to its source geometry.
Must be NULL_TAG (apply no transformation) or
an assy_ctxt_xform in the work part.
num_faces
int
Number of tags in the faces array.
faces
tag_t *
Array of face tags.
xform_index
int *
Array of indices into xforms array, one index
for each face. Determines the position
of the linked feature relative to its
source geometry.
group_results
int
Method used to group resulting sheet bodies.
One of:
UF_LINKED_EXT_GROUP_NONE
UF_LINKED_EXT_GROUP_SINGLE
UF_LINKED_EXT_GROUP_COMPONENT
mass_props
logical
If true, calculate mass properties of
all candidate solid bodies.
delete_openings
logical
If true, any holes in the resulting sheet are
closed up; if false they are left. Note: A hole
is any interior edge loop without an adjacent
face.
at_timestamp
logical
If true, each linked region updates at
a time determined by its creation timestamp.
If false, the linked regions update after their
source faces body is completely generated.
Note: this only applies to the linked regions.
Mass properties are always calcualted after the
body is completely generated

------------

UF_MODL - UF_MODL_mapping_data_output_objs_non_ss_s
UF_MODL_mapping_data_output_objs_non_ss_s
(view source)
Defined in: uf_modl_types.h
Overview
This data is only used for the following mapping objects:
Faces, Bodies, Sketches, Feature Curves, ... and
Ouput objects of Smart Collectors.
Data Members
old_output_objs
tag_t *
Array of mapping objects of an old parent
To fill out this array, please see the above comments.
new_output_objs
tag_t *
Array of mapping objects of a new parent.
To fill out this array, please see the above comments.

------------

UF_MODL - UF_MODL_mapping_data_output_objs_ss_s
UF_MODL_mapping_data_output_objs_ss_s
(view source)
Defined in: uf_modl_types.h
Overview
This data is only used for the following mapping objects:
Output objects of Smart Sections (these objects are condemned,
which are not displayed (i.e. invisible)).
Note that these output objects can't be used or destroyed
for further applications.
Data Members
old_output_objs_index
int *
Array of index of Smart Section's output objects
of an old parent. To fill out this array, please
see the above comments.
new_output_objs_index
int *
Array of index of Smart Section's output objects
of a new parent. To fill out this array, please
see the above comments.

------------

UF_MODL - UF_MODL_matchedge_data_s
UF_MODL_matchedge_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_matchedge_data_t
UF_MODL_matchedge_data_p_t
Overview
Data structure for matchedge
all data members should be set except for the following:
when match target_type is not 3, match_dir_vector_tag is not used.
when flow_control[0]/flow_control[1] is not 4,
adjacent_vec[0]/adjacent_vec[1] is not used.
when limit_pole_move is not 2, move_direction_tag is not used.
Data Members
edit_edge_tag
tag_t
the edge to be edited
match_target_type
int
0:edge, 1:face, 2:curve, 3:datum
match_continuity [ 4 ]
int
on/off for G0, G1, G2 and G3
match_dir_vector_tag
tag_t
direction tag if match with vector
count_of_targets
int
number of target entity
target_entity_tags
tag_p_t
edge, face, curve or datum tags
flow_control [ 2 ]
int
flow control: start and end edge
0- no, 1-perpend, 2-IsoU, 3-IsoV , 4-adjacent
adjacent_vec [ 2 ]  [ 3 ]
double
direction of adjacent direction
side_lock [ 2 ]
int
start or end side lock on/off
opposite_lock
int
opposite lock: 0:no, 1:G0, 2:G1, 3:G2, 4:G3
match_exact
int
exact on/off
match_end_to_end
int
end to end on/off
limit_pole_move
int
limit pole movement: 0-no limit, 1-project, 2-use vector,
3-fix begin, 4-fix end, 5-fix both
move_direction_tag
tag_t
direction tag if limit pole move
match_edge_degree
int
degree of the edit edge
match_edge_patches
int
number of Bezier patches along edit edge
lateral_edge_degree
int
degree of the lateral edges
lateral_edge_patches
int
number of Bezier patches along lateral edges

------------

UF_MODL - UF_MODL_mswp_extrude_s
UF_MODL_mswp_extrude_s
(view source)
Defined in: uf_modl_mswp_types.h
Also known as:
UF_MODL_mswp_extrude_t
UF_MODL_mswp_extrude_p_t
Overview
The main data structure for Extrude
Data Members
section
tag_t
direction
tag_t
dist_tol
double
chain_tol
double
planar_tol
double
angle_tol
double
limits
UF_MODL_mswp_limits_t
offsets
UF_MODL_mswp_offsets_t
taper
UF_MODL_mswp_taper_t
sign
UF_FEATURE_SIGN
target_body
tag_t
heal_geom
int
0 = no action
1 = fix the geometry defects of input curves
if within tolerance, including gap/overlay
between curves and off-planar condition for capping.
solid_preferred
logical
allow_self_intersecting_section
logical
openProfileSmartVolume
logical
the option for enabling open profile smart volume.
When this option is set to true, extends the tool volume
along open end points of the profile to find
closure with the target body.
closeProfileRule
int
the option defines how to extend the open profile
to form a proper intersection with the target body.
0 = FCI, Extends the open profile to form
the first complete intersection with the target
1 = LCI, Extends the open profile to form
the last complete intersection with the target
2 = CCI, For subtract boolean operation, extends the open profile
to form the last complete intersection if the profile lies
outside the target excluding the coincident portion.
Otherwise, uses the first complete intersection.
treatBsplineAsPline
int
-1 unset, 0= false; 1= true;

------------

UF_MODL - UF_MODL_mswp_limit_s
UF_MODL_mswp_limit_s
(view source)
Defined in: uf_modl_mswp_types.h
Also known as:
UF_MODL_mswp_limit_t
UF_MODL_mswp_limit_p_t
Data Members
limit_type
UF_MODL_mswp_limit_type_t
limit_data
UF_MODL_mswp_limit_data_t
surf_extend
logical
For until selected & face only

------------

UF_MODL - UF_MODL_mswp_limits_s
UF_MODL_mswp_limits_s
(view source)
Defined in: uf_modl_mswp_types.h
Also known as:
UF_MODL_mswp_limits_t
UF_MODL_mswp_limits_p_t
Data Members
symmetry
logical
True: end_limit will not be used
and the limit type is DISTANCE only;
False: both limits will be used
and the limit can be of any type.
start_limit
UF_MODL_mswp_limit_t
end_limit
UF_MODL_mswp_limit_t

------------

UF_MODL - UF_MODL_mswp_multi_taper_s
UF_MODL_mswp_multi_taper_s
(view source)
Defined in: uf_modl_mswp_types.h
Also known as:
UF_MODL_mswp_multi_taper_t
UF_MODL_mswp_multi_taper_p_t
Data Members
num_chains
int
Number of tangent chains for the section. This can't be determined by the user.
chains
UF_MODL_mswp_taper_chain_t *
Each chain contains a set of curve tags and an angle

------------

UF_MODL - UF_MODL_mswp_offsets_s
UF_MODL_mswp_offsets_s
(view source)
Defined in: uf_modl_mswp_types.h
Also known as:
UF_MODL_mswp_offsets_t
UF_MODL_mswp_offsets_p_t
Data Members
type
UF_MODL_mswp_offset_type_t
start_offset
UF_MODL_mswp_string_data_t
end_offset
UF_MODL_mswp_string_data_t

------------

UF_MODL - UF_MODL_mswp_string_data_s
UF_MODL_mswp_string_data_s
(view source)
Defined in: uf_modl_mswp_types.h
Also known as:
UF_MODL_mswp_string_data_t
UF_MODL_mswp_string_data_p_t
Overview
Single expression data that can be used by distance, angle, etc.
Data Members
string [ UF_MAX_EXP_BUFSIZE ]
char
expression_tag
tag_t

------------

UF_MODL - UF_MODL_mswp_taper_chain_s
UF_MODL_mswp_taper_chain_s
(view source)
Defined in: uf_modl_mswp_types.h
Also known as:
UF_MODL_mswp_taper_chain_t
UF_MODL_mswp_taper_chain_p_t
Data Members
angle
UF_MODL_mswp_string_data_t
back_angle
UF_MODL_mswp_string_data_t
num_curves
int
Number of curves in a tangent chain. This can be determined by section only.
curves
tag_t *
Output curves of a tangent chain in a section

------------

UF_MODL - UF_MODL_mswp_taper_s
UF_MODL_mswp_taper_s
(view source)
Defined in: uf_modl_mswp_types.h
Also known as:
UF_MODL_mswp_taper_t
UF_MODL_mswp_taper_p_t
Data Members
type
UF_MODL_mswp_taper_type_t
angle
UF_MODL_mswp_string_data_t
angle for simple taper
back_angle
UF_MODL_mswp_string_data_t
back angle for simple taper
multi_taper
UF_MODL_mswp_multi_taper_t
multi-taper

------------

UF_MODL - UF_MODL_mswp_until_selected_data_s
UF_MODL_mswp_until_selected_data_s
(view source)
Defined in: uf_modl_mswp_types.h
Also known as:
UF_MODL_mswp_until_selected_data_t
UF_MODL_mswp_until_selected_data_p_t
Data Members
selected_object
tag_t

------------

UF_MODL - UF_MODL_offset_trans_faces_s
UF_MODL_offset_trans_faces_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_offset_trans_faces_t
UF_MODL_offset_trans_faces_p_t
Data Members
faces
UF_MODL_faces_p_t
The faces to be offset or
translated.
method_type
UF_MODL_offset_trans_type_t
Indication of whether the faces
are to be offset or translated.
distance [ MAX_LINE_BUFSIZE ]
char
A character string containing the
constant value to offset or
translate the given faces.
direction
UF_MODL_vector_p_t
A vector defining the direction
of translation, only used if
method_type is
UF_MODL_TRANSLATION_OF_FACES. It
can be NULL otherwise.

------------

UF_MODL - UF_MODL_parent_disp_info_s
UF_MODL_parent_disp_info_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_disp_info_t
UF_MODL_disp_info_p_t
Data Members
eid
tag_t
Parent curve's entity ID
layer_number
int
Parent curve's original layer number
blank_status
int
Parent curve's original blank status
change_status
logical
Change in any display status of parent curve

------------

UF_MODL - UF_MODL_parm_constant_s
UF_MODL_parm_constant_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_parm_constant_t
Overview
method_type == UF_MODL_PARM_CONSTANT
Data Members
value [ MAX_LINE_BUFSIZE ]
char
A character string containing the constant
value desired, note that this string can be
a numeric value (e.g., "25"), a fully
defined expression (e.g., "p5=25"), an
existing expression name (e.g., "p5"), or
an expression string (i.e.,"p5+p7"). If
the fully defined expression exists then
the expression will be edited. If the
expression name does not exist then an
error occurs. Otherwise an expression
is created.

------------

UF_MODL - UF_MODL_parm_law_no_spine_s
UF_MODL_parm_law_no_spine_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_parm_law_no_spine_t
Overview
method_type == UF_MODL_PARM_LAW_NO_SPINE
Data Members
law
UF_MODL_law_no_spine_p_t
Definition of the law.

------------

UF_MODL - UF_MODL_parm_law_spine_s
UF_MODL_parm_law_spine_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_parm_law_spine_t
Overview
method_type == UF_MODL_PARM_LAW_SPINE
Data Members
law
UF_MODL_law_spine_p_t
Definition of the law.

------------

UF_MODL - UF_MODL_parm_s
UF_MODL_parm_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_parm_t
UF_MODL_parm_p_t
Overview
The following structure is used to define input parameters
when there is an option between using a constant value or
a law.
Data Members
method_type
UF_MODL_parm_method_t
Indication of how the
parameter is being defined,
either through a constant
value, of which an expression
is made, or by a law.
defined_by
UF_MODL_parm_defined_by_union_t
Definition of the parameter

------------

UF_MODL - UF_MODL_pocketpad_outline_double_outline_corner_s
UF_MODL_pocketpad_outline_double_outline_corner_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_pocketpad_outline_double_outline_corner_t
Overview
outline_type == UF_MODL_DOUBLE_OUTLINE_CORNER or
outline_type == UF_MODL_DOUBLE_OUTLINE_NO_ATTACH
Data Members
placement_curves
UF_MODL_project_curves_p_t
The curves making up the
outline for the placement
faces.
placement_curves_represent
UF_MODL_curves_represent_t
Indication of
whether the curves
represent theoreticals or
tangents.
floor_top_curves
UF_MODL_project_curves_p_t
The curves making up the
outline for the floor/top
faces.
floor_top_curves_represent
UF_MODL_curves_represent_t
Indication of
whether the curves
represent theoreticals or
tangents.
corner_radius
UF_MODL_parm_p_t
The parameter containing
the radius value desired
for "corner" of
non-smooth outlines.
Non-smooth outlines are
outlines whose curve
tangents are not within
angle tolerance across
their end points. This
radius is applied on
the side of the
pocket/pad at these
points.

------------

UF_MODL - UF_MODL_pocketpad_outline_double_outline_s
UF_MODL_pocketpad_outline_double_outline_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_pocketpad_outline_double_outline_t
Overview
outline_type == UF_MODL_DOUBLE_OUTLINE
Data Members
placement_curves
UF_MODL_project_curves_p_t
The curves making up the
outline for the placement
faces.
placement_curves_represent
UF_MODL_curves_represent_t
Indication of
whether the curves
represent theoreticals or
tangents.
floor_top_curves
UF_MODL_project_curves_p_t
The curves making up the
outline for the floor/top
faces.
floor_top_curves_represent
UF_MODL_curves_represent_t
Indication of
whether the curves
represent theoreticals or
tangents.

------------

UF_MODL - UF_MODL_pocketpad_outline_s
UF_MODL_pocketpad_outline_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_pocketpad_outline_t
UF_MODL_pocketpad_outline_p_t
Overview
The general pocket/pad functions use this structure to define the
outline to specify the shape of the pocket/pad. This structure also
defines whether the pocket/pad is created with a single outline at
either the placement faces, or the floor/top faces of the pocket/pad, or
with outlines at both the placement faces and the floor/top faces of
the pocket/pad.
Data Members
outline_type
UF_MODL_pocketpad_type_t
Indication of whether the pocket/pad
is being defined with a single
outline at either the placement face
or the floor/top face of the
pocket/pad, or if the pocket/pad is
being defined with outlines at both
the placement face and the floor/top
face of the pocket/pad.
Also controls if the pocket/pad will
be booleaned to a target solid or
not
defined_by
UF_MODL_pocketpad_outline_defined_by_t
The definition of the pocket/pad.

------------

UF_MODL - UF_MODL_pocketpad_outline_single_outline_corner_s
UF_MODL_pocketpad_outline_single_outline_corner_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_pocketpad_outline_single_outline_corner_t
Overview
outline_type == UF_MODL_SINGLE_OUTLINE_CORNER  or
outline_type == UF_MODL_SINGLE_OUTLINE_NO_ATTACH
Data Members
outline_curves
UF_MODL_project_curves_p_t
The curves making up the
outline.
curves_represent
UF_MODL_curves_represent_t
Indication of whether
the curves represent
theoreticals or tangents
outline_represents
UF_MODL_outline_represents_t
Indication of whether
this outline is defining
the shape of the
pocket/pad at the
placement face of the
pocket/pad, at the
floor face o the pocket,
or at the top face
of the pad.
taper_angle
UF_MODL_parm_p_t
The parameter containing
the angle value for the
taper.
taper_relative_to
UF_MODL_taper_relative_to_t
Indication of how the
taper angle is measured,
either relative to the
face normals or to a
fixed vector.
taper_vector
UF_MODL_vector_p_t
The vector from which
the taper angle is
measured, if the taper
is relative to a fixed
vector.
corner_radius
UF_MODL_parm_p_t
The parameter containing
the radius value desired
for "corner" of
non-smooth outlines.
Non-smooth outlines are
outlines whose curve
tangents are not within
angle tolerance across
their end points. This
radius is applied on
the side of the
pocket/pad at these
points.

------------

UF_MODL - UF_MODL_project_curves_s
UF_MODL_project_curves_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_project_curves_t
UF_MODL_project_curves_p_t
Overview
This structure is used in various functions to define a set of curves that
is then subsequently projected along the specified vector. The
function also requires the input of faces/planes/datum_planes to
define the target of the projection.
Data Members
number_of_curves
int
The number of curves in the
following array.
curves
tag_t *
The array of curves.
curve_projection_type
UF_MODL_proj_type_t
Indication of whether the
curves should be projected
along their plane normal or
along the following vector.
curve_projection_vector
UF_MODL_vector_p_t
The vector along which to
project the curves, if
curve_projection_type is
UF_MODL_PROJ_ALONG_VECTOR.

------------

UF_MODL - UF_MODL_quilt_data_s
UF_MODL_quilt_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_quilt_data_t
UF_MODL_quilt_data_p_t
Data Members
check_overlap
UF_MODL_overlap_check_t
flag for controlling overlap checking
= UF_MODL_OVERLAP_CHECK_OFF
= UF_MODL_OVERLAP_CHECK_ON
num_target_faces
int
number of tags in target_faces
array
target_faces
tag_t *
array of target faces tags
inside_distance
char *
interior distance tolernace
inside_angle
char *
interior angular tolerance in
degrees
edge_distance
char *
edge distance tolerance
edge_angle
char *
edge angular tolerance in degrees

------------

UF_MODL - UF_MODL_ray_hit_point_info_s
UF_MODL_ray_hit_point_info_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_ray_hit_point_info_t
UF_MODL_ray_hit_point_info_p_t
Data Members
hit_point [ 3 ]
double
Point coord where ray hit the target
hit_normal [ 3 ]
double
Normal of the target at the hit point
hit_face
tag_t
Face tag at the hit point (tag of prototype)
hit_body
tag_t
Body tag at the hit point (tag of original input occurrence )

------------

UF_MODL - UF_MODL_reblend_face_data_s
UF_MODL_reblend_face_data_s
(view source)
Defined in: uf_modl_dfo.h
Also known as:
UF_MODL_reblend_face_data_t
UF_MODL_reblend_face_data_p_t
Data Members
num_chains
int
number of selected chains
radius [ UF_MAX_EXP_BUFSIZE ]
char
reblend radius
chain_data
UF_MODL_reblend_chain_p_t
chain data of selected faces

------------

UF_MODL - UF_MODL_reblend_face_s
UF_MODL_reblend_face_s
(view source)
Defined in: uf_modl_dfo.h
Also known as:
UF_MODL_reblend_chain_t
UF_MODL_reblend_chain_p_t
Data Members
chained
logical
a face is chained or not
n_faces
int
number of selected faces of a chain
faces_eid
tag_t *
EIDs of selected faces of a chain

------------

UF_MODL - UF_MODL_refit_face_data_s
UF_MODL_refit_face_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_refit_face_data_t
UF_MODL_refit_face_data_p_t
Overview
Following is a structure definition for refit face feature data.
It includes all the input elements to create a Refit Face feature.
Parameters are to be specified as follows:
1.Face
2.Target data
3.Refit direction
4.Refit method
5.Desired U degree (integer between 1 and 24)
6.Desired U number of patches (positive integer)
7.Desired V degree (integer between 1 and 24)
8.Desired V number of patches (positive integer)
9.umin edge continuity
10.umax edge continuity
11.vmin edge continuity
12.vmax edge continuity
13.Tolerance (any number larger than 0)
14.Smoothness (any number between 0 and 100)
15.Modification percentage (any number between 0 and 100)
Data Members
face
tag_t
NX eid of a face to be refit
target_data
UF_MODL_refit_face_target_data_p_t
target data
direction_data
int
Surface refitting direction
method_data
int
Surface refitting method
u_deg_int_data
int
Degree in U
u_patch_int_data
int
Number of patches in U
v_deg_int_data
int
Degree in V
v_patch_int_data
int
Number of patches in V
umin_cnstr_data
UF_MODL_refit_face_continuity_t
umin edge continuity
umax_cnstr_data
UF_MODL_refit_face_continuity_t
umax edge continuity
vmin_cnstr_data
UF_MODL_refit_face_continuity_t
vmin edge continuity
vmax_cnstr_data
UF_MODL_refit_face_continuity_t
vmax edge continuity
tolerance_real_data
double
Tolerance
smoothness_real_data
double
Smoothness (only with target)
percentage_real_data
double
Modification percentage (only with target)

------------

UF_MODL - UF_MODL_refit_face_target_data_s
UF_MODL_refit_face_target_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_refit_face_target_data_t
UF_MODL_refit_face_target_data_p_t
Overview
Following is a structure definition for refit face target data.
Parameters are to be specified as follows:
1.Number of target objects
2.Target objects
3.Fit direction
4.Maximum checking distance (any positive number)
Data Members
n_target_obj
int
Number of target objects
target_obj
tag_t *
Target objects
fit_direction_data
UF_MODL_refit_face_fit_direction_t
Fit direction
max_checking_data
double
Maximum checking distance

------------

UF_MODL - UF_MODL_replace_features_t
UF_MODL_replace_features_t
(view source)
Defined in: uf_modl.h
Data Members
original_entity
tag_t
Edge or face created by an
original_feature[]
replacement_entity
tag_t
Corresponding edge or face
created by a replacement_feature[]

------------

UF_MODL - UF_MODL_ripedge_data_s
UF_MODL_ripedge_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_ripedge_data_t
UF_MODL_ripedge_data_p_t
Data Members
n_ripedges
int
Number of rip edges
ripedges
tag_p_t
Array of rip edges
add_tangent
logical
To add tangent edges or not
gap_type
int
0 - Gap, 1 - Offset
gap [ UF_MAX_EXP_BUFSIZE ]
char
Gap value Gap type
offset [ UF_MAX_EXP_BUFSIZE ]
char
Offset value - Offset type
extension [ UF_MAX_EXP_BUFSIZE ]
char
extension value
end_condition
int
0 - Rectangular, 1 - Obround

------------

UF_MODL - UF_MODL_rough_offset_s
UF_MODL_rough_offset_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_rough_offset_t
UF_MODL_rough_offset_p_t
Data Members
entities
tag_t *
Offset entities: face or sheet body
num_entities
int
Number of offset entities
smart_csys
tag_t
The tag for a coordinate system, of which
Z axis indicates the offset direction,
X axis the stepping direction, and Y axis
the stepover direction. WCS would be
used if NULL_TAG
offset_distance [ UF_MAX_EXP_BUFSIZE ]
char
Offset distance
offset_deviation [ UF_MAX_EXP_BUFSIZE ]
char
Offset distance deviation
stepover_distance [ UF_MAX_EXP_BUFSIZE ]
char
Stepover distance
surf_method
UF_RSO_surf_method_t
Surface generation method:
UF_RSO_SURF_METHOD_CLOUD: Cloud Points
UF_RSO_SURF_METHOD_THRU: Through Curves
UF_RSO_SURF_METHOD_ROUGH_FIT: Rough Fit
surf_ctrl_type
UF_RSO_surf_ctrl_option_t
Surface control type:
UF_RSO_SURF_CTRL_BY_SYSTEM: System Defined
UF_RSO_SURF_CTRL_BY_USER: User Defined
It is used only when surf_method is
UF_RSO_SURF_METHOD_CLOUD
u_patches
int
Number of U patches when the surface
control type UF_RSO_SURF_CTRL_BY_USER
boundary_trim
UF_RSO_trim_option_t
Boundary trimming option:
UF_RSO_TRIM_OPT_NO: No Trimming
UF_RSO_TRIM_OPT_YES: Trimming
UF_RSO_TRIM_OPT_BND_CURVE: Boundary Curve
only

------------

UF_MODL - UF_MODL_secsrf_data_s
UF_MODL_secsrf_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_secsrf_data_t
UF_MODL_secsrf_data_p_t
Overview
Section Surface data Structure
Currently there are 18 different Section surface construction techniques. Each
requiring a different combination of construction geometry and data. Below is
the common data used for all of the section surfaces.
Given:
UF_MODL_secsrf_data_t section_surface;
section_surface.polynomial_status = 0; Conic - since rational B-spline curves
can represent conic curves exactly, this
option produces a true, exact conic shape
with no reversals in curvature. It accepts
rho values between 0.0001 and 0.9999.
Parameterization may be highly nonuniform.
The Conic option does not work for fillet-cubic,
ends-slopes-rho, and ends-slopes-cubic section
features. If you choose Conic when creating one
of these section types, the system ignores your
choice and uses Cubic instead.
section_surface.polynomial_status = 1; Cubic - these curves have roughly the same shape
as their rational counterparts (used in the Conic
option) but produce a surface with a better
parameterization. This option distributes the flow
lines along the entire curve, but does not produce
exact conic shapes. For example, rho values greater
than 0.75 create section curves which are not shaped
like a conic. For this reason, the maximum rho allowed
when creating polynomial cubic sections is 0.75.
section_surface.polynomial_status = 2; Quintic - the surfaces are degree 5, and are C2
(curvature continuous) between patches.
section_surface.tolerance = any valid NX tolerance value;
section_surface.direction_indicator = 1; create surface in the direction of the
face normal
section_surface.direction_indicator = -1; create surface opposite the face normal
(UF_MODL_secsrf_point_radius_angle_arc only)
The following shows the options for section surface that contain rho
data: UF_MODL_secsrf_ends_apex_rho, UF_MODL_secsrf_ends_slopes_rho and
UF_MODL_secsrf_fillet_rho section surfaces. Valid rho values are described in
the "Section" section of the "Free Form Features" chapter of the Modeling User
Manual.
If a section surface has no rho data the rho method should be set to
the following.
section_surface.rho_data.data_method = UF_MODL_secsrf_no_data;
If the rho method is set to a constant rho then a valid rho value must
be placed in data_values structure.
section_surface.rho_data.data_method =    UF_MODL_secsrf_constant;
section_surface.rho_data.data_values.data_constant = valid rho value;
If the rho method is set to a linear or cubic rho then a valid rho value
must be placed in data_values structure.  The expression tag will take
precedence over the a real value. Both rho values need to be populated.
section_surface.rho_data.data_method = UF_MODL_secsrf_linear or
UF_MODL_secsrf_cubic;
section_surface.rho_data.data_values.data_value[0]=valid rho value;
or section_surface.rho_data.data_values.data_exp[0]=expression tag;
and
section_surface.rho_data.data_values.data_value[1]=valid rho value;
or section_surface.rho_data.data_values.data_exp[1]=expression tag;
If the rho method is set to least tension then the rho_values must be
set to NULL.
section_surface.rho_data.data_method = UF_MODL_secsrf_tension;
section_surface.rho_data.data_values.general_law = NULL;
If the rho value is set to general the user is required NOT to change
the data_values.
section_surface.rho_data.data_method = UF_MODL_secsrf_general;
section_surface.rho_data.data_values.general_law = pointer data to
a law function;
The following shows the options for section surface that contain
radius data: UF_MODL_secsrf_two_points_radius and
UF_MODL_secsrf_point_radius_angle_arc section surfaces. Valid
radius values are described in the Section Surface documentation.
If a section surface has no radius data the data method should be set
to the following.
section_surface.radius_data.data_method = UF_MODL_secsrf_no_data;
If the radius method is set to a constant radius then a valid radius
value must be placed in data_values structure.
section_surface.radius_data.data_method = UF_MODL_secsrf_constant;
section_surface.radius_data.data_values.data_constant = valid radius value;
If the radius method is set to a linear or cubic then a valid radius
value must be placed in data_values structure.  The expression tag will
take precedence over the a real value. Both radius values need to be populated.
section_surface.radius_data.data_method = UF_MODL_secsrf_linear or
UF_MODL_secsrf_cubic;
section_surface.radius_data.data_values.data_value[0]=valid radius value; or
section_surface.radius_data.data_values.data_exp[0]=expression tag;
and
section_surface.radius_data.data_values.data_value[1]=valid radius value; or
section_surface.radius_data.data_values.data_exp[1]=expression tag;
If the radius value is set to general the user is required NOT to
change the data_values.
section_surface.radius_data.data_method = UF_MODL_secsrf_general;
section_surface.radius_data.data_values.general_law = pointer data
to a law function;
The following shows the options for a section surface that contain
angle data:  UF_MODL_secsrf_point_radius_angle_arc section
surface. Valid angle values are described in the Section Surface
documentation.
If a section surface has no angle data the data method should be set to
the following.
section_surface.angle_data.data_method = UF_MODL_secsrf_no_data;
If the angle method is set to a constant angle then a valid angle value
must be placed in data_values structure.
section_surface.angle_data.data_method = UF_MODL_secsrf_constant;
section_surface.angle_data.data_values.data_constant = valid angle value;
If the angle method is set to a linear or cubic angle then a valid angle
value must be placed in data_values structure.  The expression tag will
take precedence over the a real value. Both angle values need to be populated.
section_surface.angle_data.data_method = UF_MODL_secsrf_linear or
UF_MODL_secsrf_cubic;
section_surface.angle_data.data_values.data_value[0]=valid angle value; or
section_surface.angle_data.data_values.data_exp[0]=expression tag;
and
section_surface.angle_data.data_values.data_value[1]=valid angle value; or
section_surface.angle_data.data_values.data_exp[1]=expression tag;
If the angle value is set to general the user is required NOT to change
the data_values.
section_surface.angle_data.data_method = UF_MODL_secsrf_general;
section_surface.angle_data.data_values.general_law = pointer data
to a law function;
Note: The UF_MODL_secsrf_general data method can not be used
directly. It is a place holder for any section surface which contains a
law value that is populated during an UF_MODL_ask_section_surface call.  Do
not modify this data.
The following is a list of each type and their required geometry tags and data.
section_surface.create_method = UF_MODL_secsrf_five_points;
section_surface.control_strings[0] = Start curve tag;
section_surface.control_strings[1] = First interior curve tag;
section_surface.control_strings[2] = Second interior curve tag;
section_surface.control_strings[3] = Third interior curve tag;
section_surface.control_strings[4] = End curve tag;
section_surface.control_strings[5] = NULL;
section_surface.spine_string = Spine curve tag;
section_surface.rho_data = NULL;
section_surface.tangent_faces[0] = NULL;
section_surface.tangent_faces[1] = NULL;
section_surface.radius_data = NULL;
section_surface.angle_data = NULL;
section_surface.create_method = UF_MODL_secsrf_four_points_slope;
section_surface.control_strings[0] = Start curve tag;
section_surface.control_strings[1] = Start slope curve tag;
section_surface.control_strings[2] = First interior curve tag;
section_surface.control_strings[3] = Second interior curve tag;
section_surface.control_strings[4] = End curve tag;
section_surface.control_strings[5] = NULL;
section_surface.spine_string = Spine curve tag;
section_surface.rho_data = NULL;
section_surface.tangent_faces[0] = NULL;
section_surface.tangent_faces[1] = NULL;
section_surface.radius_data = NULL;
section_surface.angle_data = NULL;
section_surface.create_method = UF_MODL_secsrf_ends_slopes_shoulder;
section_surface.control_strings[0] = Start curve tag;
section_surface.control_strings[1] = Start slope curve tag;
section_surface.control_strings[2] = End curve tag;
section_surface.control_strings[3] = End slope curve tag;
section_surface.control_strings[4] = Shoulder curve tag;
section_surface.control_strings[5] = NULL;
section_surface.spine_string = Spine curve tag;
section_surface.rho_data = NULL;
section_surface.tangent_faces[0] = NULL;
section_surface.tangent_faces[1] = NULL;
section_surface.radius_data = NULL;
section_surface.angle_data = NULL;
section_surface.create_method = UF_MODL_secsrf_ends_apex_shoulder;
section_surface.control_strings[0] = Start curve tag;
section_surface.control_strings[1] = Apex curve tag;
section_surface.control_strings[2] = End curve tag;
section_surface.control_strings[3] = Shoulder curve tag;
section_surface.control_strings[4] = NULL;
section_surface.control_strings[5] = NULL;
section_surface.spine_string = Spine curve tag;
section_surface.rho_data = NULL;
section_surface.tangent_faces[0] = NULL;
section_surface.tangent_faces[1] = NULL;
section_surface.radius_data = NULL;
section_surface.angle_data = NULL;
section_surface.create_method = UF_MODL_secsrf_ends_apex_rho;
section_surface.control_strings[0] = Start curve tag;
section_surface.control_strings[1] = Apex curve tag;
section_surface.control_strings[2] = End curve tag;
section_surface.control_strings[3] = NULL;
section_surface.control_strings[4] = NULL;
section_surface.control_strings[5] = NULL;
section_surface.spine_string = Spine curve tag;
section_surface.rho_data = must be populated
section_surface.tangent_faces[0] = NULL;
section_surface.tangent_faces[1] = NULL;
section_surface.radius_data = NULL;
section_surface.angle_data = NULL;
section_surface.create_method = UF_MODL_secsrf_ends_slopes_rho;
section_surface.control_strings[0] = Start curve tag;
section_surface.control_strings[1] = Start Slope curve tag;
section_surface.control_strings[2] = End curve tag;
section_surface.control_strings[3] = End Slope curve tag;
section_surface.control_strings[4] = NULL;
section_surface.control_strings[5] = NULL;
section_surface.spine_string = Spine curve tag;
section_surface.rho_data = must be populated
section_surface.tangent_faces[0] = NULL;
section_surface.tangent_faces[1] = NULL;
section_surface.radius_data = NULL;
section_surface.angle_data = NULL;
section_surface.create_method = UF_MODL_secsrf_ends_slope_arc;
section_surface.control_strings[0] = Start curve tag;
section_surface.control_strings[1] = Start Slope curve tag;
section_surface.control_strings[2] = End curve tag;
section_surface.control_strings[3] = NULL;
section_surface.control_strings[4] = NULL;
section_surface.control_strings[5] = NULL;
section_surface.spine_string = Spine curve tag;
section_surface.rho_data = NULL;
section_surface.tangent_faces[0] = NULL;
section_surface.tangent_faces[1] = NULL;
section_surface.radius_data = NULL;
section_surface.angle_data = NULL;
section_surface.create_method = UF_MODL_secsrf_three_points_arc;
section_surface.control_strings[0] = Start curve tag;
section_surface.control_strings[1] = First Interior curve tag;
section_surface.control_strings[2] = End curve tag;
section_surface.control_strings[3] = NULL;
section_surface.control_strings[4] = NULL;
section_surface.control_strings[5] = NULL;
section_surface.spine_string = Spine curve tag;
section_surface.rho_data = NULL;
section_surface.tangent_faces[0] = NULL;
section_surface.tangent_faces[1] = NULL;
section_surface.radius_data = NULL;
section_surface.angle_data = NULL;
section_surface.create_method = UF_MODL_secsrf_fillet_shoulder;
section_surface.control_strings[0] = Curve tag on first face;
section_surface.control_strings[1] = Curve tag on second face;
section_surface.control_strings[2] = Shoulder curve tag;
section_surface.control_strings[3] = NULL;
section_surface.control_strings[4] = NULL;
section_surface.control_strings[5] = NULL;
section_surface.spine_string = Spine curve tag;
section_surface.rho_data = NULL;
section_surface.tangent_faces[0] = First face tag;
section_surface.tangent_faces[1] = Second face tag;
section_surface.radius_data = NULL;
section_surface.angle_data = NULL;
section_surface.create_method = UF_MODL_secsrf_fillet_rho;
section_surface.control_strings[0] = Curve tag on first face;
section_surface.control_strings[1] = Curve tag on second face;
section_surface.control_strings[2] = NULL;
section_surface.control_strings[3] = NULL;
section_surface.control_strings[4] = NULL;
section_surface.control_strings[5] = NULL;
section_surface.spine_string = Spine curve tag;
section_surface.rho_data = must be populated with rho data
section_surface.tangent_faces[0] = First face tag;
section_surface.tangent_faces[1] = Second face tag;
section_surface.radius_data = NULL;
section_surface.angle_data = NULL;
section_surface.create_method = UF_MODL_secsrf_ends_slopes_hilite;
section_surface.control_strings[0] = Start curve tag;
section_surface.control_strings[1] = Start Slope curve tag;
section_surface.control_strings[2] = End curve tag;
section_surface.control_strings[3] = End Slope curve tag;
section_surface.control_strings[4] = Start highlight curve tag;
section_surface.control_strings[5] = End highlight curve tag;
section_surface.spine_string = Spine curve tag;
section_surface.rho_data = NULL;
section_surface.tangent_faces[0] = NULL;
section_surface.tangent_faces[1] = NULL;
section_surface.radius_data = NULL;
section_surface.angle_data = NULL;
section_surface.create_method = UF_MODL_secsrf_ends_apex_hilite;
section_surface.control_strings[0] = Start curve tag;
section_surface.control_strings[1] = Apex curve tag;
section_surface.control_strings[2] = End curve tag;
section_surface.control_strings[3] = Start highlight curve tag;
section_surface.control_strings[4] = End highlight curve tag;
section_surface.control_strings[5] = NULL;
section_surface.spine_string = Spine curve tag;
section_surface.rho_data = NULL;
section_surface.tangent_faces[0] = NULL;
section_surface.tangent_faces[1] = NULL;
section_surface.radius_data = NULL;
section_surface.angle_data = NULL;
section_surface.create_method = UF_MODL_secsrf_fillet_hilite;
section_surface.control_strings[0] = Curve tag on first face;
section_surface.control_strings[1] = Curve tag on second face;
section_surface.control_strings[3] = Start highlight curve tag;
section_surface.control_strings[4] = End highlight curve tag;
section_surface.control_strings[5] = NULL;
section_surface.spine_string = Spine curve tag;
section_surface.rho_data = must be populated with rho data
section_surface.tangent_faces[0] = Face tag one;
section_surface.tangent_faces[1] = Face tag two;
section_surface.radius_data = NULL;
section_surface.angle_data = NULL;
section_surface.create_method = UF_MODL_secsrf_two_points_radius;
section_surface.control_strings[0] = Start curve tag;
section_surface.control_strings[1] = End curve tag;
section_surface.control_strings[2] = NULL;
section_surface.control_strings[3] = NULL;
section_surface.control_strings[4] = NULL;
section_surface.control_strings[5] = NULL;
section_surface.spine_string = Spine curve tag;
section_surface.rho_data = NULL;
section_surface.tangent_faces[0] = NULL;
section_surface.tangent_faces[1] = NULL;
section_surface.radius_data = must be populated with radius data
section_surface.angle_data = NULL;
section_surface.create_method = UF_MODL_secsrf_ends_slopes_cubic;
section_surface.control_strings[0] = Start curve tag;
section_surface.control_strings[1] = Start Slope  curve tag;
section_surface.control_strings[2] = End curve tag;
section_surface.control_strings[3] = End Slope curve tag;
section_surface.control_strings[4] = NULL;
section_surface.control_strings[5] = NULL;
section_surface.spine_string = Spine curve tag;
section_surface.rho_data = NULL;
section_surface.tangent_faces[0] = NULL;
section_surface.tangent_faces[1] = NULL;
section_surface.radius_data = NULL;
section_surface.angle_data = NULL;
section_surface.create_method = UF_MODL_secsrf_fillet_cubic;
section_surface.control_strings[0] = Curve tag on first face;
section_surface.control_strings[1] = Curve tag on second face;
section_surface.control_strings[2] = NULL;
section_surface.control_strings[3] = NULL;
section_surface.control_strings[4] = NULL;
section_surface.control_strings[5] = NULL;
section_surface.spine_string = Spine curve tag;
section_surface.rho_data = NULL;
section_surface.tangent_faces[0] = First face tag;
section_surface.tangent_faces[1] = Second face tag;
section_surface.radius_data = NULL;
section_surface.angle_data = NULL;
section_surface.create_method = UF_MODL_secsrf_point_radius_angle_arc;
section_surface.control_strings[0] = Start curve tag;
section_surface.control_strings[1] = NULL;
section_surface.control_strings[2] = NULL;
section_surface.control_strings[3] = NULL;
section_surface.control_strings[4] = NULL;
section_surface.control_strings[5] = NULL;
section_surface.spine_string = Spine curve tag;
section_surface.rho_data = NULL;
section_surface.tangent_faces[0] = First face tag;
section_surface.tangent_faces[1] = NULL;
section_surface.radius_data = must be populated with radius data
section_surface.angle_data = must be populated with angle data;
section_surface.direction_indicator = must be 1 or -1;
section_surface.create_method = UF_MODL_secsrf_full_circle;
section_surface.control_strings[0] = Guide edge curve tag;
section_surface.control_strings[1] = Orientation edge curve tag;
section_surface.control_strings[2] = NULL;
section_surface.control_strings[3] = NULL;
section_surface.control_strings[4] = NULL;
section_surface.control_strings[5] = NULL;
section_surface.spine_string = Spine curve tag;
section_surface.rho_data = NULL;
section_surface.tangent_faces[0] = NULL;
section_surface.tangent_faces[1] = NULL;
section_surface.radius_data = must be populated with radius data
section_surface.angle_data = NULL;
Data Members
create_method
UF_MODL_secsrf_cre_method_t
Creation Method
polynomial_status
int
Polynomial status
rho_data
UF_MODL_secsrf_param_t
Rho data
tolerance
double
Tolerance used to
create surface
tangent_faces [ 2 ]
tag_t
Face tags of tanget faces
control_strings [ 6 ]
UF_STRING_p_t
Control string Array
spine_string
UF_STRING_p_t
Spine curve string
radius_data
UF_MODL_secsrf_param_t
Radius law data
angle_data
UF_MODL_secsrf_param_t
Angle law data
direction_indicator
int
Surface direction

------------

UF_MODL - UF_MODL_secsrf_param_data_values_s
UF_MODL_secsrf_param_data_values_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_secsrf_param_data_values_t
Data Members
data_constant
double
Constant Law value
data_exp [ 2 ]
tag_t
Cubic/linear expression tags
data_value [ 2 ]
double
Cubic/linear law values
general_law
UF_MODL_parm_t *
general law structure

------------

UF_MODL - UF_MODL_secsrf_param_s
UF_MODL_secsrf_param_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_secsrf_param_t
UF_MODL_secsrf_param_p_t
Overview
Section Surface Generic data Stucture for laws, rho, etc.
You can define any type of law (not just constant, linear, and
cubic), by using the UF_MODL_parm_t structure.
For the UF_MODL_ask_section_surface function, if the section
surface queried uses a constant, linear, or cubic law, then those
types still return as constant, linear, or cubic.  However, if you use
any other type of law, it is noted as "UF_MODL_secsrf_general".
The data for that law appears in the data_values.general_law field of the
UF_MODL_secsrf_param structure.
Data Members
data_method
UF_MODL_secsrf_param_method_t
method type value
data_values
UF_MODL_secsrf_param_data_values_t

------------

UF_MODL - UF_MODL_self_refit_data_s
UF_MODL_self_refit_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_self_refit_data_t
UF_MODL_self_refit_data_p_t
Overview
The following structure holds data that is specific to the
UF_MODL_self_refit type of quilt surface.  This structure completely
defines all creation parameters of this type of surface.
Data Members
driver_surface
tag_t
driver b-surface
inside_distance
char *
interior distance tolernace
inside_angle
char *
interior angular tolerance in
degrees
edge_distance
char *
edge distance tolerance
edge_angle
char *
edge angular tolerance in degrees

------------

UF_MODL - UF_MODL_sflange_data_s
UF_MODL_sflange_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_sflange_data_t
UF_MODL_sflange_data_p_t
Overview
Data structure for creating a silhouette flange feature.
Data Members
type
UF_MODL_sflange_type_t
Silhouette flange type
dir_opt
UF_MODL_sflange_dir_t
Reference direction method.
It's the view direction if creating
a visual gap silhouette flange.
trim_opt
UF_MODL_sflange_trim_t
Trimming and attachment option
base_cont
UF_MODL_sflange_continuity_t
Continuity between base faces
and blend
flange_cont
UF_MODL_sflange_continuity_t
Continuity between blend and
flange
base_scale
int
transition scale to the flange
flange_scale
int
transition scale to the base faces
feature_tag
tag_t
An existing silhouette flange which is
referenced by the gap based silhouette flange.
NULL_TAG if creating a basic silhouette
flange.
curve
UF_STRING_p_t
Pointer to the base curves if creating
a basic silhouette flange.
No curves are needed for a gap-based
silhouette flange. Set #curve = 0.
n_faces
int
Number of the base faces
face_tags
tag_t *
Tag array of the base faces
vec_tag
tag_t
Smart vector tag if the reference direction
is a smart vector.
NULL_TAG if the reference direction method
is face normal.
radius
double
Radius of the constant radius pipe.
gap
double
Gap of a gap-based silhouette flange.
centerline_tag
tag_t
Centerline curve of the pipe of
the silhouette flange. The length & angle
laws will be created using this curve.
radius_law_parms
void *
Radius law parameters.
length_law_parms
void *
Length law parameters.
angle_law_parms
void *
Angle law parameters.
distance_tol
double
Distance tolerance
angle_tol
double
Angle tolerance
vec_0 [ 3 ]
double
Zero-degree vector at the middle point of
the pipe's centerline of the referenced
silhouette flange.
It's parallel to the face normal or the
smart vector dependent upon the reference
direction method.
This is needed only if creating a gap-based
silhouette flange.
vec_90 [ 3 ]
double
90-degree vector at the middle point of
the pipe's centerline of the referenced
silhouette flange.
It's parallel to the cross-product of the
curve tangent and the face normal or
the smart vector dependent upon the
reference direction method.
This is needed only if creating a gap-based
silhouette flange.
merge_faces
logical
If TRUE, merge faces whenever possible.
If FALSE, don't merge faces.
create_pipe_only
logical
If TRUE, only create the pipe, i.e.
no flange faces will be created.
If FALSE, both the fillet and flange faces
will be created.
flip_dir
logical
If TRUE, flip the side where the pipe
and flanges to be created wrt base faces.
flip_side
logical
If TRUE, flip the side where the pipe
and flanges to be created wrt to the edges
or the pipe of the referenced silhouette
flange.
extend_pipe
logical
If TRUE, extend the tube to the boundary
edges of the base faces at both ends.

------------

UF_MODL - UF_MODL_shape_pattern_client_dialog_data_s
UF_MODL_shape_pattern_client_dialog_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_shape_pattern_client_dialog_data_t
UF_MODL_shape_pattern_client_dialog_data_p_t
Overview
The following data structure will be used to define client data for
the ShapePattern user interface dialog, that allows users to choose a thumbnail picture from a list
Environment
Internal & External
See Also
UF_MODL_shape_pattern_create_dialog
History
Originally released in NX503
Data Members
PartName
char *
Part name
HoleName
char *
Hole name
iCountRecommendedShape
int
Number of recommended shapes
RecommendedShapeNames
char * *
Array of recommended shape names.
RecommendedShapeThumbnailImageNames
char * *
Array of recommended shape thumbnail image names.
RecommendedShapeLargeImageNames
char * *
Array of recommended shape large image names.
iCountOtherShape
int
Number of other shapes
OtherShapeNames
char * *
Array of other shape names.
OtherShapeThumbnailImageNames
char * *
Array of other shape thumbnail image names.
OtherShapeLargeImageNames
char * *
Array of other shape large image names.
NoImageBmpName
char *
special image name when there is no image found
CurrentHoleShapePatternName
char *
Current selected hole shape pattern name
CurrentLargeImageName
char *
Current large image name
iSelectedHoleShapeIndex
int
Current selected hole shape index, zero based
bSelFromRecommendedGroup
logical
If true, shape is selected from recommended group

------------

UF_MODL - UF_MODL_simpl_data_s
UF_MODL_simpl_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_simpl_data_t
UF_MODL_simpl_data_p_t
Overview
The UF_MODL_simpl_data_s structure contains the parametric information used
to define a simplification feature.
When the simplification feature is applied to a body, certain faces are
removed from the body, and the gaps are healed over (creating new faces if
necessary).  The faces to be removed are determined as follows:
All faces in the array <retained_faces> are retained.
Any face that can be reached from another retained face without crossing a
boundary edge is retained.
All other faces are removed. NOTE: The interactive Simplify dialog
automatically adds any boundary face to the retained_faces array. This must
be done by the caller of UF_MODL_create_simplify to achieve the same results.
The boundary edges are defined as follows:
All edges in the array <boundary_edges> are boundary edges.
None of the edges in the array <non_boundary_edges> are boundary edges.
All edges of faces in the array <boundary_faces>, except those edges in the
array <non_boundary_edges>, are also boundary edges.
All edges created by imprint features in the array <imprint_features>, except
those edges in the array <non_boundary_edges>, are also boundary edges.
The edges of holes on the body whose diameter is less than the current value
of <max_hole_dia_expression>, except those edges in the array
<non_boundary_edges>, are also boundary edges.  (Effectively, such holes are
removed.)  A hole is defined to be an inward-pointing full cylindrical face
or an inward-pointing full conical face.  To suppress this option, simply
pass in an expression evaluating to 0.0 or less.
The array <removed_faces> can be used to verify the simplification feature.
If any face in it would remain on the solid after the feature were created,
the feature is not actually created and the ifail
UF_MODL_SIMPL_FACE_NOT_REMOVED is returned.  This also applies if the feature
is previewed.
The following restrictions apply to simplify parms:
A face may be both a retained face and a boundary face, hence the two arrays
may have elements in common.
A retained or boundary face may not be a removed face.
At least one retained face must be supplied.
All faces must be on the same body.
The <boundary_edges> and the <non_boundary_edges> arrays can have no elements
in common.
In some cases, one or more faces cannot be removed at all, because the
surrounding faces cannot be healed across them, or because this would divide
the body into two or more disjoint pieces.  In this case, the ifail
UF_MODL_SIMPL_HEAL_FAILED is returned.  These cases cannot be detected by
previewing the simplification, only when it is actually applied.
Data Members
n_retained_faces
int
Number of retained faces
retained_faces
tag_t *
Array of retained faces
n_boundary_faces
int
Number of boundary faces
boundary_faces
tag_t *
Array of boundary faces
n_removed_faces
int
Number of removed faces
removed_faces
tag_t *
Array of removed faces
n_boundary_edges
int
Number of boundary edges
boundary_edges
tag_t *
Array of boundary edges
n_non_boundary_edges
int
Number of non-boundary edges
non_boundary_edges
tag_t *
Array of non-boundary edges
n_imprint_features
int
Number of imprint features
to apply
imprint_features
tag_t *
Array of imprint features
whose edges are to be
boundaries
max_hole_dia_expression
tag_t
Expression for maximum
diameter holes to remove

------------

UF_MODL - UF_MODL_single_outline_s
UF_MODL_single_outline_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_single_outline_t
Overview
outline_type == UF_MODL_SINGLE_OUTLINE
Data Members
outline_curves
UF_MODL_project_curves_p_t
The curves making up the
outline.
curves_represent
UF_MODL_curves_represent_t
Indication of whether
the curves represent
theoreticals or tangents
outline_represents
UF_MODL_outline_represents_t
Indication of whether
this outline is defining
the shape of the
pocket/pad at the
placement face of the
pocket/pad, at the
floor face o the pocket,
or at the top face
of the pad.
taper_angle
UF_MODL_parm_p_t
The parameter containing
the angle value for the
taper, if the
taper_relative_to setting
is
UF_MODL_TAPER_BY_OUTLINE_FACE_NORMALS
or
UF_MODL_TAPER_BY_OUTLINE_FIXED_VECTOR
then this should be an array
of UF_MODL_parm_t where each
is a law using the outline
curve/edge as the spine
taper_relative_to
UF_MODL_taper_relative_to_t
Indication of how the
taper angle is measured,
either relative to the
face normals or to a
fixed vector.
taper_vector
UF_MODL_vector_p_t
The vector from which
the taper angle is
measured, if the taper
is relative to a fixed
vector.

------------

UF_MODL - UF_MODL_smbend_corner_data_s
UF_MODL_smbend_corner_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_smbend_corner_data_t
UF_MODL_smbend_corner_data_p_t
Overview
smbend converted corner feature structure
Data Members
base_edge
tag_t
Base Face
radius [ UF_MAX_EXP_BUFSIZE ]
char
Bend Radius
radius_type
UF_MODL_smbend_radius_e_t
Radius Type
SMBEND_INNER_RADIUS
SMBEND_OUTER_RADIUS
stat_side
UF_MODL_smbend_stat_side_e_t
Stationary Side
SMBEND_AS_SPECIFIED
SMBEND_OPPOSITE_SIDE
baf [ UF_MAX_EXP_BUFSIZE ]
char
Bend Allowance Formula

------------

UF_MODL - UF_MODL_smbend_cylinder_data_s
UF_MODL_smbend_cylinder_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_smbend_cylinder_data_t
UF_MODL_smbend_cylinder_data_p_t
Overview
smbend converted cylinder feature structure
Data Members
base_face
tag_t
Base Face
stat_side
UF_MODL_smbend_stat_side_e_t
Stationary Side
SMBEND_AS_SPECIFIED
SMBEND_OPPOSITE_SIDE
baf [ UF_MAX_EXP_BUFSIZE ]
char
Bend Allowance Formula

------------

UF_MODL - UF_MODL_smbend_data_s
UF_MODL_smbend_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_smbend_data_t
UF_MODL_smbend_data_p_t
Overview
smbend feature structure
Data Members
base_face
tag_t
Base Face
app_curve
tag_t
Application Curve Tag
app_curve_type
UF_MODL_smbend_curve_e_t
Application Curve Type
SMBEND_NONE
SMBEND_BEND_CENTERLINE
SMBEND_BEND_AXIS
SMBEND_BEND_TANGENT_LINE
SMBEND_CONTOUR_LINE
SMBEND_MOLD_LINE
angle [ UF_MAX_EXP_BUFSIZE ]
char
Bend Angle
angle_type
UF_MODL_smbend_angle_e_t
Angle Type
SMBEND_BEND_ANGLE
SMBEND_INCLUDED_ANGLE
radius [ UF_MAX_EXP_BUFSIZE ]
char
Bend Radius
radius_type
UF_MODL_smbend_radius_e_t
Radius Type
SMBEND_INNER_RADIUS
SMBEND_OUTER_RADIUS
bend_dir
UF_MODL_smbend_direction_e_t
Bend Direction
SMBEND_AS_SPECIFIED
SMBEND_OPPOSITE_SIDE
stat_side
UF_MODL_smbend_stat_side_e_t
Stationary Side
SMBEND_AS_SPECIFIED
SMBEND_OPPOSITE_SIDE
baf [ UF_MAX_EXP_BUFSIZE ]
char
Bend Allowance Formula

------------

UF_MODL - UF_MODL_smbracket_data_s
UF_MODL_smbracket_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_smbracket_data_t
UF_MODL_smbracket_data_p_t
Data Members
base_face
tag_t
base face tag
ref_face
tag_t
reference face tag
mat_direction
logical
0 = inside - inside,
1 = outside - outside
base_outline_data
UF_MODL_bracket_outline_data_p_t
outline data for
ref face
ref_outline_data
UF_MODL_bracket_outline_data_p_t
outline data to
define the base pad
clr_dist
char *
clearance distance
bend_radius
char *
bend radius
chordal_tol
char *
chordal tolerance
linear_tol
char *
linear tolerance
mat_thickness
char *
Material thickness
rounded_flag
logical
0 - no fillets,
1 - fillets,
bend_allow_formula
char *
bend allowance formula
offset_dist
char *
dist by which ref face is offset
allow_sec_fail
logical
1 - allow general flange to
create , even if some sections
fail linear tolerance check.
0 - throw up error for this
outline_type
int
0 - between circles,
1 - normal to circles
2 - Use points. end_points will be
used here , when this option is 2
end_points [ 2 ]  [ 3 ]
double
Two points in ABS coordinates.
These points will be projected
on to the intersection curve and
will be used to define the width
of the bracket at the bend area
pick_points [ 2 ]  [ 3 ]
double
Two points in ABS coordinates.
These points will be used to
determine the quadrant in which
the bracket would be created.
The first point is on base face.
The second point is on reference
face.

------------

UF_MODL - UF_MODL_smcorner_data_s
UF_MODL_smcorner_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_smcorner_data_t
UF_MODL_smcorner_data_p_t
Data Members
corner_type
int
smcorner type
ref_edge
tag_t
side edge closest to the common edge
ref_face
tag_t
side face closest to the common edge
butt_gap [ UF_MAX_EXP_BUFSIZE ]
char
butt joint gap. used only
for butt joint.
butt_overlap [ UF_MAX_EXP_BUFSIZE ]
char
butt joint overlap.
Used only for butt joint
mc_offset [ UF_MAX_EXP_BUFSIZE ]
char
Machinery corner offset
mc_gap [ UF_MAX_EXP_BUFSIZE ]
char
Machinery corner gap
mc_linear_shape
logical
Machinery corner shape
use_enhanced_mach_corner
logical
Machinery corner shape
switch_parent_flag
logical
Switch parents or not. Used only
for butt and machinery corners.
simple_gap [ UF_MAX_EXP_BUFSIZE ]
char
simple miter gap. Used
only for simple miter.
miter_toggle
logical
multiple corners for simple and full
miters only

------------

UF_MODL - UF_MODL_smcutout_data_s
UF_MODL_smcutout_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_smcutout_data_t
UF_MODL_smcutout_data_p_t
Overview
This structure is used to define the parameters for constructing the
cross sectional shape of the bead.
NOTE: The discard region is calculated by a vector pointing to the region to
be discarded.  This vector, called the discard region vector, is the cross
product between the placement face normal and the tangent of the
combined curves in the "curves" array described above.
Therefore, it is important to know the order of the curves in the
"curves" array.  Reversing the order of these curves may reverse their
tangent when combined and thus reverse the discard region vector.
Data Members
placement_face
tag_t
Face to put cutout
n_curves
int
The number of curves
in the curves array.
curves
tag_t *
An array holding the
tags to the curves
that define the
outline shape of the
SMCutout
proj_method
UF_MODL_smcutout_direction_type_e_t
The method used to
determine the
projection vector of
the outline curves as
well as the direction
in which the cutout
will be punched
through the solid
body. Can be one of
UF_FACE_NORMALS:
project along the
placement face
reverse normal.
UF_ALONG_VECTOR:
project along a
given vector. See
proj_vector below.
UF_ALONG_DATUM_AXIS:
project along a
given datum axis.
See datum_axis
below.
proj_vector [ 3 ]
double
Used when proj_method
is UF_ALONG_VECTOR.
This is the vector
along which the outline
curves will be
projected. It also
indicates the vector
along which the cutout
will be punched through
the solid body.
datum_axis
tag_t
Used when proj_method
is UF_ALONG_DATUM_AXIS.
This is the tag of a
datum axis that will
be used to determine
the vector along which
the outline curves will
be projected. It also
indicates the vector
along which the cutout
will be punched through
the solid body.
flip_discard_region
logical
When true the discard
region is flipped from
its normal calculation.
See discussion above on
the discard region.
type
UF_MODL_smcutout_type_e_t
Punch or through
thru_face
tag_t
Through face

------------

UF_MODL - UF_MODL_smhole_data_s
UF_MODL_smhole_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_smhole_data_t
UF_MODL_smhole_data_p_t
Overview
The following structure is used when creating, editing, or querying a
sheet metal hole.
Data Members
diameter [ UF_MAX_EXP_BUFSIZE ]
char
Diameter of SMHole
depth [ UF_MAX_EXP_BUFSIZE ]
char
Depth of SMHole. Only
used for depth type
SMHoles
tip_angle [ UF_MAX_EXP_BUFSIZE ]
char
Tip angle of SMHole.
Only used for depth
type SMHoles
edge1
tag_t
Tag of the first
offset edge
offset1 [ UF_MAX_EXP_BUFSIZE ]
char
Offset distance from
first offset edge
edge2
tag_t
Tag of the second
offset edge
offset2 [ UF_MAX_EXP_BUFSIZE ]
char
Offset distance from
second offset edge
hole_face
tag_t
Tag of the face on
which the SMHole will
be placed
thru_face
tag_t
Tag of the face
through which the
Through SMHole will
be created
datum_axis
tag_t
Tag of the datum axis
used to determine the
angle of the central
axis of the SMHole.
Used with
UF_ALONG_DATUM_AXIS
method.
method
UF_MODL_smhole_direction_type_e_t
Method used to determine angle
of central axis of the SMHole.
UF_FACE_NORMALS = use face normals
UF_ALONG_VECTOR = use a vector
UF_ALONG_DATUM_AXIS = use a
datum axis
vec_dir [ 3 ]
double
Vector used to determine the
angle of the central axis of
the SMHole. Used with
UF_ALONG_VECTOR method
type
UF_MODL_smhole_type_e_t
Type of SMHole to be created.
UF_DEPTH_SMHOLE = depth type SMHole
UF_THROUGH_SMHOLE = thru type SMHole
UF_PUNCH_SMHOLE = punch type SMHole

------------

UF_MODL - UF_MODL_smjoggle_data_s
UF_MODL_smjoggle_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_smjoggle_data_t
UF_MODL_smjoggle_data_p_t
Data Members
base_face
tag_t
<I>
ref_face1
tag_t
<I>
ref_face2
tag_t
<I>
trans_start_edge
tag_t
<I> Transition start edge tag
trans_end_edge
tag_t
<I> Transition end edge tag
base_edge
tag_t
<I> Base_edge tag - in case an edge is
picked instead of clr points
point_on_rf1 [ 3 ]
double
<I> Pick point on ref face1, used to
infer mat direction, and to identify the
joggle creation side
point_on_rf2 [ 3 ]
double
<I> pick point on ref face2, used to
infer mat direction, and to identify the
joggle creation side
num_clr_pts
int
No. of clearance points, 1/2
clr_point1 [ 3 ]
double
<I> First clearance point
clr_point2 [ 3 ]
double
<I> Second Clearance point
mat_direction
logical
<I> inside-inside=0 , outside-outside=1
clr_dist
char *
<I> clearance distance
bend_radius1
char *
<I> Ref Face1 - Base Face bend radius
bend_radius2
char *
<I> Ref Face2 - Base Face bend radius
transition_radius
char *
<I> Ref Face - Trans Face blend radius
run
char *
<I>
table
logical
<I> Use table or not
edge_to_edge
logical
<I> Is joggle of edge_to_edge type?
mat_thickness
char *
<I> Material thickness
bend_allowance_formula
char *
<I>

------------

UF_MODL - UF_MODL_smpunch_cut_sets_s
UF_MODL_smpunch_cut_sets_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_smpunch_cut_sets_t
UF_MODL_smpunch_cut_sets_p_t
Overview
end of smbend enumerations
Data Members
num_curves
int
curves
tag_t *

------------

UF_MODL - UF_MODL_smpunch_data_s
UF_MODL_smpunch_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_smpunch_data_t
UF_MODL_smpunch_data_p_t
Data Members
punch_type
UF_MODL_punch_type_e_t
punch, lance, pierce, semi pierce
top_type
UF_MODL_smpunch_top_type_e_t
Offset, Flat, Round, Cone
proj_method
UF_MODL_smpunch_direction_type_e_t
Face, Vector, Axis
tool_center
tag_t
Tag for center of tool
placement_face
tag_t
Target face for punch
n_curves
int
Number of outline curves
curves
tag_t *
Outline curves
num_cut_curve_sets
int
Number of cutting curve sets
cut_curve_sets
UF_MODL_smpunch_cut_sets_t *
The curve sets
datum_axis
tag_t
Tag for datus axis
depth [ UF_MAX_EXP_BUFSIZE ]
char
String for Depth
die_radius [ UF_MAX_EXP_BUFSIZE ]
char
String for Die Radius
taper_angle [ UF_MAX_EXP_BUFSIZE ]
char
String for Taper Angle
punch_radius [ UF_MAX_EXP_BUFSIZE ]
char
String for Punch Radius
cone_depth [ UF_MAX_EXP_BUFSIZE ]
char
String for Cone Depth
proj_vector [ 3 ]
double
Projection Vector
flip_discard_region
logical
Reverse Curve Dir?
inside_or_out
logical
Inside or out?
auto_centroid
logical
Auto Centroid?

------------

UF_MODL - UF_MODL_smrelief_data_s
UF_MODL_smrelief_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_smrelief_data_t
UF_MODL_smrelief_data_p_t
Data Members
base_face
tag_t
Planar face or any face
of a flange
first_corner_edges [ 2 ]
tag_t
Edges defining the first
corner, should be in the
plane of the base face,
These edges must
intersect.
second_corner_edges [ 2 ]
tag_t
Edges defining the
second corner, should
be in the plane of the
base face, these edges
must intersect
offset_corner [ 3 ]
double
Edges defining the third
corner, should be in
the plane of the base
face
first_corner_fillet_radius
char *
radius value for first
corner fillet .
This has to be greater
than zero
second_corner_fillet_radius
char *
radius value for second
corner fillet .
This value has to be
greater than zero
os_circle_radius
char *
radius value for offset
corner fillet. This
value must be greater
than zero
offset_distance
char *
distance by which fillet
will be offset inside
the body from the
offset corner . This
value must be greater
than or equal to zero
and less than
offset_corner_fillet_
radius

------------

UF_MODL - UF_MODL_smslot_data_s
UF_MODL_smslot_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_smslot_data_t
UF_MODL_smslot_data_p_t
Overview
The following structure is used when creating, editing, or querying a
sheet metal slot.
Data Members
length [ UF_MAX_EXP_BUFSIZE ]
char
Length of SMSlot
width [ UF_MAX_EXP_BUFSIZE ]
char
Width of SMSlot
depth [ UF_MAX_EXP_BUFSIZE ]
char
Depth of SMSlot.
Only used for depth
type SMSlots
edge1
tag_t
Tag of the first
offset edge
offset1 [ UF_MAX_EXP_BUFSIZE ]
char
Offset distance
from first offset
edge
edge2
tag_t
Tag of the second
offset edge
offset2 [ UF_MAX_EXP_BUFSIZE ]
char
Offset distance
from second offset
edge
slot_face
tag_t
Tag of the face on
which the SMSlot
will be placed
through_face
tag_t
Tag of the face
through which the
Through SMSlot will
be created
dir_method
UF_MODL_smslot_direction_type_e_t
Method used to determine
angle of central axis of the SMSlot.
UF_FACE_NORMALS = use face normals
UF_ALONG_VECTOR = use a vector
UF_ALONG_DATUM_AXIS = use a datum axis
d_datum_axis
tag_t
Tag of the datum axis
used to determine the
angle of the central axis
of the SMSlot. Used when
dir_method is
UF_ALONG_DATUM_AXIS.
d_vec_dir [ 3 ]
double
Direction vector used to
determine the angle of the
central axis of the
SMSlot. Used when
dir_method is
UF_ALONG_VECTOR
orient_method
UF_MODL_smslot_direction_type_e_t
Method used to
determine angle of the orientation
along the length of the SMSlot.
UF_FACE_NORMALS = use face normals
UF_ALONG_VECTOR = use a vector
UF_ALONG_DATUM_AXIS = use a datum axis
o_datum_axis
tag_t
Tag of the datum axis
used to determine the
orientation along the
length of the SMSlot.
Used when orient_method
is UF_ALONG_DATUM_AXIS.
o_vec_dir [ 3 ]
double
Orientation vector
used to determine the
orientation along the
length of the SMSlot.
Used when orient_method
is UF_ALONG_VECTOR.
type
UF_MODL_smslot_type_e_t
Type of SMSlot to be created.
UF_DEPTH_SMSLOT = depth type SMSlot
UF_THROUGH_SMSLOT = thru type SMSlot
UF_PUNCH_SMSLOT = punch type SMSlot

------------

UF_MODL - UF_MODL_snipsrf_feature_data_s
UF_MODL_snipsrf_feature_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_snipsrf_feature_data_t
UF_MODL_snipsrf_feature_data_p_t
Overview
Structure definition for Snip Surface feature data. It includes all the input
elements to create a Snip Surface feature.
Minimum five parameters are required to be specified as follows:
1.Edit face
2.One of the types of bounding objects
3.Type of operation (snipping or divide)
4.Region point
5.Surface refitting method
In case of divide operation,two snip surface features are created. During
feature editing user cannot change operation type from snip to divide or viseversa.
Data Members
edit_face
tag_t
NX eid of a face to be snipped
boundary_type
UF_MODL_snipsurf_boundary_type_t
Snipping bounding object type
snip_cv_string
UF_STRING_t
Profile defining the snip curve
snipping_plane
tag_t
NX eid of plane used as snipping object,
Used only if boundary_type is,
UF_MODL_snipsurf_boundary_type_plane
project_vector [ 3 ]
double
Projection vector,
Necessary only if boundary_type is,
UF_MODL_snipsurf_boundary_type_curves
snip_or_divide
int
Flag indicating snipping or divide operation,
0: Divide, otherwise Snipping operation
Does not play any role during snip surface
feature editing
region_point_uv [ 2 ]
double
Region point on the edit_face indicating the
retained side of the face divided by imprinted
snipping curve. uv[0]: U value, uv[1]: V value
on the surface corresponding to edit_face.
Does not play any role if snip_or_divide value
is zero i.e. divide operation.
project_method
int
Project methods:
0- along surface normal,
1- along view direction,
2- along x direction,
3- along y direction,
4- along z direction,
5- along given vector
refit_method
UF_MODL_snipsurf_refit_method_t
Surface refitting method
refit_degree
int
Refit direction degree,
Necessary if refit_type is,
UF_MODL_snipsurf_refit_method_deg_patch or
UF_MODL_snipsurf_refit_method_deg_tol
refit_patches
int
Refit direction patches,
Necessary if refit_type is,
UF_MODL_snipsurf_refit_method_deg_patch or
UF_MODL_snipsurf_refit_method_patch_tol
tols [ 2 ]
double
Tolerance used for refitting,
Necessary if refit_type is,
UF_MODL_snipsurf_refit_method_deg_tol or
UF_MODL_snipsurf_refit_method_patch_tol

------------

UF_MODL - UF_MODL_solid_punch_data_s
UF_MODL_solid_punch_data_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_solid_punch_data_t
UF_MODL_solid_punch_data_p_t
Data Members
type
int
punch type = 0; die type = 1
thickness_option
int
0 - infer,1 - use exp
thickness [ UF_MAX_EXP_BUFSIZE ]
char
Thickness of the solid punch
target_face
tag_t
Top target face
tool_body
tag_t
punch or die tool
target_csys_pt
tag_t
A point or CSYS eid. This is
FROM location from which
a copy of the tool body
is transformed.
tool_csys_pt
tag_t
A point or CSYS eid. This is
TO location to which the
a copy of the tool body
is transformed.
n_pierce_faces
int
Number of pierce faces
pierce_faces
tag_t *
array of pierce faces
is_pt_required
logical
Wether centroid is required
or NOT

------------

UF_MODL - UF_MODL_spherical_corner_s
UF_MODL_spherical_corner_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_spherical_corner_t
UF_MODL_spherical_corner_p_t
Overview
The data structure for the Spherical Corner feature. To create a feature,
a face collector for each wall must be provided.  It can contain faces from
different bodies but the body being use to indicate the wall normal must be
specified through wall_x_ref_body and the reserve flag through is_wall_x_reversed.
When multiple solutions exist, a help point is required to determine the
nearest result.
Data Members
dist_tol
double
The distance tolerance
angle_tol
double
The angle tolerance
radius [ UF_MAX_EXP_BUFSIZE ]
char
The radius of the spherical corner
wall_1
tag_t
The face collector of Wall 1
wall_2
tag_t
The face collector of Wall 2
wall_3
tag_t
The face collector of Wall 3
wall_1_ref_body
tag_t
The reference body for determining the normal of Wall 1
wall_2_ref_body
tag_t
The reference body for determining the normal of Wall 2
wall_3_ref_body
tag_t
The reference body for determining the normal of Wall 3
is_wall_1_reversed
logical
Reverse flag of Wall 1 based on the reference body
is_wall_2_reversed
logical
Reverse flag of Wall 2 based on the reference body
is_wall_3_reversed
logical
Reverse flag of Wall 3 based on the reference body
help_point
tag_t
Help point to determine the nearest result when multiple solutions exist

------------

UF_MODL - UF_MODL_SRF_VALUE_s
UF_MODL_SRF_VALUE_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_SRF_VALUE_t
UF_MODL_SRF_VALUE_p_t
Data Members
srf_pos [ 3 ]
double
Position
srf_du [ 3 ]
double
partial d/du
srf_dv [ 3 ]
double
partial d/dv
srf_unormal [ 3 ]
double
unit normal
srf_d2u [ 3 ]
double
Second order partials
srf_dudv [ 3 ]
double
Second order partials
srf_d2v [ 3 ]
double
Second order partials
srf_d3u [ 3 ]
double
Third order partials
srf_d2udv [ 3 ]
double
Third order partials
srf_dud2v [ 3 ]
double
Third order partials
srf_d3v [ 3 ]
double
Third order partials
srf_normal [ 3 ]
double
normal, this is not unitized

------------

UF_MODL - UF_MODL_state_info_s
UF_MODL_state_info_s
(view source)
Defined in: uf_modl_smd.h
Also known as:
UF_MODL_state_info_t
UF_MODL_state_info_p_t
Data Members
process_factor
double
The process factor of a
Flange or Inset Flange feature.
state_index
int
The current state index of
a General Flange or SMBridge
feature. Future enhancement.
Currently, this is always
set to zero.

------------

UF_MODL - UF_MODL_stycorner_crv_opt_s
UF_MODL_stycorner_crv_opt_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_stycorner_crv_opt
Overview
Structure to store the curve control option and corresponding
parameters for top curve, bottom curve, interior u-curve and
v-curve.
Data Members
shape_control
int
0: depth & skew,
1: Tangent magnitude,
2: Template
If shape_control is 2 (template),
then there is no need to set
the rest of the data structure
start_tagmag
double
start tangent magnitude
must be set if
shape_control is 1 (tangent magnitude),
end_tagmag
double
end tangent magnitude
must be set if
shape_control is 1 (tangent magnitude),
depth
double
depth of curve
must be set if
shape_control is 0 (depth & skew),
skew
double
skew of curve
must be set if
shape_control is 0 (depth & skew),

------------

UF_MODL - UF_MODL_stycorner_data_s
UF_MODL_stycorner_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_stycorner_data_t
UF_MODL_stycorner_data_p_t
Overview
Data structure definition for Styled Corner Surface feature data.
This data structure includes all the input elements to create
a Styled Corner Surface feature.
The following 2 parameters are part specific and must be
specified as follows:
1.  blend_faces[3]  -- three face ug_tags
2.  base faces info -- a) number of base faces > 0 &
b) the corresponding  array of ug_tags.
The following parameters should also be set correctly, at least,
they should be set to the suggested default values:
interior curve control options  (value range: 0,1,2,3)
UF_MODL_stycorner_crv_opt   crv_opt[4]
boundary conditions/continuity (0=G0, 1=G1, 2=G2)
G0 tolerance
G1 tolerance
trim & attach  option   (either 0 or 1)
split vertex control parameters (percent)
type of face option:    3-sided surface or a 4-sided surface
2 trim curve creation options (value range: 0,1,2)
2 interior iso-u-curve end parameters (percent)
2 interior iso-v-curve end parameters (percent)
Data Members
blend_faces [ 3 ]
tag_t
three input faces bounding/defining
the corner (in any order):
0 - blend face 1,
1 - blend face 2,
2 - blend face 3
num_base_faces
int
number of base faces
base_faces
tag_t *
tags of base faces
split_curve_params [ 2 ]
double
two normalized input parameters
for the split vertex: [0.0, 1.0]:
0 - vertex on face 1,
1 - vertex on face 2
interior_opt
int
use interior curve control options:
0 - none,
1 - iso-u curve,
2 - iso-v curve,
3 - iso-u curve and iso-v curve
boundary_conds [ 4 ]
int
curves boundary conditions
value:
0 -- G0,
1 -- G1,
2 -- G2
index ==
0 -- trim curve1,
1 -- trim curve2,
2 -- bottom curve,
3 -- top curve
trim_attach_opt
int
trim & attach option:
0 -- no trim,
1 -- trim all
dist_tol
double
G0 tolerance
angle_tol
double
G1 tolerance
is_rectangular
logical
create a 3-sided surface
or a 4-sided surface:
0 -- 3-sided surface,
1 -- 4-sided surface
crv_opt [ 4 ]
UF_MODL_stycorner_crv_opt
0 -- trim curve1,
1 -- trim curve2,
2 -- bottom curve,
3 -- top curve
trim_curve_opt [ 2 ]
int
2 trim curve creation options
value = 0 -- Tangent Continuous,
value = 1 -- Line projection,
value = 2 -- Isoparametric
interior_iso_u_crv_end_params [ 2 ]
double
interior u_curve end
params (percent):
index = 0 -- Start param, percent,
index = 1 -- End param, percent
interior_iso_v_crv_end_params [ 2 ]
double
interior v_curve end
params (percent):
index = 0 -- Start param, percent,
index = 1 -- End param, percent

------------

UF_MODL - UF_MODL_styled_sweep_data_s
UF_MODL_styled_sweep_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_styled_sweep_data_t
UF_MODL_styled_sweep_data_p_t
Overview
Following is a structure definition for Styled Sweep feature data.
It includes all the input elements to create a Styled Sweep feature.
Parameters are to be specified as follows:
1. Number of sections
2. Section string tag(s)
3. Guide string tag
4. Touch string tag (if any)
5. Spine string tag (if any)
6. Move String method
7. To auto init orient or not?
Data Members
num_section
int
Number of sections
section
UF_STRING_p_t *
Section string(s)
guide
UF_STRING_p_t
Guide string
touch
UF_STRING_p_t
Touch string
spine
UF_STRING_p_t
Spine string (if no spine_vector)
spine_vector
tag_t
Spine vector (if no spine)
move_string_data
int
Move String method
auto_init_orient
int
To do auto-init-orient?

------------

UF_MODL - UF_MODL_SWEEP_TRIM_object_s
UF_MODL_SWEEP_TRIM_object_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_SWEEP_TRIM_object_t
UF_MODL_SWEEP_TRIM_object_p_t
Overview
defines used for Extrude, revolve, sweep along path trim options
Data Members
trim_objects
tag_t *
Array of objects defining the trim.
trim_count
int
number of objects in the trim_objects
array.
sign
UF_MODL_SWEEP_TRIM_SIGN
Type of trim.
thru_bodies
tag_t *
No longer used.
num_thru_bodies
int
No longer used.

------------

UF_MODL - UF_MODL_symb_thread_data_s
UF_MODL_symb_thread_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_symb_thread_data_t
UF_MODL_symb_thread_data_p_t
Overview
This structure is used in creating and inquiring symbolic threads.
Data Members
cyl_face
tag_t
Cylindrical face to be threaded.
start_face
tag_t
Face at which the thread starts.
axis_direction [ 3 ]
double
Direction of the thread.
include_instances
int
Instancing flag, UF_MODL_NO_INSTANCES
means no thread on instances of
cylindrical face.
UF_MODL_INCL_INSTANCES means threads
on instances of the cylindrical face.
rotation
int
Rotation, either UF_MODL_RIGHT_HAND
or UF_MODL_LEFT_HAND.
length_flag
int
Indicates the thread is a fixed
length or a full thread.
UF_MODL_FULL_THREAD or
UF_MODL_FIXED_LENGTH.
tapered
int
UF_MODL_TAPERED if this is a tapered
thread, UF_MODL_NON_TAPERED if this
is a non tapered thread.
num_starts
int
Number of start.
length
char *
Expression of the thread length.
form
char *
Thread form.
method
char *
Thread method.
callout
char *
Thread callout. In creation, if you
specify a callout, the major diameter,
minor diameter, pitch, tapped
drill/shaft diameter, length, and
tapered indicator are read from the
thread table and the values of those
parameters from the structure are
ignored except for the length value.
If the length value is specified in
the structure, it will be used instead
of the one read from the table. If no
callout is specified, the values of
those parameters are used in creating
the thread. Not specifying a callout
means to pass a NULL pointer, passing
an empty string ("") causes an error.
In Inquiry, if a callout is specified
in creating the thread, those
parameters also return in the
structure together with the callout.
major_dia
char *
Major diameter expression of the
thread.
minor_dia
char *
Minor diameter expression of the
thread.
tapped_dia
char *
Tapped diameter expression of the
thread.
pitch
char *
Thread pitch expression.
angle
char *
Thread angle expression.
internal_thread
logical
Indicates type of thread.
TRUE for internal thread type else, FALSE

------------

UF_MODL - UF_MODL_transf_aa_s
UF_MODL_transf_aa_s
(view source)
Defined in: uf_modl_dfo.h
Also known as:
UF_MODL_transf_aa_t
UF_MODL_transf_aa_p_t
Overview
Rotation from axis to axis
Data Members
from_dirr
tag_t
to_dirr
tag_t
pivot_point
tag_t
optional

------------

UF_MODL - UF_MODL_transf_angle_s
UF_MODL_transf_angle_s
(view source)
Defined in: uf_modl_dfo.h
Also known as:
UF_MODL_transf_angle_t
UF_MODL_transf_angle_p_t
Overview
Rotation about axis
Data Members
so_dirr
tag_t
so_point
tag_t
optional
angle [ UF_MAX_EXP_BUFSIZE ]
char

------------

UF_MODL - UF_MODL_transf_dist_s
UF_MODL_transf_dist_s
(view source)
Defined in: uf_modl_dfo.h
Also known as:
UF_MODL_transf_dist_t
UF_MODL_transf_dist_p_t
Overview
Translation along a direction
Data Members
so_dirr
tag_t
dist [ UF_MAX_EXP_BUFSIZE ]
char

------------

UF_MODL - UF_MODL_transf_pp_s
UF_MODL_transf_pp_s
(view source)
Defined in: uf_modl_dfo.h
Also known as:
UF_MODL_transf_pp_t
UF_MODL_transf_pp_p_t
Overview
The translation from point to point
Data Members
from_point
tag_t
to_point
tag_t

------------

UF_MODL - UF_MODL_TREX_appl_data_s
UF_MODL_TREX_appl_data_s
(view source)
Defined in: uf_modl_trex.h
Also known as:
UF_MODL_TREX_appl_data_t
UF_MODL_TREX_appl_data_p_t
Overview
Trim extend application data
Data Members
num_targets
int
Number of target data sets
targets
UF_MODL_TREX_data_set_p_t *
Array of target data sets
num_tools
int
Number of tool data sets
tools
UF_MODL_TREX_data_set_p_t *
Array of tool data sets
extend_method
UF_MODL_TREX_extend_method_t
Extend method
to_option
UF_MODL_TREX_to_option_t
To option
region_option
UF_MODL_TREX_region_option_t
Region option
make_corner
int
Make corner flag
keep_boundaries
int
Keep boundaries flag
extract_sheets
int
Extract sheets flag
dist_tol
double
Distance Tolerance
algorithm_version
int
Future Use

------------

UF_MODL - UF_MODL_TREX_data_set_s
UF_MODL_TREX_data_set_s
(view source)
Defined in: uf_modl_trex.h
Also known as:
UF_MODL_TREX_data_set_t
UF_MODL_TREX_data_set_p_t
Overview
Trim extend target/tool dataset
Data Members
collector
tag_t
extend_val
double
offset_val
double
reversed
int

------------

UF_MODL - UF_MODL_trim_object
UF_MODL_trim_object
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_trim_object_t
UF_MODL_trim_object_p_t
Overview
Structure used to define bounding objects for
Trim sheet to bounding objects.
Data Members
object_tag
tag_t
tag of bounding object
curve_project_method
int
projection method for curves
1 = along surface normals
2 = along a vector

------------

UF_MODL - UF_MODL_udf_exp_data_s
UF_MODL_udf_exp_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_udf_exp_data_t
UF_MODL_udf_exp_data_p_t
Overview
This structure contains UDF expression information:
old_exps: At the instantiation, they can be obtained from
the UDF feature definition by calling the public API
routine UF_MODL_init_udf_insert_data_from_def().
At the editing, they can be obtained from the UDF
instantiated feature by calling the public API routine
UF_MODL_ask_instantiated_udf().
new_exp_values: They can be inputted by the user for both of
instantiation and editing.
Data Members
num_exps
int
Number of expressions
old_exps
tag_t *
Array of udf definition expression
new_exp_values
char * *
Array of new expression new values
only the right hand side

------------

UF_MODL - UF_MODL_udf_mapping_data_s
UF_MODL_udf_mapping_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_udf_mapping_data_t
UF_MODL_udf_mapping_data_p_t
Overview
This structure contains UDF parent's mapping data information:
num_mapping_objs: At the instantiation, this number of mapping objects
can be obtained by calling the public API routine
UF_MODL_init_udf_insert_data_from_def(). At the editing,
it can be obtained by calling the public API routine
UF_MODL_ask_instantiated_udf().
reverse_objs_dir: must be inputted by the user for both of instantiation
and editing.
For the UDF parent's types: Edges, Curves, Points. There is no need to
prepare the mapping data.
For the UDF parent's types: Faces, Bodies, Sketches, Feature curves and
output objects of Smart Collectors. If there is a need to do the mapping
at the instantiation or editing, then use these 2 arrays: old_output_objs[]
and new_output_objs[] to store the objects that need to be mapped:
At the instantiation, the array old_output_objs[] can be obtained
(i.e. memory allocation and content) from the UDF feature definition by
calling the public API routine UF_MODL_init_udf_insert_data_from_def().
The memory of array new_output_objs[] must be allocated by the user and
its content must be also inputted by the user.
At the editing, the array old_output_objs[] can be obtained (i.e. memory
allocation and content) from the UF_MODL_ask_instantiated_udf(). The memory
of array new_output_objs[] must be allocated by the user and its content
must be also inputted by the user.
For the UDF parent's types: Output curves of Smart Sections. The user has to
prepare the mapping data. If there is a need to do the mapping at the
instantiation or editing, then use these 2 arrays: old_output_objs_index[]
and new_output_objs_index[] to store the Smart Section's output objects
that need to be mapped. Note that these output objects are condemned, which
are not displayed (i.e., invisible). They can't be used or destroyed for
further applications:
At the instantiation, the array old_output_objs_index[] can be obtained
(i.e. memory allocation and content) from the UDF feature definition by
calling the public API routine UF_MODL_init_udf_insert_data_from_def().
The memory of array new_output_objs_index[] must be allocated by the user
and its content must be also inputted by the user.
At the editing, the array old_output_objs_index[] can be obtained (i.e. memory
allocation and content) from the UF_MODL_ask_instantiated_udf(). The memory of
array new_output_objs_index[] must be allocated by the user and its content
must be also inputted by the user.
Data Members
num_mapping_objs
int
Number of mapping objects -
This data is to specify how many objects
need to be mapped during the mapping process
reverse_objs_dir
UF_MODL_udf_reverse_dir_t *
Rev. mapping obj. dir. flags -
This data is only used for reversing
the direction of mapping objects
defined_by
union UF_MODL_udf_mapping_data_union
This data is only used for UDF parent's
objects that need to be mapped

------------

UF_MODL - UF_MODL_udf_ref_data_s
UF_MODL_udf_ref_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_udf_ref_data_t
UF_MODL_udf_ref_data_p_t
Overview
This structure contains UDF parents information:
This information consists of UDF parents, parent's direction data and
parent's mapping data.
Instantiation:
old_refs: can be obtained from the UDF feature definition.
new_refs: can be inputted by the user.
reverse_refs_dir: can be inputted by the user.
mapping_data: some of them must be inputted by the user (please see all the
comments about the data structure UF_MODL_udf_mapping_data_t).
Edit (from a UDF instantiated feature):
old_refs: can be obtained from the UDF instantiated feature.
new_refs: can be inputted by the user.
reverse_refs_dir: can be inputted by the user.
mapping_data: some of them must be inputted by the user (please see all the
comments about the data structure UF_MODL_udf_mapping_data_t).
Ask (from a UDF instantiated feature):
old_refs: can be obtained from the UDF instantiated feature.
new_refs: must be NULL.
reverse_refs_dir: can be obtained from the UDF instantiated feature.
mapping_data: can be obtained from the UDF instantiated feature.
Data Members
num_refs
int
Number of UDF parents
old_refs
tag_t *
Array of old parents
new_refs
tag_t *
Array of new parents
reverse_refs_dir
UF_MODL_udf_reverse_dir_t *
Array of rev. parent. dir. flags
mapping_data
UF_MODL_udf_mapping_data_t *
Mapping data

------------

UF_MODL - UF_MODL_udfs_def_data_s
UF_MODL_udfs_def_data_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_udfs_def_data_t
UF_MODL_udfs_def_data_p_t
Overview
Data for UDFS definition.
Data Members
frecs
tag_t *
Array of UDF member features
num_frecs
int
Number of UDF member features
exp_defs
UF_MODL_udfs_exp_p_t *
Array of UDF expressions
num_exp
int
Number of UDF expressions
refs
tag_t *
Array of UDF parents
ref_prompts
char * *
Array of UDF parent prompting strings
num_ref
int
Number of UDF parents
name_str_data [ 256 ]
char
UDF definition feature name
explosion_flag
logical
Flag of UDF explosion

------------

UF_MODL - UF_MODL_udfs_exp_s
UF_MODL_udfs_exp_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_udfs_exp_t
UF_MODL_udfs_exp_p_t
Data Members
type
int
UDF expression type:
UF_UDFS_EXP: UDF regular expression
UF_UDFS_EXP_RANGE: by number range
UF_UDFS_EXP_OPTION: by options
exp
char *
Expression string
exp_name [ 256 ]
char
Expression name
define_value
char * *
Array of expression defining values
num_def
int
Number of expression defining values
low_end [ 256 ]
char
Expression minimum value
high_end [ 256 ]
char
Expression maximum value
scale_type
int
Expression value type:
scale_type = 0 -> integer
scale_type = 1 -> double

------------

UF_MODL - UF_MODL_vector_axis_s
UF_MODL_vector_axis_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_vector_axis_t
Overview
vector_type == UF_MODL_VECTOR_AXIS
Data Members
identifier
tag_t
Tag of the datum plane or plane whose normal is to
be used to define the vector, or the tag of a datum
axis.

------------

UF_MODL - UF_MODL_vector_direction_s
UF_MODL_vector_direction_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_vector_direction_t
Overview
vector_type == UF_MODL_VECTOR_DIRECTION
Data Members
xyz [ 3 ]
double
3D direction vector.

------------

UF_MODL - UF_MODL_vector_face_normal_s
UF_MODL_vector_face_normal_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_vector_face_normal_t
Overview
vector_type == UF_MODL_VECTOR_FACE_NORMAL
Data Members
face
tag_t
tag of the face whose normal or reverse normal is to
be used to define the vector.
point [ 3 ]
double
Point coordinates on the face to determine the
normal or reverse normal at. The closest point on
the face to this point is used.

------------

UF_MODL - UF_MODL_vector_plane_of_curves_s
UF_MODL_vector_plane_of_curves_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_vector_plane_of_curves_t
Overview
vector_type == UF_MODL_VECTOR_PLANE_OF_CURVES
Data Members
number_of_curves
int
Number of curves in the following array.
curves
tag_t *
Array of curves whose plane normal is to
be found. The normal will be the vector.

------------

UF_MODL - UF_MODL_vector_s
UF_MODL_vector_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_vector_t
UF_MODL_vector_p_t
Overview
The following structure allows definition of a vector
with a variety of options. Note that associativity to
any data is not maintained unless otherwise specified.
Data Members
reverse_vector
int
Indicates if the vector
calculated should then
be reversed before being
used. If zero, the
vector is not reversed.
Any other value will
reverse the vector.
vector_type
UF_MODL_vector_type_t
Indication of which
structure is being used
to define the vector.
defined_by
UF_MODL_vector_defined_by_union_t
The definition of the
vector.

------------

UF_MODL - UF_MODL_vector_two_points_s
UF_MODL_vector_two_points_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_vector_two_points_t
Overview
vector_type == UF_MODL_VECTOR_TWO_POINTS
Data Members
from_point [ 3 ]
double
Point coordinates from which the vector is to
start.
to_point [ 3 ]
double
Point coordinates at which the vector is to
end.

------------

UF_MODL - UF_MODL_wrap_assem_s
UF_MODL_wrap_assem_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_wrap_assem_t
UF_MODL_wrap_assem_p_t
Overview
Define the data for a wrap assembly feature.
Data Members
close_gap
int
Method used to close gaps between
faces after offsetting them.
May be one of:
UF_WRAP_GEOM_CLOSE_SHARP
UF_WRAP_GEOM_CLOSE_BEVELED
UF_WRAP_GEOM_CLOSE_NONE
dist_tol
double
Tolerance used to generate vertices from
geometry. This is also the primary face
offset.
add_offset
char *
Additional offset applied to faces.
split_offset
char *
Offset applied to each side of the
splitting plane so that the resulting
bodies overlap and can be united.
num_geoms
int
Number of tags in the geometry array.
geometry
tag_t *
Array of geometry tags. May be solid
bodies, sheet bodies, curves or points.
geom_xforms
tag_t *
Array of xforms to position each geometry
tag. The transform determines the
position of the linked feature relative to
its source geometry. Must be NULL_TAG
(apply no transformation) or an
assy_ctxt_xform in the work part.
num_splits
int
Number of tags in the splits array. This
can be zero if no splitting planes are
used.
splits
tag_t *
Array of smart planes (xforms) and/or
datum planes to be used to split the
geometry. This can be NULL if num_splits
is zero.
split_xforms
tag_t *
Array of xforms to position each split
(datums only, interpart smart planes are
not allowed). The transform determines the
position of the linked feature relative to
its source geometry. Must be NULL_TAG
(apply no transformation) or an
assy_ctxt_xform in the work part.
Must be NULL_TAG for each smart plane.

------------

UF_MODL - UF_MODL_wrap_geom_s
UF_MODL_wrap_geom_s
(view source)
Defined in: uf_modl_types.h
Also known as:
UF_MODL_wrap_geom_t
UF_MODL_wrap_geom_p_t
Overview
Define the data for a wrap geometry feature.
Data Members
close_gap
int
Method used to close gaps between
faces after offsetting them.
May be one of:
UF_WRAP_GEOM_CLOSE_SHARP
UF_WRAP_GEOM_CLOSE_BEVELED
UF_WRAP_GEOM_CLOSE_NONE
dist_tol
double
Tolerance used to generate vertices from
geometry. This is also the primary face
offset.
add_offset
char *
Additional offset applied to faces.
split_offset
char *
Offset applied to each side of the
splitting plane so that the resulting
bodies overlap and can be united.
num_geoms
int
Number of tags in the geometry array.
geometry
tag_t *
Array of geometry tags. May be solid
bodies, sheet bodies, curves or points.
num_splits
int
Number of tags in the splits array. This
can be zero if no splitting planes are
used.
splits
tag_t *
Array of smart planes (xforms) and/or
datum planes to be used to split the
geometry. This can be NULL if num_splits
is zero.

------------

UF_MOTION - UF_MOTION_2D_contact_s
UF_MOTION_2D_contact_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_2D_contact_t
Data Members
name [ UF_OBJ_NAME_BUFSIZE ]
char
The name of the 2D contact.
If NULL, a default name will
be created.
num_curve_1
int
The number of curve tags in
the curve_1 list.
curve_1
tag_t *
The curve tags of the first
link. All of these curves
must be coplanar and on the
same link (or ground).
num_curve_2
int
The number of curve tags in
the curve_2 list.
curve_2
tag_t *
The curve tags of the second
link. All of these curves
must be coplanar with curve_1,
on the same link (or ground),
and on a different link than
curve_1 list.
max_num_contact_points
int
The maximum number of contact
points along the curve.
switch_material_side_1
logical
The material direction for
side 1 is automatically
determined based on the input
curves. Set this parameter
to TRUE to reverse the default
material direction.
switch_material_side_2
logical
The material direction for
side 2 is automatically
determined based on the input
curves. Set this parameter
to TRUE to reverse the default
material direction.
stiffness
double
The contact stiffness.
advanced
UF_MOTION_contact_parameters_t
The advanced parameters of the
contact. See the structure
definition.

------------

UF_MOTION - UF_MOTION_3D_contact_s
UF_MOTION_3D_contact_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_3D_contact_t
Data Members
name [ UF_OBJ_NAME_BUFSIZE ]
char
The name of the 3D contact.
If NULL, a default name wil be
created.
num_contact_side_1
int
The number of solid bodies
on side 1 to be in contact.
All the solid bodies must
belong to the same link.
contact_side_1
tag_t *
The tag array of the bodies
on side 1 to be in contact.
All the solid bodies must
belong to the same link.
num_contact_side_2
int
The number of solid bodies
on side 2 to be in contact.
All the solid bodies must
belong to the same link.
contact_side_2
tag_t *
The tag array of the bodies
on side 2 to be in contact.
All the solid bodies must
belong to the same link.
force_model_type
UF_MOTION_3D_contact_force_t
The type of force
model to be used during
contact analysis. See enum
definition.
friction_option
UF_MOTION_3D_contact_friction_t
The friction option
to be used during contact
analysis. See enum definition.
stiffness
double
The contact stiffness.
advanced
UF_MOTION_contact_parameters_t
The advanced parameters of the
contact. See the structure
definition.
restitution_coefficient
double
The coefficient that measures
how much kinetic energy of the
contact objects remain after
the collision.

------------

UF_MOTION - UF_MOTION_contact_parameters_s
UF_MOTION_contact_parameters_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_contact_parameters_t
Data Members
force_exponent
double
The exponent of non-linear
stiffness. (Force is not
proportional to penetration
depth.)
material_damping
double
The linear damping rate
relative to the penetration
depth.
penetration_depth
double
The maximum overlap distance
between contact objects.
static_friction
double
The coefficient of static
friction at the static slip
velocity. It is usually
greater than the dynamic
friction coefficient.
slip_velocity
double
The slip velocity of static
friction where the static
coefficient is maximum. It is
always less than the dynamic
transition velocity.
dynamic_friction
double
The coefficient of dynamic
friction above the transition
velocity. It is usually less
than the static friction
coefficient.
transition_velocity
double
The dynamic transition velocity
is the velocity at which the
static friction effects
disappear. It is always
greater than the static slip
velocity.

------------

UF_MOTION - UF_MOTION_curve_curve_constraint_s
UF_MOTION_curve_curve_constraint_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_curve_curve_constraint_t
Data Members
name [ UF_OBJ_NAME_BUFSIZE ]
char
The name of the curve curve
constraint. If NULL, a default
name will be created.
num_curve_1_tags
int
The number of tags in the first
curve tag array.
curve_1
tag_t *
The tags of the first constraint
curves. All curves must be on
same link (or no link).
num_curve_2_tags
int
The number of tags in the second
curve tag array.
curve_2
tag_t *
The tags of the second constraint
curves. All curves must be on
same link (or no link) and the
link must be different from the
link of the first curve.

------------

UF_MOTION - UF_MOTION_cylindrical_bushing_s
UF_MOTION_cylindrical_bushing_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_cylindrical_bushing_t
Data Members
name [ UF_OBJ_NAME_BUFSIZE ]
char
The name of the bushing. If NULL,
a default name will be created.
link_1
tag_t
The first link of the bushing.
origin_1
tag_t
The point that defines the location
of the bushing on link_1.
direction_1
tag_t
The direction vector that defines
the orientation of the bushing on
link_1.
link_2
tag_t
The second link of the bushing or
NULL_TAG to attach to ground.
origin_2
tag_t
The point that defines the location
of the bushing on link_2,
or NULL_TAG if ground.
direction_2
tag_t
The direction vector that defines
the orientation of the bushing on
link_2, or NULL_TAG if ground.
radial_stiffness
double
The radial stiffness with respect
to the bushing orientation on
link_1.
longitudinal_stiffness
double
The longitudinal stiffness with
respect to the bushing orientation
on link_1.
conical_stiffness
double
The conical stiffness with respect
to the bushing orientation on
link_1.
torsional_stiffness
double
The torsional stiffness with
respect to the bushing orientation
on link_1.
radial_damping
double
The radial damping with respect to
the bushing orientation on link_1.
longitudinal_damping
double
The longitudinal damping with
respect to the bushing orientation
on link_1.
conical_damping
double
The conical damping with respect
to the bushing orientation on
link_1.
torsional_damping
double
The torsional damping with respect
to the bushing orientation on
link_1.

------------

UF_MOTION - UF_MOTION_function_s
UF_MOTION_function_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_function_t
Data Members
name
char *
The name of the function object. There is
no automatic default naming, a new name
must be input for creation of function.
definition
char * *
String of the function definition. Function
string can contain standard math functions,
Adams variables and functions, and derived
functions of motion object results. It is
the responsibility of the user to know the
correct strings and usage of standard math
functions and Adams variables/functions.
To get the derived function string of a
motion object for a result type, use
UF_MOTION_get_object_derived_function.
It is highly recommended that the syntax
of a function definition be validated
before creating the function object. See
UF_MOTION_validate_function_syntax.
num_lines
int
Number of lines in the function definition.

------------

UF_MOTION - UF_MOTION_general_bushing_s
UF_MOTION_general_bushing_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_general_bushing_t
Data Members
name [ UF_OBJ_NAME_BUFSIZE ]
char
The name of the bushing. If NULL,
a default name will be created.
link_1
tag_t
The first link of the bushing.
origin_1
tag_t
The point that defines the location
of the bushing on link_1.
direction_1
tag_t
The direction vector that defines
the orientation of the bushing on
link_1.
link_2
tag_t
The second link of the bushing or
NULL_TAG to attach to ground.
origin_2
tag_t
The point that defines the location
of the bushing on link_2,
or NULL_TAG if ground.
direction_2
tag_t
The direction vector that defines
the orientation of the bushing on
link_2, or NULL_TAG if ground.
translational_stiffness [ 3 ]
double
The x, y, and z components of the
translational stiffness with
respect to the bushing orientation
on link_1.
translational_damping [ 3 ]
double
The x, y, and z components of the
translational damping with respect
to the bushing orientatation on
link_1.
translational_preload [ 3 ]
double
The x, y, and z components of the
translational preload with respect
to the bushing orientation on
link_1.
torsional_stiffness [ 3 ]
double
The x, y, and z components of the
torsional stiffness with respect
to the bushing orientation on
link_1.
torsional_damping [ 3 ]
double
The x, y, and z components of the
torsional damping with respect to
the bushing orientation on link_1.
torsional_preload [ 3 ]
double
The x, y, and z components of the
torsional preload with respect to
the bushing orientation on link_1.

------------

UF_MOTION - UF_MOTION_interference_s
UF_MOTION_interference_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_interference_t
Data Members
solid_1
tag_t
The first solid body of the
interference check.
solid_2
tag_t
The second solid body of the
interference check.

------------

UF_MOTION - UF_MOTION_joint_coupler_s
UF_MOTION_joint_coupler_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_joint_coupler_t
Data Members
name [ UF_OBJ_NAME_BUFSIZE ]
char
The name of the joint coupler. If
NULL, a default name will be created.
jtc_type
UF_MOTION_joint_coupler_type_t
The type of the joint coupler.
See the enum definition.
joint_1
tag_t
The first joint of the coupler.
It can be a revolute, slider, or
cylindrical joint depending on the
coupler type.
joint_2
tag_t
The second joint of the coupler.
If joint_1 is a revolute or
slider joint, this joint can also
be a revolute or slider joint
depending on the coupler type. If
joint_1 is a cylindrical joint,
then this joint is ignored. If
the type is gear or rack and
pinion, the joints must have a
common link.
ratio
double
The constraint ratio between the
joints. It determines how far
joint_2 moves for a unit movement
of joint_1. If ratio is defined,
the contact point will be calculated
for gear and rack/pinion couplers,
otherwise, if the contact point is
defined, the ratio will be calculated.
origin_tag
tag_t
The smart point that defines the
origin of the contact point between
the joints. This is only used for
gear and rack/pinion couplers
currently. If defined, the ratio
will be calculated, otherwise, the
contact point will be calculated
if the ratio is defined. See uf.so.h
for creation of this object.
orientation_tag
tag_t
The orientation matrix that defines
the orientation at the contact
point between the two joints.
This is only used for gear and
rack/pinion couplers and is strictly
optional. A default orientation matrix
will be calculated if not defined.
Use UF_CSYS_create_matrix for the
creation of object.

------------

UF_MOTION - UF_MOTION_joint_limits_s
UF_MOTION_joint_limits_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_joint_limits_t
Data Members
min
double
The minimum allowed value of the joint. It is an angle
for revolute joints and a length for slider joints.
max
double
The maximum allowed value of the joint. It is an angle
for revolute joints and a length for slider joints.

------------

UF_MOTION - UF_MOTION_joint_motion_input_s
UF_MOTION_joint_motion_input_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_joint_motion_input_t
Data Members
input_type
UF_MOTION_joint_motion_input_type_t
The type of the motion input.
See the enum definition.
function
tag_t
The tag to the function. It is used
if type is UF_MOTION_function_input.
displacement
double
The constant displacement input.
Used if type is UF_MOTION_constant_input.
velocity
double
The constant velocity input.
Used if type is UF_MOTION_constant_input.
acceleration
double
The constant acceleration input.
Used if type is UF_MOTION_constant_input.
amplitude
double
The harmonic amplitude input.
Used if type is UF_MOTION_harmonic_input.
frequency
double
The harmonic frequency input.
Used if type is UF_MOTION_harmonic_input.
phase_angle
double
The harmonic phase angle input.
Used if type is UF_MOTION_harmonic_input.
harm_disp
double
The harmonic offset displacement input.
This is the distance from the design
position to the center of the harmonic wave.
If the wave is to be centered at the
design position, this value should be zero.
Used if type is UF_MOTION_harmonic_input.

------------

UF_MOTION - UF_MOTION_joint_s
UF_MOTION_joint_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_joint_t
Data Members
name [ UF_OBJ_NAME_BUFSIZE ]
char
The name of the joint. If NULL,
a default name will be created.
jt_type
UF_MOTION_joint_type_t
The type of the joint. See the
UF_MOTION_joint_type_t enum.
snap_links
logical
If TRUE, the joint "snaps" the two
links into position using the link
orientations.
link_1
tag_t
The first link associated with
the joint.
link_2
tag_t
The second link associated with
the joint. It can be NULL_TAG
for grounded joints.
direction_1
tag_t
Smart direction tag that defines
the direction of link_1. See
uf_so.h for creation methods.
direction_2
tag_t
Smart direction tag that defines
the direction of link_2. It can
be NULL_TAG for grounded joints.
See uf_so.h for creation methods.
origin_1
tag_t
Optional point location on link_1.
This point should be defined if link_1
has no center of mass.
origin_2
tag_t
Optional point location on link_2.
This point should be defined if link_2
has no center of mass.
screw_ratio
double
Used only for UF_MOTION_screw_joint.
This is the pitch of the screw's
threads. It defines how much
link_2 translates along the joint's
Z axis relative to link_1 for each
full turn of rotation.

------------

UF_MOTION - UF_MOTION_link_initial_vel_s
UF_MOTION_link_initial_vel_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_link_initial_velocity_t
Data Members
linear_dir
tag_t
A smart DIRR describing the linear
initial velocity direction.
magnitude
double
The magnitude of the linear velocity.
rotation_dir
tag_t
A smart DIRR describing the axis of rotation
for the initial rotational veloctiy.
angular_mag
double
The magnitude of the angular velocity.
rotation_csys
tag_t
The CSYS for a fully defined initial angular
velocity. The components below are about
each of the corresponding axis of this CSYS
rotation_vel [ 3 ]
double
The components of rotation about each axis
of rotation_csys.

------------

UF_MOTION - UF_MOTION_link_mass_properties_s
UF_MOTION_link_mass_properties_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_link_mass_properties_t
Data Members
mass_center
tag_t
Smart point at the center of mass.
If the mass properties are automatically
calculated, this will be the same
as the origin of the marker below.
These origins can be different
for user defined mass properties.
inertia_marker
tag_t
Internal marker that defines the
origin and orientation of the inertia
values. If the mass properties are
automatically generated, the origin
will be the same as the mass_center
above and the orientation will be the
principle axes.
mass
double
The mass of the link
products_of_inertia [ 6 ]
double
The products of inertia of the link
in the following order: Ixx, Ixy,
Ixz, Iyy, Iyz, Iyz
user_defined
logical
TRUE if overriding default mass
properties with user defined values.

------------

UF_MOTION - UF_MOTION_link_s
UF_MOTION_link_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_link_t
Data Members
name [ UF_OBJ_NAME_BUFSIZE ]
char
The name of the link. If NULL,
a default name will be created.
num_geometry_tags
int
The number of valid geometry tags
in the tag array
geometry
tag_t *
The array of geometry tags that
make up the link. These can be
solid bodies, lines, curves,
points, etc.

------------

UF_MOTION - UF_MOTION_marker_s
UF_MOTION_marker_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_marker_t
Data Members
name [ UF_OBJ_NAME_BUFSIZE ]
char
The name of the marker. If NULL,
a default name will be created.
marker_type
UF_MOTION_marker_type_t
Type of marker. See enum definition.
attachment_tag
tag_t
The mechanism object that this marker is
attached to. User defined markers can
be attached to any mechanism object.
orientation_tag
tag_t
Orientation matrix that defines the
orientation of the marker. Use
UF_CSYS_create_matrix for creation of
this object.
origin_tag
tag_t
Smart point that defines the origin
of the marker. Note that this object
is currently not saved in the database
with the marker, it is included here
for future enhancement. However, it
is used to extract the coordinates in
lieu of the user manually supplying or
determining the coordinates of the marker.
location [ 3 ]
double
Coordinates that define the location of
the marker.

------------

UF_MOTION - UF_MOTION_measurement_s
UF_MOTION_measurement_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_measurement_t
Data Members
type
UF_MOTION_measurement_type_t
The type of measurement. See the
enum definition.
object_1
tag_t
The object to measure from. It
must be a geometric object that
belongs to a link. If type is
an angle measurement, it must be
a linear edge or line. If type
is a minimum distance measurement,
it can be either a solid body,
sheet body, curve, or marker.
object_2
tag_t
The object to measure to. It must
be on a different link than
object_1. If this is an angle
measurement, object_2 must be a
linear edge or line. If this is
a distance measurement, it can be
any geometric object.

------------

UF_MOTION - UF_MOTION_point_curve_constraint_s
UF_MOTION_point_curve_constraint_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_point_curve_constraint_t
Data Members
name [ UF_OBJ_NAME_BUFSIZE ]
char
The name of the point curve
constraint. If NULL, a default
name will be created.
num_curve_tags
int
The number of tags in the curve
tag array.
curve
tag_t *
The tags of the constraint
curves. All curves must be on
same link (or no link).
point
tag_t
The tag of the constrained point.
It cannot belong to the same link
as the curves. See uf_so.h for
smart point creation methods.

------------

UF_MOTION - UF_MOTION_point_on_surface_data_s
UF_MOTION_point_on_surface_data_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_point_on_surface_data_t
UF_MOTION_point_on_surface_data_p_t
Data Members
point_on_surface_tag
tag_t
Tag of the created/edited entity
point_tag
tag_t
The point tag of the point on surface constraint.
If the point tag is NOT on a link, then the
point is considered to be on a grounded link
point_link_tag
tag_t
Optional: The user need not specify this data. However,
user will be returned with this data when user queries
for the data on the point_on_surface constraint tag
num_face_tags
int
Number of face tags for the constraint
face_tags
tag_p_t
Group of faces that can be have a parameterized UV
space. User can select faces of a single sheet or
solid body. If the body is NOT on a link, then the faces
are considered to be on a grounded link
face_link_tag
tag_t
Optional: The user need not specify this data. However,
user will be returned with this data when user queries
for the data on the point_on_surface constraint tag
display_scale
double
This scale is used in UI for displaying the object
entity_name [ UF_OBJ_NAME_BUFSIZE ]
char
A unique name for the object

------------

UF_MOTION - UF_MOTION_scalar_force_torque_s
UF_MOTION_scalar_force_torque_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_scalar_force_torque_t
Overview
Data structure definition for use with both scalar forces and torques.
Data Members
name [ UF_OBJ_NAME_BUFSIZE ]
char
The name of the force or torque.
If NULL, a default name will be
created.
attach_body
tag_t
The link the force is acting on,
or the revolute joint the torque
is acting on.
origin_1
tag_t
The point that defines the location
the force is acting from. Not
needed for torque.
origin_2
tag_t
The point that defines the location
the force is acting to. Not needed
for torque.
force_function
tag_t
The function describing the force
magnitude.
torque_function
tag_t
The function describing the torque
magnitude.
reaction_link
tag_t
The optional link that receives an
equal and opposite reaction force.
If fixed to ground, this should be
NULL_TAG. Not needed for torque.

------------

UF_MOTION - UF_MOTION_solver_parameters_s
UF_MOTION_solver_parameters_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_solver_parameters_t
Data Members
solver
UF_MOTION_solver_t
The solver to be used. See the solver
enum definition.
max_step_size
double
The maximum allowed step size of the
solver. For more detailed results, decrease
this number. For quicker results, increase
this number.
max_solver_error
double
The maximum integration error allowed by the
solver. For more accurate results, decrease
this number. For quicker results, increase
this number.
max_integrator_iterations
int
The maximum number of iterations allowed for
the solver's integrator to converge
to the solution in a dynamic analysis.If the
solver integrator has problems in converging
during a dynamic analysis then increase
this number
max_kinematics_iterations
int
The maximum number of iterations allowed for
the solver to converge to the
solution in a kinematic analysis.If the
motion model has problems in converging during a
kinematic analysis then increase this number
max_statics_iterations
int
The maximum number of iterations allowed for
the solver to converge to the
solution in a static analysis. If the
motion model has problems in converging during a
static analysis then increase this number
use_mass_properties
int
A flag to determine whether or not to use
mass properties in the analysis. If FALSE,
no dynamic analyses can be performed and
kinematic results will not have inertial
loads.

------------

UF_MOTION - UF_MOTION_spring_damper_s
UF_MOTION_spring_damper_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_spring_damper_t
Overview
Data structure definition for use with both springs and
dampers since they share many of the same attributes.
Data Members
name [ UF_OBJ_NAME_BUFSIZE ]
char
The name of the spring damper.
If NULL, a default name will be
created.
spr_dmp_type
UF_MOTION_spring_damper_type_t
The type of spring/damper.
See the enum definition.
joint
tag_t
The joint owning the spring/damper
if the spring/damper type is
UF_MOTION_revolute_spring_damper or
UF_MOTION_slider_spring_damper.
link_1
tag_t
Link one of the spring/damper if
the spring/damper type is
UF_MOTION_link_spring_damper.
point_1
tag_t
The point of the spring/damper
attachment on the first link.
See uf_so.h for smart point creation.
If the spring/damper type is
UF_MOTION_slider_spring_damper or
UF_MOTION_revolute_spring_damper,
this will automatically be set
with the joint origin.
pt1_coord [ 3 ]
double
The coordinates of the attachment
point of the spring/damper on the
first link. Not required for creation
or edit. If a smart point is not
provided for point_1, a dumb point will
automatically be created from input
coordinates (not recommended).
link_2
tag_t
Link two of the spring/damper, or
NULL_TAG if ground. This is only
for a spring/damper type of
UF_MOTION_link_spring_damper.
point_2
tag_t
The point of the spring/damper
attachment on the second link,
or the point of attachment to
ground if link_2 is NULL_TAG.
See uf_so.h for smart point creation.
If the spring/damper type is
UF_MOTION_slider_spring_damper,
this will automatically be set
with the joint origin.
pt2_coord [ 3 ]
double
The coordinates of the attachment
point of the spring/damper to the
second link, or to ground. Not required
for creation or edit. If a smart
point is not provided for point_2,
a dumb point will automatically be
created from input coordinates
(not recommended).
spring_rate
double
The spring rate for both rotational
and translational springs.
spring_preload
double
The spring preload at the reference length or angle
spring_ref_length
double
The reference length of the spring
is used to calculate either the
preload force on the spring or the
free length. This is used for
linear springs.
spring_ref_angle
double
The reference angle of the spring
at zero displacement. This is used
for rotational springs.
spring_init_length
double
The initial length of the spring at assembly
position; used for spring defined on slide
joint
damping_rate
double
The linear damping rate of the
damper.

------------

UF_MOTION - UF_MOTION_stl_parameters_s
UF_MOTION_stl_parameters_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_stl_parameters_t
UF_MOTION_stl_parameters_p_t
Data Members
minimum_facet_length
double
Minimum Facet Length for exporting the STL Data
maximum_facet_length
double
Maximum Facet Length for exporting the STL Data
facet_tolerance
double
Facet Tolerance Value for exporting the STL Data

------------

UF_MOTION - UF_MOTION_trace_s
UF_MOTION_trace_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_trace_t
Data Members
object
tag_t
The geometric object to be traced.
It must belong to a link (not
ground).
target_layer
int
The layer that the traced objects
will be created on.

------------

UF_MOTION - UF_MOTION_vector_force_torque_s
UF_MOTION_vector_force_torque_s
(view source)
Defined in: uf_motion_types.h
Also known as:
UF_MOTION_vector_force_torque_t
Overview
Data structure definition for use with both vector forces and torques.
Data Members
name [ UF_OBJ_NAME_BUFSIZE ]
char
The name of the force or torque.
If NULL, a default name will be
created.
vtype
UF_MOTION_vector_type_t
Either UF_MOTION_vector_force
or UF_MOTION_vector_torque.
link
tag_t
The link that the force or torque
is acting on.
origin
tag_t
The point that defines the location
the force or torque is acting on.
direction
tag_t
The vector that defines the
orientation of the force or torque
if reference frame is
UF_MOTION_first_link. If reference
frame is UF_MOTION_absolute, this
should be NULL_TAG.
frame
UF_MOTION_reference_frame_t
The reference frame of the force
or torque: UF_MOTION_absolute means
the orientation of the force/torque
is constant with respect to the
absolute CSYS regardless of the
motion of the link.
UF_MOTION_first_link means the
orientation of the force/torque
is constant with respect to the
link CSYS and the force/torque
rotates with the link. No other
reference frames are considered.
comp_functions [ 3 ]
tag_t
For reference frame of
UF_MOTION_absolute: The functions
describing the X, Y, and Z components
of the force or torque. If there
is no force/torque along an axis,
enter a NULL_TAG.
magnitude_function
tag_t
For reference frame of
UF_MOTION_first_link: A single
function tag describing the force
or torque magnitude.
reaction_link
tag_t
The optional link that receives an
equal and opposite reaction force
or torque. If fixed to ground, this
should be NULL_TAG.

------------

UF_NXSM - UF_NXSM_bend_option_s
UF_NXSM_bend_option_s
(view source)
Defined in: uf_nxsm_types.h
Also known as:
UF_NXSM_bend_option_t
UF_NXSM_bend_option_p_t
Overview
Data structure for bend option
Data Members
bend_radius [ UF_MAX_EXP_BUFSIZE ]
char
Bend radius
is_bend_radius_global
logical
flag to use default value.
TRUE - 0.1 in /3.0 mm (default)
FALSE - To use user defined bend radius make it FALSE
bend_relief
logical
Bend relief require or not
TRUE - bend relief require
FALSE - bend relief not require (default)
extend_bend_relief
logical
flag to to extend bend relief
TRUE - Extend bend relief to source body
FALSE - default
bend_relief_type
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
It provides clearance between the bend and the Source Face
IG_RECTANGULAR_BEND_RELIEF - for square shape relief(default),
IG_FILLET_BEND_RELIEF - for round shape relief
IG_RIP_BEND_RELIEF - bend relief not require
bend_relief_depth [ UF_MAX_EXP_BUFSIZE ]
char
Depth of bend relief
bend_relief_depth_global
logical
flag to use global value.
TRUE - 0.1 in /3.0 mm (default)
FALSE - To use user defined bend relief width make it FALSE
bend_relief_width [ UF_MAX_EXP_BUFSIZE ]
char
Width of bend relief
bend_relief_width_global
logical
flag to use global value.
TRUE - 0.1 in /3.0 mm (default)
FALSE - To use user defined bend relief width make it FALSE
corner_relief
logical
Corner relief require or not
TRUE - bend relief require
FALSE - bend relief not require (default)
corner_relief_type
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
Corner relief is used to avoid deformation and tear of
material during bending process.
IG_RIP_CORNER_RELIEF - default,
IG_BEND_ONLY_CORNER_RELIEF - relief apply to bend only ,
IG_BEND_AND_FACE_CORNER_RELIEF - relief apply to bend and face,
IG_CHAINED_CORNER_RELIEF - relief apply to bend and chain of faces
neutral_factor [ UF_MAX_EXP_BUFSIZE ]
char
default value - 0.33333
neutral_factor_global
logical
flag to use global value.
TRUE - Use default value(default)
FALSE - To use user defined neutral factor make it FALSE

------------

UF_NXSM - UF_NXSM_closed_corner_data_s
UF_NXSM_closed_corner_data_s
(view source)
Defined in: uf_nxsm_types.h
Also known as:
UF_NXSM_closed_corner_data_t
UF_NXSM_closed_corner_data_p_t
Overview
Main Data structure for closed corner
Data Members
bend_faces [ 2 ]
tag_t
for creating closed corner first time send in two valid bend faces from here.
subsequently, send additional valid bend faces while editing so as to add more
corners to be closed.
n_edges
int
Actual number of edges in the array "parent_edges".
parent_edges
tag_t*
<OF> array of parent edges
NULL - at the time of creating closed corner
During "edit", the "ask_feature" method will return the current array of parent edges
User can remove any edges from that array if he so desires.
Update the "n_edges" variable accordingly to reflect actual number of edges in this array.
treatment_type
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
Type of closed corner treatment -
IG_TREATMENT_OFF - default
IG_TREATMENT_INTERSECT - intersection at the corner
IG_TREATMENT_CIRCLE_CUTOUT - circular cutout at the corner
closure_type
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
Type of closure -
IG_TREATMENT_OFF - default
IG_CLOSE_FACES - close the corner faces
IG_OVERLAP_FACES - overlap the corner faces
treatment_dia
const char*
diameter value for the "IG_TREATMENT_CIRCLE_CUTOUT"
treatment for closed corner
overlap_ratio
const char*
ratio of overlap for the overlapping faces -
valid values range from 0.0 to 1.0
corner_gap
const char*
gap in between the closing faces -
valid values range from 0.0 upto the material
thickness of the body.

------------

UF_NXSM - UF_NXSM_flange_data_s
UF_NXSM_flange_data_s
(view source)
Defined in: uf_nxsm_types.h
Also known as:
UF_NXSM_flange_data_t
UF_NXSM_flange_data_p_t
Overview
Main Data structure for flange
Data Members
parent_edge
tag_t
tag of the edge on which flange is to be placed
sketch_tag
tag_t
sketch of the flange - send a NULL_TAG for create.
flange will create its sketch internally based on various calculations & input sketch data.
User can query the feature & get the sketch tag for further modifications to the sketch if so desired.
angle
const char*
flange angle
should have value between 0 to 180 degrees.
material_side
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
Side on which material will be added with respect to the mould line
valid values -
IG_LEFT - default
IG_RIGHT
IG_EXTEND
br_type
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
bend relief type
valid values -
IG_RECTANGULAR_BEND_RELIEF - default
IG_FILLET_BEND_RELIEF
IG_BEND_ONLY_CORNER_RELIEF
IG_BEND_AND_FACE_CORNER_RELIEF
IG_RIP_CORNER_RELIEF
cr_type
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
corner relief type
valid values -
IG_RIP_CORNER_RELIEF - default
IG_BEND_ONLY_CORNER_RELIEF
IG_BEND_AND_FACE_CORNER_RELIEF
off_type
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
offset type.
valid values -
IG_NONE - default
IG_LEFT
IG_RIGHT
bend_rad
const char*
bend radius for the flange
use_global_radius_value
logical
false - default
true - if user wants to link his flange to global bend radius value
br_width
const char*
bend relief width
use_global_br_width_value
logical
false - default
true - if user wants to link his flange to global bend radius value
br_length
const char*
bend relief length
use_global_br_length_value
logical
false - default
true - if user wants to link his flange to global bend radius value
off_val
const char*
offset value
n_factor
const char*
neutral factor value
use_global_nfactor_value
logical
false - default
true - if user wants to link his flange to global bend radius value
extend_bend_relief
logical
false - default
true - If user wants bend relief to be extended

------------

UF_NXSM - UF_NXSM_flange_sketch_data_s
UF_NXSM_flange_sketch_data_s
(view source)
Defined in: uf_nxsm_types.h
Also known as:
UF_NXSM_flange_sketch_data_t
UF_NXSM_flange_sketch_data_p_t
Overview
Data structure for flange sketch
Data Members
width_option
UF_NXSM_FLANGE_WIDTH_OPTION_e_t
choose appropriate width_option from UF_NXSM_FLANGE_WIDTH_OPTION_e_t
dim_option
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
Indicates whether to measure the dimension from the inside edge or outside edge of the flange.
valid values -
IG_OUTSIDE_DIMENSION - default
IG_INSIDE_DIMENSION
length
const char*
length of the flange
width
const char*
width of the flange
snap_point [ 3 ]
double
for AT_END_TYPE / FROM_END_TYPE width option.
User can use "UF_MODL_ask_edge_verts" routine
to get the end points of the parent edge of flange & send the desired point co-ords to the snap_point
dist_from_end
const char*
distance from the end at which the flange would start - FROM_END_TYPE width option.
dist_from_left_end
const char*
distance from left end of the edge - FROM_BOTH_ENDS_TYPE width option.
dist_from_right_end
const char*
distance from the right end of the edge - FROM_BOTH_ENDS_TYPE width option.
prev_width_option
UF_NXSM_FLANGE_WIDTH_OPTION_e_t
width_option value with which the feature was created earlier.
"ask_feature" method populates this parameter.

------------

UF_NXSM - UF_NXSM_mitre_cflange_data_s
UF_NXSM_mitre_cflange_data_s
(view source)
Defined in: uf_nxsm_types.h
Also known as:
UF_NXSM_mitre_cflange_data_t
UF_NXSM_mitre_cflange_data_p_t
Overview
Data structure for Mitre cut
Mitre cut is essentially an end treatment to the contour flange feature, which shall
prevent merging/interference with the existing or newly placed features in sheet metal.
Sometimes without mitreing we would end up with merging the faces of the adjoining
contour flange features.
The mitre cut is optional, and can be done in two ways.  Either ?Normal to thickness face?
or ?Normal to source face' which is same as 'Parallel to thickness face?.
Mitreing is provided at the start or end of contour flange or at both start and end of
contour flange.
Data Members
mitre_position
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
It indicates the cut location if require,
IG_NONE - no mitre(default) ,
IG_START - mitre at start,
IG_RIGHT - mitre at end,
mitre_type_at_start
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
Type of cut at the start of contour flange
IG_MITRE_NORMAL_TO_THICKNESS- normal to thickness face(default) ,
IG_MITRE_PARALLEL_TO_THICKNESS- normal to source face
mitre_type_at_end
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
Type of cut at the end of contour flange
IG_MITRE_PARALLEL_TO_THICKNESS- normal to thickness face(default),
IG_MITRE_NORMAL_TO_THICKNESS- normal to source face
mitre_side_at_start
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
mitre plane orientation at start of contour flange
IG_INSIDE - for cut(default),
IG_OUTSIDE - for grow
mitre_side_at_end
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
mitre plane orientation at end of contour flange
IG_INSIDE - for cut(default),
IG_OUTSIDE - for grow
mitre_by_dist_or_angle_at_start
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
Specify mitre cut by distance or angle
IG_MITRE_BY_ANGLE -mitre location by angle(default)
mitre_by_dist_or_angle_at_end
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
Specify mitre cut by distance or angle
IG_MITRE_BY_ANGLE -mitre location by angle(default)
mitre_angle_at_start [ UF_MAX_EXP_BUFSIZE ]
char
Angle in degrees at the start of contour flange
mitre_angle_at_end [ UF_MAX_EXP_BUFSIZE ]
char
Angle in degrees at the end of contour flange
mitre_cut_type
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
Type of cut
IG_MITRE_REGULAR_CUT - Regular or Clean cut (default),
IG_MITRE_MANUFACTURING_CUT - manufacturing cut
close_corner_type
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
Type of corner
IG_CLOSE_CORNER_NONE - default,
IG_CLOSE_CORNER_OPEN - corner open,
IG_CLOSE_CORNER_CLOSED - corner closed,
IG_CLOSE_CORNER_CIRCLE_CUTOUT - circular cutout at the corner
close_corner_dia [ UF_MAX_EXP_BUFSIZE ]
char
Diameter of close corner

------------

UF_NXSM - UF_NXSM_sec_cflange_data_s
UF_NXSM_sec_cflange_data_s
(view source)
Defined in: uf_nxsm_types.h
Also known as:
UF_NXSM_sec_cflange_data_t
UF_NXSM_sec_cflange_data_p_t
Overview
Data structure for Secondary contour flange
Data Members
sketch_section
tag_t
Tag of section object created from sketch.
NULL_TAG (default)
ref_edge
tag_t
Tag of edge to which flange will be connected
section_edges
tag_t
Section tag of edges
If NULL_TAG, it is secondary contour flange otherwise chain
contour flange
profile_ref_end
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
It represents the end of the edge where sketch
profile is created
IG_INSIDE - Within the edge (default)
projection_dist [ UF_MAX_EXP_BUFSIZE ]
char
Distance through which sketch is projected
projection_side
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
Whether projection is in the normal direction or opposite to
the normal direction of datum plane on which profile is generated
IG_LEFT - to normal direction (default)
IG_RIGHT - opposite to normal direction
extent_type
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
To create secondary contour flange use following options
Extent to which profile is to be swept,
IG_FINITE - sweep the skecth through specified distance along
projection direction(default),
IG_TO_END_OF_EDGE - sweep along the whole edge
IG_SYMMETRIC - sweep the sketch through specfied distance along
normal and opposite to normal to plane
To create chain contour flange use following option
IG_TO_END_OF_EDGE - sweep along the whole edge
bend_parm_type
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
IG_NFTYPE(default)
mitre_data
UF_NXSM_mitre_cflange_data_t
Data for mitre cut
bend_options
UF_NXSM_bend_option_t
Bend data

------------

UF_NXSM - UF_NXSM_sec_tab_data_s
UF_NXSM_sec_tab_data_s
(view source)
Defined in: uf_nxsm_types.h
Also known as:
UF_NXSM_sec_tab_data_t
UF_NXSM_sec_tab_data_p_t
Overview
Data structure for Secondary Tab
Data Members
sketch_profile
tag_t
sketch tag or section tag of sketch.
You can either pass sketch tag or create a
section for sketch, pass the tag of section.
NULL_TAG (default)
placement_face
tag_t
Placement face of the base tab for creating secondary tab
material_side
UF_NXSM_FEATURE_PROPERTY_CONSTANTS_e_t
Sketch side on which material will be added
IG_LEFT - default
IG_RIGHT

------------

UF_OBJ - UF_OBJ_cre_settings_s
UF_OBJ_cre_settings_s
(view source)
Defined in: uf_obj_types.h
Also known as:
UF_OBJ_cre_settings_t
UF_OBJ_cre_settings_p_t
Overview
Structure used by UF_OBJ_ask_cre_settings and UF_OBJ_ask_def_cre_settings
to return color/line font/width settings
Please refer to the
constants and numerical values
for string defined constants or numerical values to be used for each one of
the fields in this structure
Data Members
color
int
line_font
int
width
int

------------

UF_OBJ - UF_OBJ_disp_props_s
UF_OBJ_disp_props_s
(view source)
Defined in: uf_obj_types.h
Also known as:
UF_OBJ_disp_props_t
UF_OBJ_disp_props_p_t
Overview
Display properties of the object
Data Members
layer
int
the layer an object resides on
color
int
the color an object possesses
blank_status
int
the blank status of an object
This status is defined by one of
the two string defined constants:
UF_OBJ_NOT_BLANKED
UF_OBJ_BLANKED
line_width
int
the line width of an object
Can be one of the following :
UF_OBJ_WIDTH_NORMAL
UF_OBJ_WIDTH_THICK
UF_OBJ_WIDTH_THIN
UF_OBJ_WIDTH_ORIGINAL
UF_OBJ_WIDTH_1 -- UF_OBJ_WIDTH_9
font
int
the font an object possesses
highlight_status
logical
the highlight status of an object
where TRUE indicates that highlight
is on.

------------

UF_OPER - UF_OPER_status1_s
UF_OPER_status1_s
(view source)
Defined in: uf_oper.h
Also known as:
UF_OPER_status1_t
UF_OPER_status1_p_t
Overview
Operation Status: for all structure fields if it is == 0 then the condition
represented by that field is FALSE, otherwise it is TRUE
Data Members
is_edited
unsigned int
Has operation been edited ?
toolpath_exists
unsigned int
Does tool path exist ?
toolpath_edited
unsigned int
Has tool path been edited since
the last time it was posted ?

------------

UF_OPER - UF_OPER_status_s
UF_OPER_status_s
(view source)
Defined in: uf_oper.h
Also known as:
UF_OPER_status_t
UF_OPER_status_p_t
Overview
Operation Status: for all bit fields if the bit == 0 then the condition
represented by that bit is FALSE, otherwise it is TRUE
Data Members
:1
unsigned int is_edited
Has operation been edited ?
:1
unsigned int toolpath_exists
Does tool path exist ?
:1
unsigned int toolpath_edited
Has tool path been edited since
the last time it was posted ?
:29
unsigned int open

------------

UF_CAM - UF_OPRBND_app_data_s
UF_OPRBND_app_data_s
(view source)
Defined in: uf_oprbnd.h
Also known as:
UF_OPRBND_app_data_t
UF_OPRBND_app_data_p_t
Overview
The application data for a inherited boundary and the members:
The following information shows the types of application data
allowed by the objects and the boundary types.
An error code is returned by the functions if a wrong type
of application data is set.
Facing Operation Boundary:
Blank Boundary:
Boundary:          Stock, Feedrate
Boundary members:  Stock, Feedrate, Tool Position, User Defined Events (Post Commands)
Check Boundary:
Boundary:          Stock
Boundary members:  Stock
Planar Mill Operation Boundary:
Part Boundary:
Boundary:          Stock, Feedrate
Boundary members:  Stock, Feedrate, Tool Position, User Defined Events (Post Commands)
Blank Boundary:
Boundary:          Stock, Feedrate
Boundary members:  Stock, Feedrate, Tool Position, User Defined Events (Post Commands)
Check Boundary:
Boundary:          Stock
Boundary members:  Stock
Trim Boundary:
Boundary:          Stock
ZLevel Mill Operation Boundary:
Trim Boundary:
Boundary:          Stock
Area Mill Operation Boundary:
Trim Boundary:
Boundary:          Stock
Data Members
has_stock
int
Stock flag.
Set to 1 if used, or else set to 0.
stock
double
Stock value.
has_feedrate
int
Feed rate flag.
Set to 1 if used, or else set to 0.
feedrate_unit
UF_CAM_feedrate_unit_t
Feed rate unit.
feedrate_value
double
Feed rate value.
has_tool_position
int
Tool position flag.
Set to 1 if used, or else set to 0.
tool_position
UF_CAM_tool_position_t
Tool position value.

------------

UF_CAM - UF_PARAM_disp_path_s
UF_PARAM_disp_path_s
(view source)
Defined in: uf_param_indices.h
Also known as:
UF_PARAM_disp_path_t
Data Members
silh_percent
double
silhouette percentage [1.0 - 100.0]
normx
double
normal on x-direction
normy
double
normal on y-direction
normz
double
normal on z-direction
arrow
short
= 0 (undefined), = 1 (on), = 2 (off)
number
short
paint line number = 0 (undefined), = 1 (on), = 2 (inactive)
speed
short
= 0 (off), = 1-10 (on)
type
short
= 0 (solid) , = 1 (dash), = 2 (silhouette)
feed
short
= 0 (undefined), = 1 (on), = 2 (off)
norm_flag
short
paint path normal flag =0 (tool axis),
=1 (i,j,k components)

------------

UF_CAM - UF_PARAM_disp_pattern_s
UF_PARAM_disp_pattern_s
(view source)
Defined in: uf_param_indices.h
Also known as:
UF_PARAM_disp_pattern_t
Overview
UF_PARAM_type_pointer
Data Members
name [ 133 ]
char
name of pattern
dx
double
offset distance to x-direction
dy
double
offset distance to y-direction
dz
double
offset distance to z-direction
frequency
short
pattern display frequency

------------

UF_CAM - UF_PARAM_disp_tool_s
UF_PARAM_disp_tool_s
(view source)
Defined in: uf_param_indices.h
Also known as:
UF_PARAM_disp_tool_t
Overview
UF_PARAM_type_pointer
Data Members
type
short
display type- off = 0, 2D = 1, 3D = 2, Axis = 3
NOTE: Axis is only valid for Variable Axis operations or Method Groups
frequency
short
tool display frequency

------------

UF_CAM - UF_PARAM_feedrate_s
UF_PARAM_feedrate_s
(view source)
Defined in: uf_param_indices.h
Also known as:
UF_PARAM_feedrate_t
Data Members
unit
UF_PARAM_feed_unit_t
unit of feedrate = 0 (none), = 1
value
double
value of feedrate
color
short
color of feedrate. For possible color value, refer to uf_obj.h

------------

UF_PARAM - UF_PARAM_index_attribute_s
UF_PARAM_index_attribute_s
(view source)
Defined in: uf_param.h
Also known as:
UF_PARAM_index_attribute_t
UF_PARAM_index_attribute_p_t
Overview
The attributes that describe a parameter
Data Members
key
int
The unique integer for this parameter
name [ MAX_LINE_BUFSIZE ]
char
The parameter's
name
type
UF_PARAM_type_t
See UF_PARAM_type_t definition
int_default
int
If type is integer then its default
value
dbl_default
double
If type is double then its default
value
regen_flag
UF_PARAM_regen_t
What to regenerate if parameter changes

------------

UF_PART - UF_PART_compress_flags_s
UF_PART_compress_flags_s
(view source)
Defined in: uf_part_types.h
Also known as:
UF_PART_compress_flags_t
UF_PART_compress_flags_p_t
Overview
Type which describes the compression options available
Data Members
standard
logical
Specifies the standard compression option state

------------

UF_PART - UF_PART_export_options_s
UF_PART_export_options_s
(view source)
Defined in: uf_part_types.h
Also known as:
UF_PART_export_options_t
UF_PART_export_options_p_t
Overview
Type which describes the options provided to an export operation.
Data Members
new_part
logical
Determines whether the objects should be exported
into a new part.
params_mode
UF_PART_export_params_mode_t
Determines how solid
parameters will be copied.
expression_mode
UF_PART_export_exp_mode_t
Determines how expressions
will be copied.

------------

UF_PART - UF_PART_load_status_s
UF_PART_load_status_s
(view source)
Defined in: uf_part_types.h
Also known as:
UF_PART_load_status_t
UF_PART_load_status_p_t
Overview
Data structure to return the part names and statuses of all parts retrieved
into the session by either
UF_PART_open   or
UF_ASSEM_add_part_to_assembly
Starting NX3: The utility routine UF_PART_free_load_status has been provided
to free the allocated memory below. This may be used as an alternative to
calling UF_free_string_array and UF_free directly.
Data Members
failed
logical
Output: True if the load failed and was
rolled back
user_abort
logical
Output: True if the only 'failure' was user abort
n_parts
int
Output: Length of the following two
allocated arrays. Number of parts that had
errors or warnings when loading. This is the
number (dimension) of entries in the file_names
and statuses arrays.
file_names
char * *
<OF>
Allocated array of file names
statuses
int *
<OF>
Allocated array of associated status codes
for each file name. Use UF_get_fail_message
on each status code in the array to get
the associated message string.
The allocated array must be freed.

------------

UF_PATH - UF_PATH_circular_motion_s
UF_PATH_circular_motion_s
(view source)
Defined in: uf_path.h
Also known as:
UF_PATH_circular_motion_t
Overview
Specify data for a circular motion CIRCLE.
Data Members
start [ 3 ]
double
this array specifies the start
point x,y,z coordinates(this should
be the end point of the previous
motion)
start_tool_axis [ 3 ]
double
This array specifies
the starting tool axis.
end [ 3 ]
double
this array specifies the end
point x,y,z coordinates.
end_tool_axis [ 3 ]
double
This array specifies
the ending tool axis.
arc_axis [ 3 ]
double
this array specifies the
vector which is the axis of
the motion.
arc_center [ 3 ]
double
this array specifies the
x,y,z coordinates of the
center of the arc.
arc_radius
double
This is the radius of the
arc.
tolerance
double
Tolerance to be used for arc
fits.
feed_value
double
This is the feed rate
value.
feed_unit
UF_PATH_feed_unit_t
This specifies the units of the
feed value.
type
UF_PATH_motion_type_t
This is the type of the motion.
material_side
UF_PATH_side_t
This specifies the material
side.
shape
UF_PATH_shape_t
This specifies the shape.

------------

UF_PATH - UF_PATH_contact_data_s
UF_PATH_contact_data_s
(view source)
Defined in: uf_path.h
Also known as:
UF_PATH_contact_data_t
Overview
Specify contact data for a motion GOTO/.
Data Members
contact_pt [ 3 ]
double
contact point for the motion.
contact_axis [ 3 ]
double
tool axis of contact point.
contact_arc_axis [ 3 ]
double
Contact arc axis for circular motion.
contact_arc_center [ 3 ]
double
Contact arc center for circular motion.
contact_arc_radius
double
contact arc radius for circular motion.
contact_shape
UF_PATH_shape_t
used to describe shape of contact motion.

------------

UF_PATH - UF_PATH_cutcom_s
UF_PATH_cutcom_s
(view source)
Defined in: uf_path.h
Also known as:
UF_PATH_cutcom_t
Overview
Specify data for the CUTCOM/ post command.
Data Members
cutcom_mode
UF_PATH_cutcom_mode_t
plane_type
UF_PATH_plane_type_t
cutcom_on_status
UF_PATH_cutcom_on_t
cutcom_off_status
UF_PATH_cutcom_off_t
adjust_register
int
the register to use for
cutter compensation
full_cutcom_output
logical
a full cutcom command
is output if and only
if this flag is TRUE.
adjust_flag
logical
the adjust register is
output if and only if
this flag is TRUE.

------------

UF_PATH - UF_PATH_flush_s
UF_PATH_flush_s
(view source)
Defined in: uf_path.h
Also known as:
UF_PATH_flush_t
Overview
Specify data for the FLUSH/ post command.
Data Members
flush_type
UF_PATH_flush_type_t
flushing_guide
UF_PATH_guide_t
flushing_pressure
UF_PATH_pressure_t
flush_register
logical
guide_flag
logical
pressure_flag
logical

------------

UF_PATH - UF_PATH_helical_motion_s
UF_PATH_helical_motion_s
(view source)
Defined in: uf_path.h
Also known as:
UF_PATH_helical_motion_t
Overview
Specify data for a Helical motion CIRCLE/...........,TIMES,n
Data Members
start [ 3 ]
double
this array specifies the start
point x,y,z coordinates(this should
be the end point of the previous
motion)
start_tool_axis [ 3 ]
double
This array specifies
the starting tool axis.
end [ 3 ]
double
this array specifies the end
point x,y,z coordinates.
end_tool_axis [ 3 ]
double
This array specifies
the ending tool axis.
arc_axis [ 3 ]
double
this array specifies the
vector which is the axis of
the motion.
arc_center [ 3 ]
double
this array specifies the
x,y,z coordinates of the
center of the helix at
the end point.
arc_radius
double
This is the radius of the
helix.
tolerance
double
Tolerance to be used for arc
fits.
times
double
Number of Turns including
partial turn
feed_value
double
This is the feed rate
value.
feed_unit
UF_PATH_feed_unit_t
This specifies the units of the
feed value.
type
UF_PATH_motion_type_t
This is the type of the motion.
material_side
UF_PATH_side_t
This specifies the material
side.
shape
UF_PATH_shape_t
This specifies the shape.

------------

UF_PATH - UF_PATH_level_marker_s
UF_PATH_level_marker_s
(view source)
Defined in: uf_path.h
Also known as:
UF_PATH_level_marker_t
Data Members
tool_axis [ 3 ]
double
Tool axis specification.
depth
double
the depth from top

------------

UF_PATH - UF_PATH_linear_motion_s
UF_PATH_linear_motion_s
(view source)
Defined in: uf_path.h
Also known as:
UF_PATH_linear_motion_t
Overview
Specify data for a linear motion GOTO/.  The position array is the
coordinate of the point to go to, and the feed_value is the feed rate value.
Data Members
position [ 3 ]
double
Coordinates of the point.
tool_axis [ 3 ]
double
Tool axis specification.
feed_value
double
Feed value.
feed_unit
UF_PATH_feed_unit_t
Units of feed.
type
UF_PATH_motion_type_t
Motion type.

------------

UF_PATH - UF_PATH_rotate_s
UF_PATH_rotate_s
(view source)
Defined in: uf_path.h
Also known as:
UF_PATH_rotate_t
Overview
Specify data for the ROTATE/ post command.
Data Members
rotation_angle
double
is the angle by which
to rotate.
rotation_object
UF_PATH_rotation_object_t
rotation_type
UF_PATH_rotation_type_t
rotation_direction
UF_PATH_direction_t
angle_flag
logical
the rotation angle is
output if and only if
this flag is TRUE.
rotref_flag
logical
the string ROTREF is
output if and only if this
flag is TRUE.

------------

UF_PATH - UF_PATH_spindle_on_s
UF_PATH_spindle_on_s
(view source)
Defined in: uf_path.h
Also known as:
UF_PATH_spindle_on_t
Overview
Specify the data for the SPINDL/ post command.
Data Members
speed
double
is the speed of the spindle
maxrpm
double
is the maximum allowed speed
of the spindle
range [ 20 ]
char
the spindle speed range
mode
UF_PATH_spindle_mode_t
direction
UF_PATH_direction_t
speed_flag
logical
the speed is output if and
only if this flag is TRUE.
maxrpm_flag
logical
the maximum speed is output
if and only if this flag is
TRUE.
range_flag
logical
the range is output if and
only if this flag is TRUE.

------------

UF_PATH - UF_PATH_tool_change_s
UF_PATH_tool_change_s
(view source)
Defined in: uf_path.h
Also known as:
UF_PATH_tool_change_t
Overview
Specify data for the tool change post command.
Data Members
xoffset_value
double
offset value of the tool
in the X direction.
yoffset_value
double
offset value of the tool
in the Y direction.
zoffset_value
double
offset value of the tool
in the Z direction. This
value is only used by mill.
tool_angle
double
the angle at which the tool
is mounted.
radius
double
the nose radius of the tool
tool_number
int
The tool number
adjust_register
int
the register to use for
tool length compensation
head_type
UF_PATH_head_type_t
The type of the head.
adjust_flag
logical
the adjust register is output
if and only if this is TRUE.
tool_offset_flag
logical
the tool offsets are
output if and only if this
is TRUE.
tool_number_flag
logical
the tool number is output
if and only if this is TRUE.
tool_angle_radius_flag
logical
the tool angle and
radius are output
if and only if this
TRUE
manual_change_flag
logical
the string MANUAL is
output if and only
if this is TRUE.

------------

UF_PATH - UF_PATH_tracking_point_change_s
UF_PATH_tracking_point_change_s
(view source)
Defined in: uf_path.h
Also known as:
UF_PATH_tracking_point_change_t
Overview
Specify data for the tracking point change post command.
Data Members
xoff
double
yoff
double
adjust_register
int
cutcom_register
int

------------

UF_PD - UF_PD_attribute_value_data_2_s
UF_PD_attribute_value_data_2_s
(view source)
Defined in: uf_pd_types.h
Also known as:
UF_PD_attribute_value_data_2_t
UF_PD_attribute_value_data_2_p_t
Data Members
title
char *
title of the defined attribute value data
this value data type is ONLY for user defined
attribute abd its value, and can't apply to
other NX existing product attribute
dat
UF_PD_attribute_value_string_p_t
value data structure to hold value data title and its strings

------------

UF_PD - UF_PD_attribute_value_data_s
UF_PD_attribute_value_data_s
(view source)
Defined in: uf_pd_types.h
Also known as:
UF_PD_attribute_value_data_t
UF_PD_attribute_value_data_p_t
Data Members
title
char *
title of the defined attribute value data
this value data type is ONLY for user defined
attribute abd its value, and can't apply to
other NX existing product attribute
dat
UF_PD_attribute_value_string_t
value data structure to hold value data title and its strings

------------

UF_PD - UF_PD_attribute_value_s
UF_PD_attribute_value_s
(view source)
Defined in: uf_pd_types.h
Also known as:
UF_PD_attribute_value_t
UF_PD_attribute_value_p_t
Overview
The following structure defines the attributes required
to store a single attribute value. The data set is applied
all NX product attribute except user defined attribute.
Data Members
value_type
UF_PD_attribute_value_type_t
Type of attribute value (string, int, etc.)
value_title
char *
Title of the product attributes value,
the valid value titles are defined in each product
attribute, refer UF_PD_attribute_type_e
integer_value
int
Integer value of the attribute coresponding to the value_type
number_value
double
Number value of the attribute coresponding to the value_type
string_value
char *
String value/list value of the attribute coresponding to the value_type

------------

UF_PD - UF_PD_attribute_value_string_s
UF_PD_attribute_value_string_s
(view source)
Defined in: uf_pd_types.h
Also known as:
UF_PD_attribute_value_string_t
UF_PD_attribute_value_string_p_t
Overview
The following structure defines the attribute value data structure
required define a product attributes. An attribute can has its own
child value defined by UF_PD_attribute_value_s that is a real NX object.
Data Members
num_strings
int
number of strings defined for the attribute value data
strings
char * *
array of char to hold multiple string text

------------

UF_PD - UF_PD_business_modifier_s
UF_PD_business_modifier_s
(view source)
Defined in: uf_pd_types.h
Also known as:
UF_PD_business_modifier_t
UF_PD_business_modifier_p_t
Overview
The following structure defines the business modifier required
to store a single modifier value.
Data Members
title
char *
title of the defined business modifier
value
char *
value of the defined business modifier

------------

UF_PD - UF_PD_product_attribute_2_s
UF_PD_product_attribute_2_s
(view source)
Defined in: uf_pd_types.h
Also known as:
UF_PD_product_attribute_2_t
UF_PD_product_attribute_2_p_t
Overview
The following structure defines the attributes required
define a product attributes.
Data Members
attribute_type
UF_PD_attribute_type_t
Type of attribute
attribute_group
char *
High level classification of the attribute
attribute_type_name
char *
attribute_name
char *
Name of the product attributes
symbolic_display
char *
Symbol in the format of <library>:<name> used to render the
display of this attribute. This information is extracted verbatim
from the .dfa file, so it may be translated into a KF "rule".
kf_name
char *
Name of product attributes defined from dfa file
number_busmods
int
Optional Business Modifiers for the attribute, it uses
busmods
UF_PD_business_modifier_p_t
values
UF_PD_attribute_value_p_t
Values for the product attribute.
NOTE:
An attribute can has its own child value object defined
by UF_PD_attribute_value_s, it can also has its own value
data set defined by UF_PD_product_attribute_value_data_s.
UF_PD_attribute_value_s is for an existing NX object
UF_PD_product_attribute_value_data_s is for user defined
attribute or the user defined value data set.
For example, the attribute value for UF_PD_UG_USER_DEFINED attribute
type shall be defined here, and also user defined note text
shall be defined here.
num_attribute_values
int
value_dats
UF_PD_attribute_value_data_2_p_t
num_attribute_value_dats
int

------------

UF_PD - UF_PD_product_attribute_s
UF_PD_product_attribute_s
(view source)
Defined in: uf_pd_types.h
Also known as:
UF_PD_product_attribute_t
UF_PD_product_attribute_p_t
Overview
The following structure defines the attributes required
define a product attributes.
Data Members
attribute_type
UF_PD_attribute_type_t
Type of attribute
attribute_group
char *
High level classification of the attribute
attribute_type_name
char *
attribute_name
char *
Name of the product attributes
symbolic_display
char *
Symbol in the format of <library>:<name> used to render the
display of this attribute. This information is extracted verbatim
from the .dfa file, so it may be translated into a KF "rule".
kf_name
char *
Name of product attributes defined from dfa file
number_busmods
int
Optional Business Modifiers for the attribute, it uses
busmods
UF_PD_business_modifier_p_t
values
UF_PD_attribute_value_p_t
Values for the product attribute.
NOTE:
An attribute can has its own child value object defined
by UF_PD_attribute_value_s, it can also has its own value
data set defined by UF_PD_product_attribute_value_data_s.
UF_PD_attribute_value_s is for an existing NX object
UF_PD_product_attribute_value_data_s is for user defined
attribute or the user defined value data set.
For example, the attribute value for UF_PD_UG_USER_DEFINED attribute
type shall be defined here, and also user defined note text
shall be defined here.
num_attribute_values
int
value_dats
UF_PD_attribute_value_data_p_t
This is for NX user defined attribute and its value only,
please reference above for details.
num_attribute_value_dats
int

------------

UF_PD - UF_PD_product_definition_instance_s
UF_PD_product_definition_instance_s
(view source)
Defined in: uf_pd_types.h
Also known as:
UF_PD_product_definition_instance_t
UF_PD_product_definition_instance_p_t
Overview
The following structure is used to define the instance data for the
part.
Data Members
type
UF_PD_product_definition_instance_type_t
Type of instance to create
object_to_instance
tag_t
Product definition object (either an attribute or an entire product
definition) that needs to be instanced.
origin [ 3 ]
double
Origin of instance
leaders
UF_PD_product_definition_leader_p_t
Leaders data
num_leaders
int

------------

UF_PD - UF_PD_product_definition_leader_assoc_pnt_s
UF_PD_product_definition_leader_assoc_pnt_s
(view source)
Defined in: uf_pd_types.h
Also known as:
UF_PD_product_definition_leader_assoc_pnt_t
UF_PD_product_definition_leader_assoc_pnt_p_t
Data Members
type
UF_PD_product_definition_leader_assoc_pnt_type_t
point
UF_PD_product_definition_leader_assoc_pnt_union_u

------------

UF_PD - UF_PD_product_definition_leader_s
UF_PD_product_definition_leader_s
(view source)
Defined in: uf_pd_types.h
Also known as:
UF_PD_product_definition_leader_t
UF_PD_product_definition_leader_p_t
Overview
The following structure is used to define the leader data for the
instance. The leader will look like
--- attachment (to annotation)
/
/
terminator (to geometry)
Data Members
terminator
UF_PD_product_definition_leader_assoc_pnt_t
terminator
attachment
UF_PD_product_definition_leader_assoc_pnt_t
attached point
assoc_object
tag_t
associate object

------------

UF_PD - UF_PD_product_definition_s
UF_PD_product_definition_s
(view source)
Defined in: uf_pd_types.h
Also known as:
UF_PD_product_definition_t
UF_PD_product_definition_p_t
Overview
The following structure defined the attributes required to
define a product definition.
Data Members
name
char *
Required name for the product definition
geometry_references
tag_t *
Optional geometry references for a product definition
num_geometry_references
int
retained
logical
Product Definition retain status
product_attributes
UF_PD_product_attribute_p_t
Required (at least 1) attributes for a product definition
num_product_attributes
int
In NX4, product definition can only have ONE
product attribute. num_product_attributes = 1 is accepted
number, otherwise system will raise an error

------------

UF_PLIST - UF_PLIST_col_prefs_s
UF_PLIST_col_prefs_s
(view source)
Defined in: uf_plist_types.h
Also known as:
UF_PLIST_col_prefs_t
UF_PLIST_col_prefs_p_t
Data Members
is_key_field
logical
Is this a key field? A key
field is one that is used to
uniquely identify a row. It
used to decide whether a new
row gets added or if the
quantity field gets incremented
default_string
char*
Default string used for
text in new cells
cell_prefs
UF_TABNOT_cell_prefs_t
Cell preferences for new cells
in this column
is_protected
logical
Are cells in column protected?

------------

UF_PLIST - UF_PLIST_field_format_s
UF_PLIST_field_format_s
(view source)
Defined in: uf_plist_types.h
Also known as:
UF_PLIST_field_format_t
Overview
Parts List field format structure
Data Members
justification
int
Text justification for this field:
1 - left
2 - Center
3 - Right
lead_str [ MAX_LINE_BUFSIZE ]
char
A prefix string that will be
added before every string in
this field.
trailing_str [ MAX_LINE_BUFSIZE ]
char
A suffix string that will be
added after every string in
this field.
format_type
int
The formatting to use for values in this field:
1 - Characters
2 - Integer
3 - Float
4 - Exponential
width
int
Number characters for character and Integer
formatting. Number of digits to left of
decimal point for floats and exponential.
precision
int
Number of digits to right of decimal point
for floats

------------

UF_PLIST - UF_PLIST_prefs_s
UF_PLIST_prefs_s
(view source)
Defined in: uf_plist_types.h
Also known as:
UF_PLIST_prefs_t
UF_PLIST_prefs_p_t
Data Members
section_prefs
UF_TABNOT_section_prefs_t
Preferences used for creating
new sections
grow_direction
UF_PLIST_grow_direction_t
Does the parts list grow
upward or downward?
ldr_method
UF_PLIST_ldr_method_t
Method used to show rows that
are both locked and deleted
create_new_rows_as_locked
logical
Should newly created rows
automatically be locked?
initial_callout_field
char*
String used for the first
callout in the parts list.
Subsequent callouts will be
generated using a sequence
that follows the last
character of the initial
callout string. For example,
2 follows 1, B follows A,
b follows a, etc
callout_increment
int
Value by which the callout
increments
symbol_type
UF_PLIST_symbol_type_t
Type of object used for auto
creation and placement of
callout symbols
main_symbol_text
char*
Format of the string used in
the main callout symbol This
string can contains automatic
text control sequences as
follows:
$= - Auto Member - Expands
to the name of the member
$~C - Auto Callout - Expands
to the value of the callout
$~Q - Auto Quantity - Expands
to the value of the first
non-zero quantity field
ref_symbol_text
char*
Format of the string used in
the reference callout symbol
This is in the same format
as main_symbol_text
characters_to_skip
char*
List of callout chars to skip
auto_update
logical
Should the parts list
automatically update when the
model changes?
sort_on_update
logical
Should a sort be done during
update?
highlight_manual_text
logical
Should manual text be hilited?
isProtected
logical
Should parts list be protected ?
allowManualRows
logical
Are parts list allow manual row insertion?

------------

UF_PLIST - UF_PLIST_traversal_settings_s
UF_PLIST_traversal_settings_s
(view source)
Defined in: uf_plist_types.h
Also known as:
UF_PLIST_traversal_settings_t
UF_PLIST_traversal_settings_p_t
Data Members
master_model
logical
top_level_only
logical
leaves_only
logical

------------

UF_PLOT - UF_PLOT_banner_options_s
UF_PLOT_banner_options_s
(view source)
Defined in: uf_plot_types.h
Also known as:
UF_PLOT_banner_options_t
UF_PLOT_banner_options_p_t
Overview
This structure provides the banner options for rendering plots.
Data Members
show_banner
logical
TRUE if the banner appears on plot
output.
message
char *
If non-NULL, a NULL-terminated ASCII
string that appears in the banner if
a banner entry is defined to display
the message.

------------

UF_PLOT - UF_PLOT_extents_s
UF_PLOT_extents_s
(view source)
Defined in: uf_plot_types.h
Also known as:
UF_PLOT_extents_t
UF_PLOT_extents_p_t
Overview
This structure provides a means of returning data indicating the location
and borders of a plot placed in the layout, or the entire layout.
Data Members
left
double
right
double
bottom
double
top
double

------------

UF_PLOT - UF_PLOT_job_options_s
UF_PLOT_job_options_s
(view source)
Defined in: uf_plot_types.h
Also known as:
UF_PLOT_job_options_t
UF_PLOT_job_options_p_t
Overview
This structure provides the options for rendering plots.
Data Members
colors
UF_PLOT_colors_t
Specifies colors used in plotting.
use_drawing_sheet_colors
logical
TRUE if custom colors
associated with the drawing sheet
are used in plotting the sheet.
If FALSE, or if custom colors are
not associated with the sheet, then
plotting colors are determined by
the colors field.
widths
UF_PLOT_widths_t
Specifies widths used in plotting.
use_drawing_sheet_widths
logical
TRUE if custom widths
associated with the drawing sheet
are used in plotting the sheet.
If FALSE, or if custom widths are
not associated with the sheet, then
plotting widths are determined by
the widths field.
tolerance
double
A unitless value that controls the
accuracy or smoothness of plotted
curve geometry. Values must be
greater than or equal to 0.0001;
smaller values produce smoother
curves.

------------

UF_PLOT - UF_PLOT_printer_group_s
UF_PLOT_printer_group_s
(view source)
Defined in: uf_plot_types.h
Also known as:
UF_PLOT_printer_group_t
UF_PLOT_printer_group_p_t
Overview
This structure provides a means of returning data associated with a printer
group.
Data Members
group_dir [ MAX_FSPEC_BUFSIZE ]
char
jobs_dir [ MAX_FSPEC_BUFSIZE ]
char
home_dir [ MAX_FSPEC_BUFSIZE ]
char
label [ UF_PLOT_MAX_STRING_BUFSIZE ]
char

------------

UF_PLOT - UF_PLOT_ughpgl_cmp_options_s
UF_PLOT_ughpgl_cmp_options_s
(view source)
Defined in: uf_plot.h
Also known as:
UF_PLOT_ughpgl_cmp_options_t
UF_PLOT_ughpgl_cmp_options_p_t
Data Members
color_width_option
UF_PLOT_cmp_color_width_t
resulting_plot_option
UF_PLOT_create_cmp_result_plot_t
plot_tolerance
double

------------

UF_PROCESS_AID - UF_PROCESS_AID_cpt_s
UF_PROCESS_AID_cpt_s
(view source)
Defined in: uf_process_aid_types.h
Also known as:
UF_PROCESS_AID_cpt_t
UF_PROCESS_AID_cpt_p_t
Data Members
ref_dpt
tag_t
Datum Point picked
sel_faces
uf_list_p_t
Selected Face
sel_crvs_edgs
uf_list_p_t
List of tags of Bndry
curves and edges

------------

UF_PROCESS_AID - UF_PROCESS_AID_dlf_s
UF_PROCESS_AID_dlf_s
(view source)
Defined in: uf_process_aid_types.h
Also known as:
UF_PROCESS_AID_dlf_t
UF_PROCESS_AID_dlf_p_t
Data Members
sel_set
uf_list_p_t *
Can be faces and curves for Surface DLF
Edges and Curves for Hole/Slot DLF
num_set
int
Number of sets
dlf_plane
tag_t
Selected Plane,
NULL_TAG for Hole/Slot DLF

------------

UF_PROCESS_AID - UF_PROCESS_AID_dpt_s
UF_PROCESS_AID_dpt_s
(view source)
Defined in: uf_process_aid_types.h
Also known as:
UF_PROCESS_AID_dpt_t
UF_PROCESS_AID_dpt_p_t
Data Members
ref_dlf_daxis
tag_t
Selected DLF datum
axis
sel_face_edges
uf_list_p_t
Selected face/edges

------------

UF_PROCESS_AID - UF_PROCESS_AID_hsvec_s
UF_PROCESS_AID_hsvec_s
(view source)
Defined in: uf_process_aid_types.h
Also known as:
UF_PROCESS_AID_hsvec_t
UF_PROCESS_AID_hsvec_p_t
Data Members
sel_edges
uf_list_p_t
Selected Edges

------------

UF_PROCESS_AID - UF_PROCESS_AID_hvec_s
UF_PROCESS_AID_hvec_s
(view source)
Defined in: uf_process_aid_types.h
Also known as:
UF_PROCESS_AID_hvec_t
UF_PROCESS_AID_hvec_p_t
Data Members
sel_face
tag_t
Selected Face
hem_plane
tag_t
Selected Plane

------------

UF_PROCESS_AID - UF_PROCESS_AID_svec_s
UF_PROCESS_AID_svec_s
(view source)
Defined in: uf_process_aid_types.h
Also known as:
UF_PROCESS_AID_svec_t
UF_PROCESS_AID_svec_p_t
Data Members
sel_face
tag_t
Selected Face

------------

UF_PROCESS_AID - UF_PROCESS_AID_tvec_s
UF_PROCESS_AID_tvec_s
(view source)
Defined in: uf_process_aid_types.h
Also known as:
UF_PROCESS_AID_tvec_t
UF_PROCESS_AID_tvec_p_t
Data Members
sel_face
tag_t
Selected Face
sel_edge
tag_t
Selected Edge

------------

UF_PS - UF_PS_kernel_version_s
UF_PS_kernel_version_s
(view source)
Defined in: uf_ps.h
Also known as:
UF_PS_kernel_version_t
UF_PS_kernel_version_p_t
Data Members
major_revision
int
minor_revision
int
build_number
int
year
int
month
int
day
int
hour
int
minute
int
second
int

------------

UF_PS - UF_PS_unexported_s
UF_PS_unexported_s
(view source)
Defined in: uf_ps.h
Also known as:
UF_PS_unexported_t
Overview
Used to return information about objects that could not be exported
to a parasolid export file.
Data Members
ug_body_tag
tag_t
NX tag of the unexported object.
fail_code
int
Reason the tag was not exported.

------------

UF_ROUTE - UF_ROUTE_allow_default_fitting_plugin_s
UF_ROUTE_allow_default_fitting_plugin_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_allow_default_fitting_plugin_t
UF_ROUTE_allow_default_fitting_plugin_p_t
Overview
Structure passed to the ALLOW_DEFAULT_ELBOW_PLACEMENT plugin.
Data Members
rcp
tag_t
Input: The rcp to place the fitting at.
num_spec_charx
int
Input: Specification characteristics. Each specification characteristic
can have one or more possible values. Default part selection ensures
that every matching part has atleast one of the values from a
multi valued specification characteristic.
Eg: If FITTING_MATERIAL is a specification characteristic and
has values COPPER, STEEL - all matching parts have a
FITTING_MATERIAL value of either COPPER or STEEL.
spec_charx
UF_EPLIB_multi_val_charx_p_t
match_criteria
UF_ROUTE_part_lib_part_t
Input: Part descriptor characteristics that are not in the specification
characteristic list. Part descriptor characteristics can
only be single valued. These characteristics help uniquely
determine the default fitting to place.
default_fitting_table
const char*
Input: Part library table identifier to use for determining the default fitting.
The identifier is defined in the Part Library View file for the application.
allow_placement
logical
Output: if TRUE, default elbow placement at the input RCP is valid
force_override
logical
Output: if TRUE, forces placement of the part specified in the
the override_fitting definition.
override_fitting
UF_ROUTE_part_lib_part_t
Output: Only used if force_override is TRUE. Fully specifies the default fitting
to place [include values of all selection characteristics].

------------

UF_ROUTE - UF_ROUTE_app_view_desc_s
UF_ROUTE_app_view_desc_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_app_view_desc_t
UF_ROUTE_app_view_desc_p_t
Data Members
name
char *
filename
char *

------------

UF_ROUTE - UF_ROUTE_bend_report_mil98_s
UF_ROUTE_bend_report_mil98_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_bend_report_mil98_t
UF_ROUTE_bend_report_mil98_p_t
Overview
For MIL98 bend reports, the mil-d-9898  spec is followed.
All values are absolute, they are cumulative.
C       -   The distance before the bend, from the start of the cable
to the beginning point of the bend.
F       -   The radius of the bend.
E       -   The turn angle, this is the angle about the y axis, relative
to initial position (cumulation of the B value in YBC).
G       -   The bend angle. (The C value in YBC).
Y       -   The Y value from the YBC format.
See MIL-D-9898C for more information.
Data Members
num_bends
int
Number of bends
c
double *
f
double *
e
double *
g
double *
y
double *
total_length
double
Total length of the stock

------------

UF_ROUTE - UF_ROUTE_bend_report_xyz_s
UF_ROUTE_bend_report_xyz_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_bend_report_xyz_t
UF_ROUTE_bend_report_xyz_p_t
Overview
For XYZ bend reports, the first bend value (xc[0],yc[0],zc[0]), is
at one endpoint of the stock body, and the last bend value
(xc[num_bends-1],yc[num_bends-1],zc[num_bends-1]) is the other endpoint
of the stock body.  The other bend values are the location in work
coordinates of the bend rcps associated with each bend,
or the location of where the bend rcps would be if they existed.
Data Members
num_bends
int
Number of bends in report
xc
double *
X position of bend rcp in work coords
yc
double *
Y position of bend rcp in work coords
zc
double *
Z position of bend rcp in work coords
radii
double *
Radius of bend
total_length
double
Total length of stock

------------

UF_ROUTE - UF_ROUTE_bend_report_ybc_s
UF_ROUTE_bend_report_ybc_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_bend_report_ybc_t
UF_ROUTE_bend_report_ybc_p_t
Overview
For YBC bend reports,
Y       -   The value is the length along the stock
before the bend.
B       -   The B value is the rotation angle about the Y-axis
of the stock.
C       -   The C value is the bend angle.
Radii   -   The radius of the bend.
The last bend value (y[num_bends-1],...,radii[num_bends-1])
isn't actually a bend, the only valid value is the y value, which is the
length after the last bend.
All values are relative, meaning they are calculated from the previous bend.
So if bend1 has B value of 90 degrees, and bend2 has a B value of 90 degrees
then the pipe has rotated 180 degrees about the y axis.
Data Members
num_bends
int
Total number of bends
y
double *
Length along y axis
b
double *
Rotation angle (degrees) about the y axis
c
double *
Rotation angle (degrees) about the z axis
radii
double *
Radius of the bend
total_length
double
Total length of the stock

------------

UF_ROUTE - UF_ROUTE_bend_segment_info_s
UF_ROUTE_bend_segment_info_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_bend_segment_info_t
UF_ROUTE_bend_segment_info_p_t
Data Members
stock_tag
tag_t
Tag of stock
segment
tag_t
Segment tag
is_straight
logical
TRUE - segment is straight, FALSE otherwise
length
double
Length of segment
end_rcps [ 2 ]
tag_t
Start and end rcps, do not use for
S-Bends and bends greater than or
equal to 180 degrees.
bend_corner
tag_t
Bend corner tag
bend_radius
double
Radius of the bend
bend_pos [ 3 ]
double
Position of the bend rcp
normal [ 2 ]  [ 3 ]
double
Normal of curve at start and end points
previous
UF_ROUTE_bend_segment_info_p_t
Previous segment in list
next
UF_ROUTE_bend_segment_info_p_t
Next segment in list
rcp_pos [ 2 ]  [ 3 ]
double
Locations of RCP in ABS coordinates, use this
instead of the end_rcps for S-Bends and bends
greater than or equal to 180 degrees.

------------

UF_ROUTE - UF_ROUTE_branch_path_numbering_s
UF_ROUTE_branch_path_numbering_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_branch_path_numbering_t
UF_ROUTE_branch_path_numbering_p_t
Data Members
startingSegment
tag_t
The starting segment.
prefix
const char*
The prefix to add to the ID. Can be NULL.
suffix
const char*
The suffix to append to the ID. Can be NULL.
sequenceMethod
UF_ROUTE_branch_path_numbering_sequence_method_t
The sequence method to use when numbering (e.g. 1,2,3 or a,b,c)
startValue
const char*
The starting value for the first branch.
firstBranchID
const char*
The formula for determining the first branch's ID.
nextBranchID
const char*
The formula for determining the next branch's ID.
displayBranchPathIDs
logical
Should the plugin also create a drafting annotation?
reassignBranchPathIDs
logical
Should any existing IDs be overwritten?

------------

UF_ROUTE - UF_ROUTE_bundle_data_s
UF_ROUTE_bundle_data_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_bundle_data_t
UF_ROUTE_bundle_data_p_t
Overview
The UF_ROUTE_bundle_data_s structure is the structure that is used
to pass information to and receive information from a user written
bundle diameter calculation routine. In Wiring, you may define
a "Plug-in" for the routine that calculates the set of curves that
should be used to model the cross section of the wire bundle based
on the number of wires in the bundle (and their diameters). This
is the structure that is supplied to your bundle diameter routine.
Please refer to the
example
Data Members
num_wires
int
wires
tag_t *
num_stock_data
int
stock_data
tag_t *
num_cross_sections
int
cross_sections
tag_t *
num_anchors
int
anchors
tag_t *

------------

UF_ROUTE - UF_ROUTE_cb_data_s
UF_ROUTE_cb_data_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_cb_data_t
UF_ROUTE_cb_data_p_t
Data Members
reason
int
num_objects
int
objects
tag_t *

------------

UF_ROUTE - UF_ROUTE_cb_fab_data_s
UF_ROUTE_cb_fab_data_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_cb_fab_data_t
UF_ROUTE_cb_fab_data_p_t
Data Members
file_name [ UF_ATTR_MAX_STRING_BUFSIZE ]
char
file name, eg "C:\Temp\my_new_fab.prt"
num_charx
int
number of charx
charx
UF_ROUTE_charx_p_t
charx list

------------

UF_ROUTE - UF_ROUTE_cda_data_s
UF_ROUTE_cda_data_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_cda_data_t
UF_ROUTE_cda_data_p_t
Overview
The UF_ROUTE_cda_data_s is the structure that holds the data required to
run the cable drawing automation program as a user-function utility from
the wiring interface. This structure indicates the number of records
selected and the selected connection list tags in the Rlist navigator
Data Members
num_recs
int
recs
tag_t *

------------

UF_ROUTE - UF_ROUTE_char_desc_s
UF_ROUTE_char_desc_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_char_desc_t
UF_ROUTE_char_desc_p_t
Overview
Characteristic description
Data Members
name
char *
type
int

------------

UF_ROUTE - UF_ROUTE_characteristic_match_plugin_s
UF_ROUTE_characteristic_match_plugin_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_characteristic_match_plugin_t
UF_ROUTE_characteristic_match_plugin_p_t
Overview
Structure passed to the CHARACTERISTIC_MATCH plugin.
The CHARACTERISTIC_MATCH plugin selects a set of parts
or a set of stocks conforming to the given
criteria.
The CHARACTERISTIC_MATCH plugin must filter the selected part
based on the current discipline and specification by
calling the FilterOnCurrentSpecifications routine.
Data Members
node_id
const char*
Input: Specifies the name/ID of the node in the
Product Library View under which to look
for matching characteristics.
num_criteria
int
criteria
UF_ROUTE_charx_p_t
Input: Characteristics structure used to for item selection.
num_matches
int
matches
UF_ROUTE_part_lib_part_p_t
Output: Characteristics of the parts that match the criteria.
error
int
Output: Zero indicates success

------------

UF_ROUTE - UF_ROUTE_component_lock_plugin_s
UF_ROUTE_component_lock_plugin_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_component_lock_plugin_t
UF_ROUTE_component_lock_plugin_p_t
Overview
Structure passed to the STOCK_COMPONENT_LOCKED plugin.
Data Members
stock
tag_t
Input: Tag of the stock object
is_modifiable
logical
Output: TRUE if stock component can be modified,
FALSE otherwise.

------------

UF_ROUTE - UF_ROUTE_component_name_plugin_s
UF_ROUTE_component_name_plugin_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_component_name_plugin_t
UF_ROUTE_component_name_plugin_p_t
Overview
The following structure is used for the TEMP_STOCK_COMPONENT_NAME
and STOCK_COMPONENT_NAME plugins determining stock component names.
See UF_UGMGR_encode_part_filename for details on Team Center Engineering
specific arguments ( item_revision, item_type and item_name ).
Data Members
stock
tag_t
Input: Tag of the stock object
rename_part
logical
Output: TRUE if part needs to be renamed,
FALSE part should remain as it is.
path_name [ MAX_FSPEC_BUFSIZE ]
char
Output: Path of file ("" == current directory) not used in Team Center Engineering,
this is the path to the directory where stock components are to be
be stored. This may be a relative path (to the current directory),
or an absolute path.
folder_name [ MAX_FSPEC_BUFSIZE ]
char
Output: item folder ("" == default folder), only used for Team Center Engineering,
this is the name of the folder that the stock
components will be placed into.
file_name [ UF_CFI_MAX_FILE_NAME_BUFSIZE ]
char
Output: Name of file ("" == no name generated,
default user exit will be called)
item_revision [ UF_UGMGR_PARTREV_BUFSIZE ]
char
Output: item revision , only used for Team Center Engineering ("" == no revision generated,
default user exit will be called)
item_type [ UF_UGMGR_FTYPE_BUFSIZE ]
char
Output: item type, only used for Team Center Engineering
item_name [ UF_UGMGR_FNAME_BUFSIZE ]
char
Output: item name, only used for Team Center Engineering.
component_name [ MAX_FSPEC_BUFSIZE ]
char
Output: component name, the name of the component in NX.

------------

UF_ROUTE - UF_ROUTE_component_reuse_plugin_s
UF_ROUTE_component_reuse_plugin_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_component_reuse_plugin_t
UF_ROUTE_component_reuse_plugin_p_t
Overview
Structure passed to the STOCK_COMPONENT_LOOKUP plugin.
Data Members
stock
tag_t
Input: Tag of the stock object
new_stock_component
tag_t
Output: Tag of the part to replace the
stock component with.

------------

UF_ROUTE - UF_ROUTE_cope_data_s
UF_ROUTE_cope_data_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_cope_data_t
UF_ROUTE_cope_data_p_t
Overview
Cope Corner Data Structure
Data Members
rcp_tag
tag_t
Corner for cope
num_stock
int
Num of stock to cope
stock_tags
tag_t *
Array of stock to cope

------------

UF_ROUTE - UF_ROUTE_corner_pref_s
UF_ROUTE_corner_pref_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_corner_pref_t
UF_ROUTE_corner_pref_p_t
Overview
Corner Preference Structure
Data Members
type
int
bend_radius_method
UF_ROUTE_bend_radius_method_t
bend_ratio
double
bend_radius
double
radius_units
int
dir
tag_t
Only used for miter with one segment
bend_table_entry
char*

------------

UF_ROUTE - UF_ROUTE_design_rule_data_s
UF_ROUTE_design_rule_data_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_design_rule_data_t
UF_ROUTE_design_rule_data_p_t
Data Members
mode
int
reason
int
num_objects
int
objects
tag_t *

------------

UF_ROUTE - UF_ROUTE_duct_area_s
UF_ROUTE_duct_area_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_duct_area_t
UF_ROUTE_duct_area_p_t
Overview
The area parameter. This structure is only used by DuctSizeCalculator
Data Members
value
double
isLocked
logical

------------

UF_ROUTE - UF_ROUTE_duct_aspectRatio_s
UF_ROUTE_duct_aspectRatio_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_duct_aspectRatio_t
UF_ROUTE_duct_aspectRatio_p_t
Overview
The Aspect Ratio parameter. This structure is only used by DuctSizeCalculator
Data Members
value
double
isLocked
logical

------------

UF_ROUTE - UF_ROUTE_duct_diameter_s
UF_ROUTE_duct_diameter_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_duct_diameter_t
UF_ROUTE_duct_diameter_p_t
Overview
The Diameter parameter. This structure is only used by DuctSizeCalculator
Data Members
value
double
unit
tag_t
isLocked
logical

------------

UF_ROUTE - UF_ROUTE_duct_eqvDiameter_s
UF_ROUTE_duct_eqvDiameter_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_duct_eqvDiameter_t
UF_ROUTE_duct_eqvDiameter_p_t
Overview
The Equivalent Diameter parameter. This structure is only used by DuctSizeCalculator
Data Members
value
double
isLocked
logical

------------

UF_ROUTE - UF_ROUTE_duct_height_s
UF_ROUTE_duct_height_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_duct_height_t
UF_ROUTE_duct_height_p_t
Overview
The height parameter. This structure is only used by DuctSizeCalculator
Data Members
value
double
unit
tag_t
isLocked
logical

------------

UF_ROUTE - UF_ROUTE_duct_parameters_s
UF_ROUTE_duct_parameters_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_ductParams_t
UF_ROUTE_ductParams_p_t
Overview
This structure contains all the parameters of the duct size calculator. The duct size calculator uses this structure
to pass information to and receive information from the duct size calculator plugin.
The duct size calculator plugin uses the UF_ROUTE_duct_parameter_types_e to know which parameter is being sent from the dialog.
The plugin calculates the required values and updates this structure.
Use the UF_ROUTE_duct_parameters_m macro to initialize this structure.
Data Members
height
UF_ROUTE_duct_height_t
Height of the duct
width
UF_ROUTE_duct_width_t
width of the duct
diameter
UF_ROUTE_duct_diameter_t
diameter of the duct
area
UF_ROUTE_duct_area_t
area of the duct
equivalentDiameter
UF_ROUTE_duct_eqvDiameter_t
equivalent Diameter of the duct
aspectRatio
UF_ROUTE_duct_aspectRatio_t
Aspect ratio of the duct
volumeFlow
UF_ROUTE_duct_volFlow_t
volume Flow rate of the duct
velocity
UF_ROUTE_duct_velocity_t
velocity component of the duct
frictionLoss
double
loss due to friction of the duct
velocityHead
double
velocity of the duct

------------

UF_ROUTE - UF_ROUTE_duct_reinforcement_parameters_s
UF_ROUTE_duct_reinforcement_parameters_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_duct_reinforcement_params_t
UF_ROUTE_duct_reinforcement_params_p_t
Overview
The duct reinforcement plugin evaluates the parent duct selected and determines
the various parameters for duct reinforceemnt creation. These parameters are
stored using the following struct.
Data Members
reinforcementType
UF_ROUTE_duct_reinforcement_types_t
Type of reinforcement to be applied options are None, Inside or Outside
parallelStockBlockVisibility
logical
Parallel Stock Block Visibility
parallelStock
UF_ROUTE_part_lib_part_t
Stock to be applied parallel to axis of the duct
numberOfPairs
int
Number of pairs of parallel reinforcements to be applied
spacing
double
Space between each pair of reinforcement applied parallel to axis of the duct
perpendicularStockBlockVisibility
logical
Perpendicular Stock Block Visibility
reinforcementTypeBlockVisibility
logical
Reinforcement Type Visibility
perpendicularStock
UF_ROUTE_part_lib_part_t
Stock to be applied perpendicular to axis of the duct
interval
double
Interval at which perpendicular stock is to be applied
clearnce
double
Minimum clearance value from the start and end of the parent duct
editMode
logical
Is the plugin invoked during edit of duct reinforcement

------------

UF_ROUTE - UF_ROUTE_duct_velocity_s
UF_ROUTE_duct_velocity_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_duct_velocity_t
UF_ROUTE_duct_velocity_p_t
Overview
The Velocity parameter. This structure is only used by DuctSizeCalculator
Data Members
value
double
unit
tag_t
isLocked
logical

------------

UF_ROUTE - UF_ROUTE_duct_volFlow_s
UF_ROUTE_duct_volFlow_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_duct_volFlow_t
UF_ROUTE_duct_volFlow_p_t
Overview
The Volume Flow Rate parameter. This structure is only used by DuctSizeCalculator
Data Members
value
double
unit
tag_t
isLocked
logical

------------

UF_ROUTE - UF_ROUTE_duct_width_s
UF_ROUTE_duct_width_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_duct_width_t
UF_ROUTE_duct_width_p_t
Overview
The width parameter. This structure is only used by DuctSizeCalculator
Data Members
value
double
unit
tag_t
isLocked
logical

------------

UF_ROUTE - UF_ROUTE_find_root_node_plugin_s
UF_ROUTE_find_root_node_plugin_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_find_root_node_plugin_t
UF_ROUTE_find_root_node_plugin_p_t
Overview
Structure passed to the FIND_ROOT_NODE plugin.
The FIND_ROOT_NODE plugin returns the lowest,
non-leaf INCLASS node that contains the given part.
Data Members
item_id [ MAX_LINE_BUFSIZE ]
char
Input: Specifies the part number (i.e. Teamcenter item ID)
whose containing node the plug-in should return.
node_id [ MAX_LINE_BUFSIZE ]
char
Output: Specifies the ID of the lowest, non-leaf,
INCLASS node which contains the given part.
error
int
Output: Zero indicates success

------------

UF_ROUTE - UF_ROUTE_iman_bom_data_s
UF_ROUTE_iman_bom_data_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_iman_bom_data_t
UF_ROUTE_iman_bom_data_p_t
Overview
The UF_ROUTE_iman_bom_data_s is the structure used to implement the
Routing Team Center Engineering BOM post piping parts list callback.
It is currently empty but may be implemented in the future.
Data Members
place_holder
logical

------------

UF_ROUTE - UF_ROUTE_pcf_gen_data_s
UF_ROUTE_pcf_gen_data_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_pcf_gen_data_t
UF_ROUTE_pcf_gen_data_p_t
Overview
The UF_ROUTE_pcf_gen_data_s is the structure used to implement a pcf file
generation utility.  The Piping Component File is then used by Alias -
Isogen to create an isometric drawing.
Data Members
filename
const char*
Input: filespec on disk for output PCF file

------------

UF_ROUTE - UF_ROUTE_retrieve_eplib_data_s
UF_ROUTE_retrieve_eplib_data_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_retrieve_eplib_data_t
UF_ROUTE_retrieve_eplib_data_p_t
Data Members
library
UF_EPLIB_part_lib_p_t
error_code
int

------------

UF_ROUTE - UF_ROUTE_specify_item_plugin_s
UF_ROUTE_specify_item_plugin_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_specify_item_plugin_t
UF_ROUTE_specify_item_plugin_p_t
Overview
Structure passed to the SPECIFY_ITEM plugin.
The SPECIFY_ITEM plugin selects a part, stock, elbow,
wire, cable, or shield conforming to the given
characteristics.
The SPECIFY_ITEM plugin must filter the selected part
based on the current discipline and specification by
calling the FilterOnCurrentSpecifications routine.
Data Members
mode
int
Input: Specifies the type of item (e.g. part, stock, elbow, etc.)
Valid values: (See uf_ui_route.h)
UF_UI_ROUTE_PLV_INDEX_PARTS
UF_UI_ROUTE_PLV_INDEX_STOCK,
UF_UI_ROUTE_PLV_INDEX_ELBOWS
UF_UI_ROUTE_PLV_INDEX_CUT_ELBOWS,
UF_UI_ROUTE_PLV_INDEX_REPLACE_PART
UF_UI_ROUTE_PLV_INDEX_WIRES,
UF_UI_ROUTE_PLV_INDEX_CABLES
UF_UI_ROUTE_PLV_INDEX_SHIELDS
node_id
const char*
Input: Specifies the name/ID of the node in the
Product Library View under which to look
for matching characteristics.
num_specifications
int
specifications
const char* *
Input: Specifies all of the disciplines and specifications
that are currently valid. Reserved for future use.
chosen_part
UF_ROUTE_part_lib_part_p_t
Input: Characteristics structure used to for item selection.
Represents the characteristics from a part chosen by
the user before calling the plug-in.
Output: Characteristics of the part the user selected while
running the plug-in.
placer_object
tag_t
Output: Selected placement object. A condemned point to stand in
for screen position pick. Will be a NULL_TAG in Assign
Stock (UF_UI_ROUTE_PLV_INDEX_STOCK) mode.
placer_object_pos [ 3 ]
double
Output: Placement position in Work Occurrence coordinates.
error
int
Output: Zero indicates success

------------

UF_ROUTE - UF_ROUTE_split_descriptors_plugin_s
UF_ROUTE_split_descriptors_plugin_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_split_descriptors_plugin_t
UF_ROUTE_split_descriptors_plugin_p_t
Overview
Structure passed to the SPLIT_DESCRIPTORS plugin.
The SPLIT_DESCRIPTORS plugin splits the given characteristics into
descriptor characteristics, hidden characteristics, and applied
characteristics.
Data Members
num_charx
int
charx
UF_ROUTE_charx_p_t
Input: Characteristics to split up.
num_descriptor_charx
int
descriptor_charx
UF_ROUTE_charx_p_t
Output: Non-hidden descriptor characteristics.
num_hidden_charx
int
hidden_charx
UF_ROUTE_charx_p_t
Output: Hidden descriptor characteristics.
num_applied_charx
int
applied_charx
UF_ROUTE_charx_p_t
Output: Applied descriptor characteristics.
error
int
Output: Zero indicates success

------------

UF_ROUTE - UF_ROUTE_tag_list_s
UF_ROUTE_tag_list_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_tag_list_t
UF_ROUTE_tag_list_p_t
Overview
Structure used to store a variable length array of tags.
Environment
Internal and External
History
New in V17
Data Members
num_alloc
unsigned int
Number of elements allocated for the Variable
length Array of tags
num_used
unsigned int
Currently used Number of elements in array
array
tag_t *
Variable length array of tags

------------

UF_ROUTE - UF_ROUTE_unify_path_plugin_s
UF_ROUTE_unify_path_plugin_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_unify_path_plugin_t
UF_ROUTE_unify_path_plugin_p_t
Overview
Structure passed to the UNIFY_PATH plugin.
The UNIFY_PATH plugin should take the given tags and present the user
with a dialog to allow the user to select the new characteristics.
Then the UNIFY_PATH plugin should call the UnifyPath NXOpen routine
for each tag with the new characteristics.
Data Members
num_objects
int
objects
tag_t*
Input: The array of objects to unify.
error
int
Output: Zero indicates success

------------

UF_ROUTE - UF_ROUTE_user_preference_s
UF_ROUTE_user_preference_s
(view source)
Defined in: uf_route.h
Also known as:
UF_ROUTE_user_preference_t
UF_ROUTE_user_preference_p_t
Data Members
type
int
key
const char *
count
int
value
value_t

------------

UF_SC - UF_SC_BODY_dumb_data_s
UF_SC_BODY_dumb_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_BODY_dumb_data_t
UF_SC_BODY_dumb_data_p_t
Data Members
num_bodies
int
bodies
tag_t *
include_sheet_bodies
logical

------------

UF_SC - UF_SC_BODY_feature_data_s
UF_SC_BODY_feature_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_BODY_feature_data_t
UF_SC_BODY_feature_data_p_t
Data Members
num_features
int
features
tag_t *
n_negated_entities
int
negated_entities
tag_t *
part_occurrence
tag_t
include_sheet_bodies
logical

------------

UF_SC - UF_SC_BODY_group_data_s
UF_SC_BODY_group_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_BODY_group_data_t
UF_SC_BODY_group_data_p_t
Data Members
num_groups
int
groups
tag_t *
n_negated_entities
int
negated_entities
tag_t *
include_sheet_bodies
logical

------------

UF_SC - UF_SC_CURVE_apparent_chaining_data_s
UF_SC_CURVE_apparent_chaining_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_CURVE_apparent_chaining_data_t
UF_SC_CURVE_apparent_chaining_data_p_t
Data Members
seedCurve
tag_t
view
tag_t
chainingRule
UF_SC_CURVE_apparent_chaining_rule
selectionMask
UF_SC_CURVE_apparent_chaining_selection
chainingTolerance
double
angleTolerance
double

------------

UF_SC - UF_SC_CURVE_dumb_data_s
UF_SC_CURVE_dumb_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_CURVE_dumb_data_t
UF_SC_CURVE_dumb_data_p_t
Data Members
num_curves
int
curves
tag_t *
allowRefCurves
logical
allowed_entity_types
byte

------------

UF_SC - UF_SC_CURVE_feat_chain_data_s
UF_SC_CURVE_feat_chain_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_CURVE_feat_chain_data_t
UF_SC_CURVE_feat_chain_data_p_t
Data Members
num_features
int
features
tag_t *
seed_curve
tag_t
end_curve
tag_t
it is optional
from_seed_start
logical
whether the chain starts from the start
point of the seed curve
gap_tol
double
n_negated_entities
int
negated_entities
tag_t *
allowRefCurves
logical
optimizeCurves
logical
optimizeFactors [ 2 ]
double

------------

UF_SC - UF_SC_CURVE_feat_tangent_data_s
UF_SC_CURVE_feat_tangent_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_CURVE_feat_tangent_data_t
UF_SC_CURVE_feat_tangent_data_p_t
Data Members
num_features
int
features
tag_t *
seed_curve
tag_t
end_curve
tag_t
it is optional
from_seed_start
logical
whether the tangent starts from the start
point of the start curve if end curve is provided
gap_angle_tols [ 2 ]
double
n_negated_entities
int
negated_entities
tag_t *
allowRefCurves
logical
optimizeCurves
logical
optimizeFactors [ 2 ]
double

------------

UF_SC - UF_SC_CURVE_feature_data_s
UF_SC_CURVE_feature_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_CURVE_feature_data_t
UF_SC_CURVE_feature_data_p_t
Data Members
num_features
int
features
tag_t *
n_negated_entities
int
negated_entities
tag_t *
allowRefCurves
logical
allowed_entity_types
byte
part_occurrence
tag_t

------------

UF_SC - UF_SC_CURVE_feature_points_data_s
UF_SC_CURVE_feature_points_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_CURVE_feature_points_data_t
UF_SC_CURVE_feature_points_data_p_t
Data Members
num_features
int
features
tag_t *
n_negated_entities
int
negated_entities
tag_t *
part_occurrence
tag_t

------------

UF_SC - UF_SC_CURVE_follow_fillet_data_s
UF_SC_CURVE_follow_fillet_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_CURVE_follow_fillet_data_t
UF_SC_CURVE_follow_fillet_data_p_t
Overview
Do NOT add negated_entities information for Follow Fillet
Data Members
num_features
int
features
tag_t *
num_bodies
int
bodies
tag_t *
num_dumb_curves
int
dumb_curves
tag_t *
seed_wireframe
tag_t
end_wireframe
tag_t
it is optional
from_seed_start
logical
whether the chain starts from the start
point of the seed curve
tangent
logical
seed_point [ 3 ]
double
gap_angle_tols [ 2 ]
double
allowRefCurves
logical
useStopAtIntersection
logical
Whether rules is to be created with stop at intersection or not.
optimizeCurves
logical
optimizeFactors [ 2 ]
double

------------

UF_SC - UF_SC_CURVE_group_data_s
UF_SC_CURVE_group_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_CURVE_group_data_t
UF_SC_CURVE_group_data_p_t
Data Members
num_groups
int
groups
tag_t *
n_negated_entities
int
negated_entities
tag_t *
allowRefCurves
logical
allowed_entity_types
byte

------------

UF_SC - UF_SC_CURVE_region_boundary_data_s
UF_SC_CURVE_region_boundary_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_CURVE_region_boundary_data_t
UF_SC_CURVE_region_boundary_data_p_t
Data Members
seed_obj
tag_t
num_curves
int
curves
tag_t *
seed_point [ 3 ]
double
This is the abs pick point on the face
distance_tol
double
allowRefCurves
logical

------------

UF_SC - UF_SC_EDGE_body_data_s
UF_SC_EDGE_body_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_EDGE_body_data_t
UF_SC_EDGE_body_data_p_t
Data Members
body
tag_t
n_negated_entities
int
negated_entities
tag_t *

------------

UF_SC - UF_SC_EDGE_boundary_data_s
UF_SC_EDGE_boundary_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_EDGE_boundary_data_t
UF_SC_EDGE_boundary_data_p_t
Data Members
num_faces_n_features
int
faces_n_features
tag_t *
n_negated_entities
int
negated_entities
tag_t *

------------

UF_SC - UF_SC_EDGE_chain_data_s
UF_SC_EDGE_chain_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_EDGE_chain_data_t
UF_SC_EDGE_chain_data_p_t
Overview
common_face is to be used in case of chain between edges. In case,
there are 2 edges contained on 2 faces, this tag_t is used to
resolve such ambiguity. It would be only used in case there is ambiguity.
Not otherwise.
Data Members
start_edge
tag_t
end_edge
tag_t
from_start
logical
whether the chain starts from the start
point of the start edge
common_face
tag_t
common face on which both edges lie
laminar_edges_only
logical
allow only laminar edges ??
n_negated_entities
int
negated_entities
tag_t *

------------

UF_SC - UF_SC_EDGE_dumb_data_s
UF_SC_EDGE_dumb_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_EDGE_dumb_data_t
UF_SC_EDGE_dumb_data_p_t
Data Members
num_edges
int
edges
tag_t *

------------

UF_SC - UF_SC_EDGE_face_data_s
UF_SC_EDGE_face_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_EDGE_face_data_t
UF_SC_EDGE_face_data_p_t
Data Members
num_faces
int
faces
tag_t *
n_negated_entities
int
negated_entities
tag_t *

------------

UF_SC - UF_SC_EDGE_feature_data_s
UF_SC_EDGE_feature_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_EDGE_feature_data_t
UF_SC_EDGE_feature_data_p_t
Data Members
num_features
int
features
tag_t *
n_negated_entities
int
negated_entities
tag_t *
part_occurrence
tag_t

------------

UF_SC - UF_SC_EDGE_feature_intersection_edges_data_s
UF_SC_EDGE_feature_intersection_edges_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_EDGE_feature_intersection_edges_data_t
UF_SC_EDGE_feature_intersection_edges_data_p_t
Data Members
num_features
int
features
tag_t *
n_negated_entities
int
negated_entities
tag_t *
part_occurrence
tag_t

------------

UF_SC - UF_SC_EDGE_intersect_data_s
UF_SC_EDGE_intersect_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_EDGE_intersect_data_t
UF_SC_EDGE_intersect_data_p_t
Data Members
num_faces_n_features1
int
faces_n_features1
tag_t *
num_faces_n_features2
int
faces_n_features2
tag_t *
n_negated_entities
int
negated_entities
tag_t *

------------

UF_SC - UF_SC_EDGE_mseedtan_data_s
UF_SC_EDGE_mseedtan_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_EDGE_mseedtan_data_t
UF_SC_EDGE_mseedtan_data_p_t
Data Members
num_seed_edges
int
seed_edges
tag_t *
angle_tol
double
angle tolerance for tangent edges
same_convexity
logical
will only find tangnet edges that has the same convexity if true
n_negated_entities
int
negated_entities
tag_t *

------------

UF_SC - UF_SC_EDGE_multi_seed_outer_face_edges_data_s
UF_SC_EDGE_multi_seed_outer_face_edges_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_EDGE_multi_seed_outer_face_edges_data_t
UF_SC_EDGE_multi_seed_outer_face_edges_data_p_t
Data Members
num_faces_n_features
int
faces_n_features
tag_t *
n_negated_entities
int
negated_entities
tag_t *
rib_top_face_edges
logical

------------

UF_SC - UF_SC_EDGE_shbndary_data_s
UF_SC_EDGE_shbndary_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_EDGE_shbndary_data_t
UF_SC_EDGE_shbndary_data_p_t
Data Members
sheet
tag_t
n_negated_entities
int
negated_entities
tag_t *

------------

UF_SC - UF_SC_EDGE_tangent_data_s
UF_SC_EDGE_tangent_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_EDGE_tangent_data_t
UF_SC_EDGE_tangent_data_p_t
Data Members
start_edge
tag_t
end_edge
tag_t
it is optional
from_start
logical
whether the tangent starts from the start
point of the start edge if end edge is provided
laminar_edges_only
logical
allow only laminar edges ??
angle_tol
double
angle tolerance for tangent edges
same_convexity
logical
will only find tangnet edges that has the same convexity if true
n_negated_entities
int
negated_entities
tag_t *

------------

UF_SC - UF_SC_EDGE_vertex_data_s
UF_SC_EDGE_vertex_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_EDGE_vertex_data_t
UF_SC_EDGE_vertex_data_p_t
Data Members
start_edge
tag_t
the seed edge
from_start
logical
=true, start vertex of the start_edge,
=false, end vertex of the start_edge
n_negated_entities
int
negated_entities
tag_t *

------------

UF_SC - UF_SC_EDGE_vertex_tangent_data_s
UF_SC_EDGE_vertex_tangent_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_EDGE_vertex_tangent_data_t
UF_SC_EDGE_vertex_tangent_data_p_t
Data Members
start_edge
tag_t
the seed edge
from_start
logical
=true, start vertex of the start_edge,
=false, end vertex of the start_edge
angle_tol
double
angle tolerance for tangent edges
same_convexity
logical
will only find tangnet edges that has the same convexity if true
n_negated_entities
int
negated_entities
tag_t *

------------

UF_SC - UF_SC_FACE_adjacent_data_s
UF_SC_FACE_adjacent_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_FACE_adjacent_data_t
UF_SC_FACE_adjacent_data_p_t
Data Members
seed
tag_t
n_negated_entities
int
negated_entities
tag_t *

------------

UF_SC - UF_SC_FACE_all_blend_data_s
UF_SC_FACE_all_blend_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_FACE_all_blend_data_t
UF_SC_FACE_all_blend_data_p_t
Data Members
body
tag_t
n_negated_entities
int
negated_entities
tag_t *
feature
tag_t

------------

UF_SC - UF_SC_FACE_body_data_s
UF_SC_FACE_body_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_FACE_body_data_t
UF_SC_FACE_body_data_p_t
Data Members
body
tag_t
n_negated_entities
int
negated_entities
tag_t *

------------

UF_SC - UF_SC_FACE_boss_pocket_faces_data_s
UF_SC_FACE_boss_pocket_faces_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_FACE_boss_pocket_faces_data_t
UF_SC_FACE_boss_pocket_faces_data_p_t
Data Members
seed
tag_t
n_negated_entities
int
negated_entities
tag_t *
includeBoundaryBlends
logical

------------

UF_SC - UF_SC_FACE_connected_blend_data_s
UF_SC_FACE_connected_blend_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_FACE_connected_blend_data_t
UF_SC_FACE_connected_blend_data_p_t
Data Members
seed
tag_t
n_negated_entities
int
negated_entities
tag_t *
includeBlendLike
logical
includeUnlabeledBlend
logical
feature
tag_t

------------

UF_SC - UF_SC_FACE_dumb_data_s
UF_SC_FACE_dumb_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_FACE_dumb_data_t
UF_SC_FACE_dumb_data_p_t
Data Members
num_faces
int
faces
tag_t *

------------

UF_SC - UF_SC_FACE_face_and_adjacent_faces_data_s
UF_SC_FACE_face_and_adjacent_faces_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_FACE_face_and_adjacent_faces_data_t
UF_SC_FACE_face_and_adjacent_faces_data_p_t
Data Members
seed
tag_t
n_negated_entities
int
negated_entities
tag_t *

------------

UF_SC - UF_SC_FACE_feature_data_s
UF_SC_FACE_feature_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_FACE_feature_data_t
UF_SC_FACE_feature_data_p_t
Data Members
num_features
int
features
tag_t *
n_negated_entities
int
negated_entities
tag_t *
part_occurrence
tag_t

------------

UF_SC - UF_SC_FACE_merged_rib_faces_data_s
UF_SC_FACE_merged_rib_faces_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_FACE_merged_rib_faces_data_t
UF_SC_FACE_merged_rib_faces_data_p_t
Data Members
seed
tag_t
n_negated_entities
int
negated_entities
tag_t *
includeBoundaryBlends
logical
options
void *
ref_pt [ 3 ]
double

------------

UF_SC - UF_SC_FACE_region_boundary_data_s
UF_SC_FACE_region_boundary_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_FACE_region_boundary_data_t
UF_SC_FACE_region_boundary_data_p_t
Data Members
source_face
tag_t
seed_obj
tag_t
num_curves
int
curves
tag_t *
seed_point [ 3 ]
double
This is the abs pick point on the face
distance_tol
double
allowRefCurves
logical
output
void *
Pointer to a structure for holding output data

------------

UF_SC - UF_SC_FACE_region_data_s
UF_SC_FACE_region_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_FACE_region_data_t
UF_SC_FACE_region_data_p_t
Overview
For the region of faces, we have two ways to allow you input boundary faces.
You can either input the individual boundary faces in bndary_faces array or
you can input boundary faces as rules in bndary_face_data array.
You must input one type of boudnary faces.
The input rule data for boundary faces have to be one of the
UF_SC_FACE__data_p_t types.
If bndary_faces is not NULL, bndary_face_data array will be ignored. The
bndary_face_data will take effect only if num_bndary_faces = 0 and
bndary_faces = NULL;
Data Members
seed_face
tag_t
num_bndary_faces
int
bndary_faces
tag_t *
n_bndary_face_data
int
bndary_face_types
int *
array of int to input rule types
bndary_face_data
UF_SC_input_data_p_t
array of input data
n_negated_entities
int
negated_entities
tag_t *

------------

UF_SC - UF_SC_FACE_rib_faces_data_s
UF_SC_FACE_rib_faces_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_FACE_rib_faces_data_t
UF_SC_FACE_rib_faces_data_p_t
Data Members
seed
tag_t
n_negated_entities
int
negated_entities
tag_t *
includeBoundaryBlends
logical
traverseInteriorLoops
logical

------------

UF_SC - UF_SC_FACE_slot_faces_data_s
UF_SC_FACE_slot_faces_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_FACE_slot_faces_data_t
UF_SC_FACE_slot_faces_data_p_t
Data Members
seed
tag_t
n_negated_entities
int
negated_entities
tag_t *
includeBoundaryBlends
logical
traverseInteriorLoops
logical

------------

UF_SC - UF_SC_FACE_tangent_data_s
UF_SC_FACE_tangent_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_FACE_tangent_data_t
UF_SC_FACE_tangent_data_p_t
Overview
For the region of faces, we have two ways to allow you input boundary faces.
You can either input the individual boundary faces in bndary_faces array or
you can input boundary faces as rules in bndary_face_data array.
The boundary data is optional. You can leave both type of boundary data to
be NULL.
The input rule data for boundary faces have to be one of the
UF_SC_FACE__data_p_t types.
If bndary_faces is not NULL, bndary_face_data array will be ignored. The
bndary_face_data will take effect only if num_bndary_faces = 0 and
bndary_faces = NULL;
Data Members
seed_face
tag_t
num_bndary_faces
int
bndary_faces
tag_t *
This is optional
angle_tol
double
Angle tolerance for tangent faces
n_bndary_face_data
int
bndary_face_types
int *
array of int to input rule types
bndary_face_data
UF_SC_input_data_p_t
array of input data
n_negated_entities
int
negated_entities
tag_t *

------------

UF_SC - UF_SC_section_data_s
UF_SC_section_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_section_data_t
UF_SC_section_data_p_t
Data Members
n_rules
int
rule_types
int *
rules
UF_SC_input_data_t *
chaining_tolerance
double
distance_tolerance
double
angle_tolerance
double
start_connector
tag_t
for stop at intersection: define the
end_connector
tag_t
for stop at intersection
help_point [ 3 ]
double
for stop at intersection
intersection_point_1 [ 3 ]
double
for stop at intersection
intersection_point_2 [ 3 ]
double
for stop at intersection
n_output_objects
int
for UF_MODL_ask_section,
the ouput objects, their start and
end collectors, and the endpoints
of the resulting curves
output_objects
UF_SC_section_output_data_t *

------------

UF_SC - UF_SC_section_output_data_s
UF_SC_section_output_data_s
(view source)
Defined in: uf_sc_types.h
Also known as:
UF_SC_section_output_data_t
UF_SC_section_output_data_p_t
Data Members
output_object
tag_t
The tag of the object that constructs the section
start_connected_object
tag_t
The object the connected to the above objects,
at the start_point
start_point [ 3 ]
double
end_connected_object
tag_t
The other object the connected to the above objects,
at the end_point
end_point [ 3 ]
double

------------

UF_SCOP - UF_SCOP_vector_data_s
UF_SCOP_vector_data_s
(view source)
Defined in: uf_scop.h
Also known as:
UF_SCOP_vector_data_t
UF_SCOP_vector_data_p_t
Overview
The application data for vector data
Data Members
xyz [ 3 ]
double
the vector location
ijk [ 3 ]
double
the vector direction, if data type is
UF_SCOP_TX_INTP_DATYPE_VECTOR
lead_tilt [ 2 ]
double
the vector lead angle and tilt angle,
if data type is
UF_SCOP_TX_INTP_DATYPE_ANGLE_DS or
UF_SCOP_TX_INTP_DATYPE_ANGLE_PS
is_corner_vector
logical
If TRUE, this vector can not be deleted.
The users must set a vector on each
corner of the Drive surface. (Therefore,
four vectors must be set to the Drive
surface, one for each corner. Two vectors
must be set to Curve/Point method.) The
flags "is_corner_vector" of these vectors
must be set to TRUE.

------------

UF_SF - UF_SF_1d_mesh_data_s
UF_SF_1d_mesh_data_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_1d_mesh_data_t
UF_SF_1d_mesh_data_p_t
Data Members
element_type
UF_SF_1D_element_type_t
Type of element for solid meshing.
The following tetrahedral elements
are supported:
UF_SF_ATM_SYSTEM_DEFAULT_TYPE
UF_SF_ATM_TETRA
UF_SF_ATM_TETRA_10
density_type
UF_SF_1D_density_type_t
Type of edge density
UF_SF_1D_EDGE_DENSITY_NUMBER
UF_SF_1D_EDGE_DENSITY_SIZE
UF_SF_1D_EDGE_DENSITY_SMART
edge_density
double
Value of edge density.
merge_node_option
int
0 - OFF, 1 - ON
node_unique_tol
double
Value of node unique
tolerance.

------------

UF_SF - UF_SF__anisotropic_s
UF_SF__anisotropic_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF__anisotropic_t
Data Members
G [ 6 ]  [ 6 ]
UF_SF_multi_prop_t
mass_density
UF_SF_multi_prop_t
thermal_coeff [ 6 ]
UF_SF_multi_prop_t
reference_temperature
UF_SF_multi_prop_t
thermal_conduct [ 3 ]  [ 3 ]
UF_SF_multi_prop_t
specific_heat
UF_SF_multi_prop_t
damping_coeff
UF_SF_multi_prop_t

------------

UF_SF - UF_SF__fixed_s
UF_SF__fixed_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF__fixed_t
Data Members
type
UF_SF_fem_coord_type_t
Coordinate type.
origin [ 3 ]
double
origin point
x_dir [ 3 ]
double
x direction vector
y_dir [ 3 ]
double
y direction vector
z_dir [ 3 ]
double
z direction vector

------------

UF_SF - UF_SF__fluid_s
UF_SF__fluid_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF__fluid_t
Data Members
mass_density
UF_SF_multi_prop_t
thermal_conduct
UF_SF_multi_prop_t
thermal_coeff
UF_SF_multi_prop_t
dynamic_viscosity
UF_SF_multi_prop_t
specific_heat_pressure
UF_SF_multi_prop_t
gas_constant
UF_SF_multi_prop_t
bulk_modulus
UF_SF_multi_prop_t
sound_speed
UF_SF_multi_prop_t
damping_coeff
UF_SF_multi_prop_t
molar_mass
UF_SF_multi_prop_t

------------

UF_SF - UF_SF__isotropic_s
UF_SF__isotropic_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF__isotropic_t
Data Members
youngs_modulus
UF_SF_multi_prop_t
poissons_ratio
UF_SF_multi_prop_t
shear_modulus
UF_SF_multi_prop_t
mass_density
UF_SF_multi_prop_t
thermal_coeff
UF_SF_multi_prop_t
reference_temperature
UF_SF_multi_prop_t
plastic_strain_ratio
UF_SF_multi_prop_t
thermal_conduct
UF_SF_multi_prop_t
specific_heat
UF_SF_multi_prop_t
latent_heat
UF_SF_multi_prop_t
phase_temperature
UF_SF_multi_prop_t
phase_temperature_range
UF_SF_multi_prop_t
phase_specific_heat
UF_SF_multi_prop_t
ir_scattering_coeff
UF_SF_multi_prop_t
solar_scattering_coeff
UF_SF_multi_prop_t
ir_extinction_coeff
UF_SF_multi_prop_t
solar_extinction_coeff
UF_SF_multi_prop_t
electrical_resistivity
UF_SF_multi_prop_t
max_stress_tension
UF_SF_multi_prop_t
max_stress_compression
UF_SF_multi_prop_t
max_in_plane_shear_stress
UF_SF_multi_prop_t
max_strain_tension
UF_SF_multi_prop_t
max_strain_compression
UF_SF_multi_prop_t
max_in_plane_shear_strain
UF_SF_multi_prop_t
tsai_wu_interaction
UF_SF_multi_prop_t
damping_coeff
UF_SF_multi_prop_t

------------

UF_SF - UF_SF__orthotropic_s
UF_SF__orthotropic_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF__orthotropic_t
Data Members
youngs_modulus [ 3 ]
UF_SF_multi_prop_t
poissons_ratio [ 3 ]
UF_SF_multi_prop_t
mass_density
UF_SF_multi_prop_t
shear_modulus [ 3 ]
UF_SF_multi_prop_t
thermal_coeff [ 3 ]
UF_SF_multi_prop_t
reference_temperature
UF_SF_multi_prop_t
thermal_conduct [ 3 ]
UF_SF_multi_prop_t
specific_heat
UF_SF_multi_prop_t
latent_heat
UF_SF_multi_prop_t
phase_temperature
UF_SF_multi_prop_t
phase_temperature_range
UF_SF_multi_prop_t
phase_specific_heat
UF_SF_multi_prop_t
ir_scattering_coeff
UF_SF_multi_prop_t
solar_scattering_coeff
UF_SF_multi_prop_t
ir_extinction_coeff
UF_SF_multi_prop_t
solar_extinction_coeff
UF_SF_multi_prop_t
electrical_resistivity
UF_SF_multi_prop_t
max_stress_tension [ 3 ]
UF_SF_multi_prop_t
max_stress_compression [ 3 ]
UF_SF_multi_prop_t
max_in_plane_shear_stress
UF_SF_multi_prop_t
max_strain_tension [ 3 ]
UF_SF_multi_prop_t
max_strain_compression [ 3 ]
UF_SF_multi_prop_t
max_in_plane_shear_strain
UF_SF_multi_prop_t
tsai_wu_interaction
UF_SF_multi_prop_t
damping_coeff
UF_SF_multi_prop_t

------------

UF_SF - UF_SF_atm_mesh_parameters_data_s
UF_SF_atm_mesh_parameters_data_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_atm_mesh_parameters_data_t
UF_SF_atm_mesh_parameters_data_p_t
Overview
ATM parameters
Data Members
element_type
UF_SF_atm_element_types_t
TETRA or TETRA_10
edge_shape
UF_SF_atm_edge_shape_types_t
LINEAR, CURVED or MIXED
def_elem_size
double
Default Element Size
target_angle
double
0. < ang <= 90.
curvature_scaling
int
1 = OFF , 0 = ON
auto_constraining
int
1 = OFF , 0 = ON
elem_desc_tag
tag_t
element descri(p)tor tag

------------

UF_SF - UF_SF_COLOR_attr_s
UF_SF_COLOR_attr_s
(view source)
Defined in: uf_sf_legend.h
Also known as:
UF_SF_COLOR_attr_t
UF_SF_COLOR_attr_p_t
Overview
The following are the definitions used to define parameters of the
scalar-to-color mapping that is used in rendering fringe displays.
Data Members
num_ranges
int
Number of of discrete ranges of scalar
values in the scalar-to-color mapping.
ranges
double *
Array of size num_ranges defining
ranges of scalar values, each of which
maps to a different color.
It is an array of (num_ranges + 1) double
scalar values, where the minimum and
maximum scalar value for the ith range
are given by ranges[i] and
and ranges[i + 1], respectively.
The scalar ranges map to the colors in the
rgb_values field, if specified, or to linear
increments of the HSV blue-to-red model,
otherwise.
rgb_values
double *
Array of RGB triples where each triple
consists of red, green, and blue
double-precision numbers.
Scalar values in the ith range map to the
ith RGB triple, given by:
{ rgb_values[(i], <-- RED
rgb_values[(i + 1], <-- GREEN
rgb_values[(i + 2] } <-- BLUE
The size of the array of triples is num_ranges3

------------

UF_SF - UF_SF_COMPOSITE_auto_parameters_s
UF_SF_COMPOSITE_auto_parameters_s
(view source)
Defined in: uf_sf_composite.h
Also known as:
UF_SF_COMPOSITE_auto_parameters_t
Overview
----------------------------------------------------------------------------
Decription of  UF_SF_COMPOSITE_auto_parameters_s:
1. comp_parameters :-      Parameters used by both manual and auto
compositing.  See description of
UF_SF_COMPOSITE_parameters_t above.
2. min_edge_size :-        The minimum edge length allowed in the model.
Valid Range: { 0.0 < min_edge_size }
Autocompositing will be performed on body_tag in
order to eliminate all edges that are smaller
than min_edge_size.  Note, however, that it is
not guaranteed that all edges smaller than
min_edge_size will be eliminated because doing so
may violate the face_deviation_angle.
3. sliver_factor :-        The user specified minimum sliver factor.
sliver_factor is a ratio related to the ratio of
surface area divided by circumference which
detect faces that have a small surface area
compared to their curcumference.
Valid Range: { 0.0 < sliver_factor <= 1.0 } where
0.000 == a zero surface area surface.
0.056 == a rectangle 1x1000
0.175 == a rectangle 1x100
0.300 == recommended value.
0.510 == a rectangle 1x10
0.510 == a rectangle 1x10
0.886 == a perfect square.
1.000 == a perfect circle.
4. min_corner_angle :-     An angle (in degrees) representing the minimum
allowable angle at the corner of a surface.  Any
face with an angle less than this at a corner
will be a candidate for compositing with a
neighbor surface to eliminate this small angle.
Like min_edge_size, however, there is no
guarantee that all corner angles less than
min_corner_angle will be eliminated because
doing so may violate the face_deviation_angle.
Valid Range:  { 0.0 <= min_corner_angle <= 90 }
5. face_deviation_angle :- An angle (in degrees) representing the maximum
that the dihedral angle between 2
adjacent faces deviate from 180 degrees and
still be considered a candiate for compositing.
On the edge that is shared by surface1 and
surface2, the surface normals of the 2 surfaces
are compared.  If they deviate from each other
by more than face_deviation_angle, then the
surface will not be composite together unless
necessary to eliminate a face which violates
the sliver_factor.
Valid Range: { 0.0 <= face_deviation_angle <= 180 }
Data Members
comp_parameters
UF_SF_COMPOSITE_parameters_t
min_edge_size
double
sliver_factor
double
min_corner_angle
int
face_deviation_angle
int

------------

UF_SF - UF_SF_COMPOSITE_parameters_s
UF_SF_COMPOSITE_parameters_s
(view source)
Defined in: uf_sf_composite.h
Also known as:
UF_SF_COMPOSITE_parameters_t
Overview
----------------------------------------------------------------------------
Decription of  UF_SF_COMPOSITE_parameters_s:
1. auto_create_comp_edges: This logical parameter indicates whether composite
edges should be created automatically during the
creation of composite faces.  For example, during
the manual creation of a composite face, if, by
compositing the faces together 2 of the bounding
edge meet at a vertex that is only used by those 2
edges, these 2 edges will be candidates to be
composited into a composite edge.  If
auto_create_comp_edges == FALSE, no composite edges
will be created.  If auto_create_comp_edges == TRUE,
the edgew will be composited together if they meet
the min_edge_int_angle criteria below.
2. min_edge_int_angle:     This angle (input in degrees) is the criteria by
which it is decided whether to composite 2 edges
together or not.  If 2 edges share a common vertex,
and that vertex is used by only 2 edges, then the
angle (beta) between the 2 edges is computed.  If
beta > min_edge_int_angle, the edges will be
composited together.  If beta <= min_edge_int_angle,
the edges will not be composited together.
Data Members
auto_create_comp_edges
logical
see description above.
min_edge_int_angle
int
see description above.

------------

UF_SF - UF_SF_contact_mesh_data_s
UF_SF_contact_mesh_data_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_contact_mesh_data_t
UF_SF_contact_mesh_data_p_t
Data Members
element_name
char *
refer to uf_sf_lang_names.h
element_descritor_tag
tag_t
Set it to NULL_TAG
align_target_edge_node
int
0 - Equal Distance
1 - Minimum Distance or Normal To
target_edge_node_align_method
int
0 - Minimum Distance
1 - Normal To
number_of_elms
int
required
gap_tol_option
int
0 - Do not apply tol
1 - Apply gap tolerance
gap_tolerance
double
Gap tolerance option
0: Don't apply tolerance
1: Apply tolerance
contact_edge
tag_t
Tag of the contact edge.
contact_edge_mesh_dir
UF_SF_mesh_geom_meshdir_t
Direction of the mesh for the
contact edge:
UF_SF_MG_MESHDIR_FROM_START
UF_SF_MG_MESHDIR_FROM_END
contact_edge_start_limit
double
Limit of edge starting for the
contact edge.
contact_edge_end_limit
double
Limit of edge ending for the contact
edge.
target_edge
tag_t
Tag of the target edge.
target_edge_mesh_dir
UF_SF_mesh_geom_meshdir_t
Direction of the mesh for the target
edge:
UF_SF_MG_MESHDIR_FROM_START
UF_SF_MG_MESHDIR_FROM_END
target_edge_start_limit
double
set start limits to 0 and end limits
to 1 to build contact mesh between
entire length of the edges.
target_edge_end_limit
double
Limit of edge ending for the target
edge.

------------

UF_SF - UF_SF_defeature_parms_s
UF_SF_defeature_parms_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_defeature_parms_t
UF_SF_defeature_parms_p_t
Overview
Structure defining the parameters of a defeature feature.
Data Members
num_ret_faces
int
Number of retained faces in the
retained_faces array. Can be 0
retained_faces
tag_t *
Array of retained faces.
Will be NULL if num_ret_faces == 0
num_rem_faces
int
Number of removed faces in the
removed_faces array. Can be 0
removed_faces
tag_t *
Array of removed faces.
Will be NULL if num_rem_faces == 0
region_parms_p
UF_SF_idealize_region_p_t
Pointer to an instance of
UF_SF_idealize_region_t structure
that defines a region on the
body or NULL.

------------

UF_SF - UF_SF_disp_mesh_s
UF_SF_disp_mesh_s
(view source)
Defined in: uf_sf_disp_mesh.h
Also known as:
UF_SF_disp_mesh_t
UF_SF_disp_mesh_p_t
Overview
Structure defining the components of a shell mesh represented by a set of
nodes and nodal connectivity information.
Data Members
elem_dimension
UF_SF_mesh_dimension_t
Global dimension of mesh element for the whole mesh
= UF_SF_DIMENSION_0D -> CMASS or MASS
= UF_SF_DIMENSION_1D -> Bar, beam, rods, rigid, links,
springs and contact elements
= UF_SF_DIMENSION_2D -> quad4, quad8, tri3, tri6
= UF_SF_DIMENSION_3D -> tet4, tet10
= UF_SF_DIMENSION_ANY -> any dimension
num_elements
int
Number of elements in mesh
num_nodes
int
Number of nodes in mesh
num_elem_nodes
int
Number of nodes for each element.
This number along with the dimension defines the element type.
I.e. if the number is 4 and the dimension is 2d the type will
be QUAD4 but if the dimension is 3d the type will be TET4.
node_coords) [ 3 ]
double (*
Node coordinates array size of num_nodes.
The i-th node is defined by the triplet:
node_coords[i][0], node_coords[i][1], node_coords[i][1]
node_ids
int *
Node ID array size of num_nodes: node_ids[node_idx]
elem_ids
int *
Element ID array size of num_elements
elem_node_ids
int * *
Node IDs for each element: elem_node_ids[elem_idx][elem_node_idx]

------------

UF_SF - UF_SF_edge_density_data_s
UF_SF_edge_density_data_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_edge_density_data_t
UF_SF_edge_density_data_p_t
Overview
This Structure contains the data required to define the edge
density for a curve/edge object
Data Members
type
UF_SF_edge_density_type_t
indicates the type of density (size or
number).
size
double
The number of elements on the edge/curve is calculated
automatically from the length of the edge/curve and the
element size. If this option is set, the value of number
is disregarded.
number
int
The number of elements on the edge/curve is calculated
automatically from the length of the edge/curve and the
element size. If this option is set, the value of number is
disregarded.

------------

UF_SF - UF_SF_ef_conn_info_s
UF_SF_ef_conn_info_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_ef_conn_info_t
UF_SF_ef_conn_info_p_t
Data Members
element_des_tag
tag_t
Set to NULL_TAG
density_type
UF_SF_1D_density_type_t
Type of edge density
UF_SF_1D_EDGE_DENSITY_NUMBER
UF_SF_1D_EDGE_DENSITY_SIZE
UF_SF_1D_EDGE_DENSITY_SMART
edge_density
double
Value of edge density.
mesh_option
int
0 for Glue mesh
1 for Match mesh
num_edges
int
Number of edges
edge_tags
tag_p_t
Edge tags array
num_faces
int
Number of faces
face_tags
tag_p_t
Face tags array

------------

UF_SF - UF_SF_geom_options_s
UF_SF_geom_options_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_geom_options_t
UF_SF_geom_options_p_t
Data Members
fSyncPoints
logical
fSyncCsys
logical
fSyncLines
logical
fSyncArcs
logical
fSyncSplines
logical
fSyncSketchCurves
logical
fSyncConics
logical

------------

UF_SF - UF_SF_HPT_location_data_s
UF_SF_HPT_location_data_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_HPT_location_data_t
UF_SF_HPT_location_data_p_t
Overview
This structure contains the data required to define/describe
a smart point.
Data Members
method
UF_SF_HPT_method_t
Indicates the how the smart point is defined.
UF_SF_HPT_ON_CURVE
UF_SF_HPT_BASEPT_AND_OFFSET
UF_SF_HPT_CENTER_OF_CONIC
UF_SF_HPT_CURVE_INTERSECTION
UF_SF_HPT_ON_SURFACE
type
UF_SF_section_type_t
How the base is defined:
UF_SF_numeric_method_t.
origin [ 3 ]
double
Location of base point
when baseMethod = UF_SF_NUMERIC.
x_dir [ 3 ]
double
when baseMethod = UF_SF_EXPRESSION.
y_dir [ 3 ]
double
How the offset is defined:
when method = SFEM_HPT_BASEPT_AND_OFFSET
offset_set [ 3 ]
logical
Offset vector,
when baseMethod = UF_SF_NUMERIC.
offset [ 3 ]
double
Offset vector, when baseMethod = UF_SF_EXPRESSION.
geometry
tag_t
First object tag.
Curve tag when method = SFEM_HPT_ON_CURVE
First curve tag when method = SFEM_HPT_CURVE_INTERSECTION
Conic tag when method = SFEM_HPT_CENTER_OF_CONIC
exp_tag [ UF_SF__MAX_EXP_TAGS ]
tag_t
Second curve tag when method = SFEM_HPT_CURVE_INTERSECTION

------------

UF_SF - UF_SF_LEGEND_attr_s
UF_SF_LEGEND_attr_s
(view source)
Defined in: uf_sf_legend.h
Also known as:
UF_SF_LEGEND_attr_t
UF_SF_LEGEND_attr_p_t
Data Members
attr_mask
unsigned int
This field is set to one or more of the following
symbols OR'd together to indicate which of the
remaining fields of the structure are set.
UF_LEGEND_WIDTH_ATTR
UF_LEGEND_BORDER_ATTR
UF_LEGEND_FONT_SIZE_ATTR
UF_LEGEND_HEADER_ATTR
UF_LEGEND_INDEX_ATTR
UF_LEGEND_FOOTER_ATTR
width_percent
int
The percentage of the display which the
legend occupies. The legend takes up the full
height of the display. default: 20%
border_sw
logical
Switch indicating whether or not the border
of the legend gets displayed.
= TRUE -> display border
= FALSE -> do not display border. (default)
font_size
double
The size in inches of an individual character.
If not specified, the font is automatically
calculated so that 15 characters can be
displayed in the full width of the legend.
The auto size also is constrained by a maximum
size of .12" and a minimum size of .04".
default: automatic
header
UF_SF_LEGEND_title_t
The header text of the legend area
default: none defined.
index_attr
UF_SF_LEGEND_index_attr_t
The index area's attributes if defined.
default: none defined.
footer
UF_SF_LEGEND_title_t
The footer text of the legend area
default: none defined.

------------

UF_SF - UF_SF_LEGEND_index_attr_s
UF_SF_LEGEND_index_attr_s
(view source)
Defined in: uf_sf_legend.h
Also known as:
UF_SF_LEGEND_index_attr_t
UF_SF_LEGEND_index_attr_p_t
Data Members
attr_mask
unsigned int
This field is set to one or more of the following
symbols OR'd together to indicate which of the
remaining fields of the structure are set.
UF_LEGEND_INDEX_HEIGHT_ATTR
UF_LEGEND_INDEX_COLOR_ATTR
UF_LEGEND_INDEX_TEXT_ATTR
height_percent
int
The percentage of the legend area which the
index fills. The index is placed in the
middle of the legend unless there is a long
header in which case the index follows
directly after. default: 50%
color_attr
UF_SF_LEGEND_index_color_attr_t
The attributes of the color index
default: none specified
text_attr
UF_SF_LEGEND_index_text_attr_t
The attributes of the text index
If not specified, default labeling will be used
for the color index. default: none specified

------------

UF_SF - UF_SF_LEGEND_index_color_attr_s
UF_SF_LEGEND_index_color_attr_s
(view source)
Defined in: uf_sf_legend.h
Also known as:
UF_SF_LEGEND_index_color_attr_t
UF_SF_LEGEND_index_color_attr_p_t
Data Members
attr_mask
unsigned int
This field is set to one or more of the following
symbols OR'd together to indicate which of the
remaining fields of the structure are set.
UF_LEGEND_INDEX_COLOR_WIDTH_ATTR
UF_LEGEND_INDEX_COLOR_SMOOTH_ATTR
width_percent
int
The percentage of the legend area which the color
index fills. The index is always on the right side
default value: 30%
smooth_sw
logical
Switch indicating whether or not the color index
represents smooth continuous colors or
discrete color bands as follows:
= TRUE -> smooth color index (default)
= FALSE -> discrete color index.
num_values
int
Number of colors in index. Must be >= 2.
Mandatory if color index is specified
values
double *
Array[num_values] in size. Scalar value associated
as the starting value of each color in the index.
Memory should not be freed until legend is deleted.
Mandatory if color index is specified.

------------

UF_SF - UF_SF_LEGEND_index_text_attr_s
UF_SF_LEGEND_index_text_attr_s
(view source)
Defined in: uf_sf_legend.h
Also known as:
UF_SF_LEGEND_index_text_attr_t
UF_SF_LEGEND_index_text_attr_p_t
Data Members
attr_mask
unsigned int
This field is set to one or more of the following
symbols OR'd together to indicate which of the
remaining fields of the structure are set.
UF_LEGEND_INDEX_TEXT_JUSTIFY_ATTR
justify
UF_SF_LEGEND_text_justification_t
Justification of text in the legend
default: UF_LEGEND_RIGHT_JUSTIFIED_TEXT
num_titles
int
Number of title structures
titles
UF_SF_LEGEND_title_p_t *
Pointer to instances of title structures

------------

UF_SF - UF_SF_LEGEND_title_s
UF_SF_LEGEND_title_s
(view source)
Defined in: uf_sf_legend.h
Also known as:
UF_SF_LEGEND_title_t
UF_SF_LEGEND_title_p_t
Overview
Title structures are used for text so that multiple lines of text
can be defined for headers, footers, and user defined index text.
Data Members
num_strs
int
Number of strings in the title
strs
char * *
Array of strings

------------

UF_SF - UF_SF_material_fatigue_s
UF_SF_material_fatigue_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_material_fatigue_prop_t
UF_SF_material_fatigue_prop_p_t
Data Members
fatigue_strength_coef
UF_SF_multi_prop_t
fatigue_strength_exp
UF_SF_multi_prop_t
fatigue_ductility_coef
UF_SF_multi_prop_t
fatigue_ductility_exp
UF_SF_multi_prop_t

------------

UF_SF - UF_SF_material_formability_s
UF_SF_material_formability_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_material_formability_prop_t
UF_SF_material_formability_prop_p_t
Data Members
work_hardening
UF_SF_multi_prop_t
flc
UF_SF_multi_prop_t
stress_strain_curve
UF_SF_multi_prop_t

------------

UF_SF - UF_SF_material_strength_s
UF_SF_material_strength_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_material_strength_prop_t
UF_SF_material_strength_prop_p_t
Data Members
yield
UF_SF_multi_prop_t
ultimate_tensile
UF_SF_multi_prop_t

------------

UF_SF - UF_SF_mesh_elem_node_result_s
UF_SF_mesh_elem_node_result_s
(view source)
Defined in: uf_sf_disp_mesh.h
Also known as:
UF_SF_mesh_elem_node_result_t
UF_SF_mesh_elem_node_result_p_t
Overview
Structure defining element node results associated with a mesh.
Data Members
mesh_tag
tag_t
Tag of mesh object
num_elem
int
Number of elements in mesh
elem_ids
int *
Element ID array size of num_elem
elem_tags
tag_t *
Element tag array size of num_elem
num_nodes
int *
For each element, the number of nodes: num_nodes[elem_idx]
node_ids
int * *
Node IDs for each element: node_ids[elem_idx][node_idx]
node_tags
tag_t * *
Node tags for each element: node_tags[elem_idx][node_idx]
node_results
double * *
Node results for each element: node_results[elem_idx][node_idx]

------------

UF_SF - UF_SF_mesh_error_container_s
UF_SF_mesh_error_container_s
(view source)
Defined in: uf_sf_mshvld.h
Also known as:
UF_SF_mesh_error_container_t
UF_SF_mesh_error_container_p_t
Overview
This structure allows specification of mesh error containers.
Data Members
node_asso_error_list
UF_SF_mesh_error_list_t
The list of errors in node associativity group
elem_asso_error_list
UF_SF_mesh_error_list_t
The list of errors in elem associativity group
mesh_asso_error_list
UF_SF_mesh_error_list_t
The list of errors in mesh associativity group
mesh_recipe_error_list
UF_SF_mesh_error_list_t
The list of errors in mesh recipe group
geom_constraint_error_list
UF_SF_mesh_error_list_t
The list of errors in geometric constraint group
user_attribute_error_list
UF_SF_mesh_error_list_t
The list of errors in user attribute group

------------

UF_SF - UF_SF_mesh_error_list_s
UF_SF_mesh_error_list_s
(view source)
Defined in: uf_sf_mshvld.h
Also known as:
UF_SF_mesh_error_list_t
UF_SF_mesh_error_list_p_t
Overview
This structure allows specification of mesh error lists.
Data Members
num_mesh_errors
int
The number of mesh errors
mesh_errors
UF_SF_mesh_error_p_t
pointer to the array of mesh errors

------------

UF_SF - UF_SF_mesh_error_s
UF_SF_mesh_error_s
(view source)
Defined in: uf_sf_mshvld.h
Also known as:
UF_SF_mesh_error_t
UF_SF_mesh_error_p_t
Overview
This structure allows specification of mesh errors.
Data Members
err_object
tag_t
The tag of object with mesh errors
err_type
UF_SF_mesh_error_type_t

------------

UF_SF - UF_SF_mesh_visuals_s
UF_SF_mesh_visuals_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_mesh_visuals_t
UF_SF_mesh_visuals_p_t
Overview
Structure defining mesh visualization attributes.
Data Members
color
int
Primary element color
shade_mode
int
Different modes of shading:
0 - never shade
1 - shade when any shade mode is on
2 - shade when partial shaded mode is on
3 - shade when fully shaded mode is on
shade_edge_color
int
Element edge color when shaded
shrink_factor
int
Element shrink percentage 0 -> 100
0 - no shrinking
100 - shrinks elements to a point
normals
int
Valid for 2D elements
0 - no element normals
1 - element directional tails
2 - element vectors
normals_color
int
Normal display color
edge_visibility_sw
int
Element edge visibility switch:
0 - do not show elemement edges
1 - show element edges
text_display_sw
int
Element text display switch:
0 - do not show text
1 - show text
thick_shell_sw
int
Element thick shell display switch:
0 - do not show 2D elements as thick shells
1 - show 2D elements as thick shells
show_analysis
int
Show analysis results or not
0 - do not show analysis results
1 - show analysis results
show_deformed
int
Show deformation or not .
0 - do not show deformed results
1 - show deformed results
deformed_scale
double
Scale value for the deformation magnitude
if show deformation is requested

------------

UF_SF - UF_SF_midsrf_user_parms_s
UF_SF_midsrf_user_parms_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_midsrf_user_parms_t
UF_SF_midsrf_user_parms_p_t
Overview
Structure defining the parameters of a user defined midsurface feature.
Data Members
solid_body
tag_t
Tag of the target solid body.
num_sheet_bodies
int
Number of sheet bodies.
sheet_bodies_a
tag_t *
Array of sheet body tags that will define the
midsurface of the selected target solid body.
The size of the array is num_sheet_bodies
thickness
double
Thickness value to be used at formatting time
whenever the automatic thickness extraction fails.
const_thickness
double
Constant thickness of all nodes of the midsurface.
If this is provided by the user then this is will be
the value used for all nodes at format time in which
case the value of the thickness field will be unused.
This field is not currently used.

------------

UF_SF - UF_SF_multi_prop_s
UF_SF_multi_prop_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_multi_prop_t
UF_SF_multi_prop_p_t
Data Members
type
UF_SF_multi_prop_type_t
Type of property, tabular or through
expression.
multi
UF_SF__multi_t
Union containing pointer to the table
and tag of the expression.
measure_type
UF_UNIT_MEASURE_TYPE_t
Type of measure - Eg. MEASURE_FORCE, MEASURE_MASS_DENSITY..etc
unit_type_tag
tag_t
Tag to pointer of unit type - Eg Newton, kg/m3 ..etc

------------

UF_SF - UF_SF_orientation_data_s
UF_SF_orientation_data_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_orientation_data_t
UF_SF_orientation_data_p_t
Data Members
face_tag
tag_t
tag of a solid face.
The y vector will be defined normal to this face.
If this is a NULL_TAG use origin, x_dir, and y_dir
to create csys and use it to define y orientation.
origin [ 3 ]
double
origin info
x_dir [ 3 ]
double
x direction vector
y_dir [ 3 ]
double
y direction vector

------------

UF_SF - UF_SF_post_clipping_data_s
UF_SF_post_clipping_data_s
(view source)
Defined in: uf_sf_post_datatypes.h
Also known as:
UF_SF_post_clipping_data_t
UF_SF_post_clipping_data_t_p
Data Members
clip_tgl_data
int
ghost_tgl_data
int
outline_tgl_data
int
auto_update_tgl_data
int
plane_type_data
int
clip_side_data
int
clip_value_data
double
clip_scale_data
int
clip_scale_curr_min
double
clip_scale_curr_max
double
scale_min
double
scale_max
double

------------

UF_SF - UF_SF_POST_def_disp_s
UF_SF_POST_def_disp_s
(view source)
Defined in: uf_sf_post_datatypes.h
Also known as:
UF_SF_POST_def_disp_t
UF_SF_POST_def_disp_t_p
Overview
Structure defining the parameters to display a deformed model
Data Members
edge_style
UF_SF_POST_elem_edge_style_t
Element edge rendering
edge_color
UF_SF_POST_hue_colors_t
Element edge color
face_style
UF_SF_POST_elem_face_style_t
Element face rendering
face_color
UF_SF_POST_hue_colors_t
Element edge color
elem_disp
UF_SF_POST_elem_display_t
Element display
display_marker
UF_SF_POST_display_marker_t
Marker display
def_sw
logical
whether to display as def
undef_sw
logical
whether to display undef fem
num_vgrid
int
number of vgrid in p model
undef_data
UF_SF_POST_undef_disp_t
undeformed data structure
mesh_disp_flag
logical
mesh_group_count
int
mesh_count
int *
mesh_tags
tag_t * *
mesh_disp
int * *
mesh_post_id
int * *

------------

UF_SF - UF_SF_POST_def_s
UF_SF_POST_def_s
(view source)
Defined in: uf_sf_post_datatypes.h
Also known as:
UF_SF_POST_def_t
UF_SF_POST_def_t_p
Overview
Structure defining the parameters for deformed model scaling
Data Members
dsn [ UF_SF_POST_DSN_NM_BUFSIZE ]
char
FOCUS result dataset name
rel_sw
logical
Show relative deformations
rel_percentage
double
relative def model percent
true_multiplier
double
true deformation scaling

------------

UF_SF - UF_SF_post_deform_result_s
UF_SF_post_deform_result_s
(view source)
Defined in: uf_sf_post_datatypes.h
Also known as:
UF_SF_post_deform_result_t
UF_SF_post_deform_result_t_p
Data Members
loadcase
int
iteration
int
res_type
UF_SF_POST_result_type_t
scaling_choice
int
undef_toggle
int
scaling_value
double

------------

UF_SF - UF_SF_POST_fringe_s
UF_SF_POST_fringe_s
(view source)
Defined in: uf_sf_post_datatypes.h
Also known as:
UF_SF_POST_fringe_t
UF_SF_POST_fringe_t_p
Overview
Structure defining the parameters of a fringe request.
Data Members
style
UF_SF_POST_fringe_style_t
Selected fringe style.
spec
UF_SF_POST_fringe_color_spec_t
Selected fringe color spec.
fringe_scale
UF_SF_POST_fringe_scale_spec_t
Scale method option
Auto/Linear/Log Scales
whole_sw
logical
TRUE - calculate fringe
thresholds using whole
model, otherwise use only
the displayed model
threshold_max
double
Maximum color index value
threshold_min
double
Minimum color index value
colors_used
int
number of colors used
trans_sw
logical
Fringe translucency switch
legend
UF_SF_POST_fringe_legend_opt_t
Selected fringe legend style
structures items are
thresh_sw
logical

------------

UF_SF - UF_SF_POST_ident_parms_s
UF_SF_POST_ident_parms_s
(view source)
Defined in: uf_sf_post_datatypes.h
Also known as:
UF_SF_POST_ident_parms_t
UF_SF_POST_ident_parms_t_p
Overview
Soma end
Data Members
action
UF_SF_POST_ident_action_t
number
int
id_string
char *
List_all_Comp_sw
logical

------------

UF_SF - UF_SF_POST_mark_vec_comp_s
UF_SF_POST_mark_vec_comp_s
(view source)
Defined in: uf_sf_post_datatypes.h
Also known as:
UF_SF_POST_mark_vec_comp_t
UF_SF_POST_mark_vec_comp_t_p
Data Members
x_sw
int
y_sw
int
z_sw
int
mag_sw
int

------------

UF_SF - UF_SF_POST_result_parms_s
UF_SF_POST_result_parms_s
(view source)
Defined in: uf_sf_post_datatypes.h
Also known as:
UF_SF_POST_result_parms_t
UF_SF_POST_result_parms_t_p
Overview
Structure defining the parameters of a results request.
Data Members
abs_sw
int
avg_sw
int
lcase
int
iter
int
scale
double
coords
UF_SF_POST_coord_sys_type_t
res_type
UF_SF_POST_result_type_t
comp
UF_SF_POST_result_comp_t
units_tag
tag_t
vcomp
UF_SF_POST_mark_vec_comp_t
tensor_cube_sw
int
elem_value
UF_SF_POST_elem_value_t
eval_sw
int

------------

UF_SF - UF_SF_POST_result_type_s
UF_SF_POST_result_type_s
(view source)
Defined in: uf_sf_post_datatypes.h
Also known as:
UF_SF_POST_result_type_t
UF_SF_POST_result_type_p_t
Data Members
quan
UF_SF_POST_result_type_quan_t
lay
UF_SF_POST_result_type_lay_t
loc
UF_SF_POST_result_type_loc_t

------------

UF_SF - UF_SF_POST_template_data_s
UF_SF_POST_template_data_s
(view source)
Defined in: uf_sf_post_datatypes.h
Also known as:
UF_SF_POST_template_data_t
UF_SF_POST_template_data_t_p
Data Members
post_view_id
int
filename_text_data [ MAX_FSPEC_BUFSIZE ]
char
icon_toggle
int
name_text_data [ UF_CFI_MAX_FILE_NAME_BUFSIZE ]
char
is_default
int

------------

UF_SF - UF_SF_POST_undef_disp_s
UF_SF_POST_undef_disp_s
(view source)
Defined in: uf_sf_post_datatypes.h
Also known as:
UF_SF_POST_undef_disp_t
UF_SF_POST_undef_disp_t_p
Overview
Structure defining the parameters to display an undeformed model
Data Members
edge_style
UF_SF_POST_elem_edge_style_t
Element edge rendering
edge_color
UF_SF_POST_hue_colors_t
Element edge color
face_style
UF_SF_POST_elem_face_style_t
Element face rendering
face_color
UF_SF_POST_hue_colors_t
Element edge color

------------

UF_SF - UF_SF_resulting_face_pairs_s
UF_SF_resulting_face_pairs_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_resulting_face_pairs_t
UF_SF_resulting_face_pairs_p_t
Data Members
face1
tag_t
face2
tag_t
relative_status
UF_SF_face_subdiv_status_t

------------

UF_SF - UF_SF_section_data_s
UF_SF_section_data_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_section_data_t
UF_SF_section_data_p_t
Overview
This Structure contains the data required to define/describe
a beam/bar section.  Sections are define in the YZ plane.
Data Members
type
UF_SF_section_type_t
indicates the type of section described,
UF_SF_SECTION_TWREC = Thin wall, rectangle
UF_SF_SECTION_TWCYL = Thin wall, cylinder
UF_SF_SECTION_TWCHA = Thin wall, channel
UF_SF_SECTION_TWHAT = Thin wall, hat
UF_SF_SECTION_TWIBE = Thin wall, I beam
UF_SF_SECTION_SOCYL = Solid, cylinder
UF_SF_SECTION_SOREC = Solid, rectangle
UF_SF_SECTION_KEYIN = User defined
UF_SF_SECTION_USER_TW
= User Defined TW
UF_SF_SECTION_USER_SOLID
= User Defined Solid
origin [ 3 ]
double
Location of section origin
x_dir [ 3 ]
double
Orientation of sections x directions (along elm)
y_dir [ 3 ]
double
Orientation of sections y directions
z_dir = x_dir X y_dir
offset_set [ 3 ]
logical
Indicates if the coresponding offset was
set (TRUE) or was given the default (FALSE).
[0] == x offset of section, always = FALSE
offset [ 3 ]
double
(y,z) offset of section
[0] == x offset of section, always = 0.0
geometry
tag_t
Tag of geometry on which section is defined
(i.e the curve tag along which beams are defined
in the case where elements are created between
geometry "geometry" will be the mesh_recipe.
exp_tag [ UF_SF__MAX_EXP_TAGS ]
tag_t
An array of tags to Expression
defining the sections dimension or
section properties depending on
the type of section

------------

UF_SF - UF_SF_section_prop_list_s
UF_SF_section_prop_list_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_section_prop_list_t
UF_SF_section_prop_list_p_t
Data Members
section_type
int
Type of section:
UF_SF_SECTION_TWREC for Thin wall, rectangle
UF_SF_SECTION_TWCYL for Thin wall, cylinder
UF_SF_SECTION_TWCHA for Thin wall, channel
UF_SF_SECTION_TWHAT for Thin wall, hat
UF_SF_SECTION_TWIBE for Thin wall, I beam
UF_SF_SECTION_SOCYL for Solid, cylinder
UF_SF_SECTION_SOREC for Solid, rectangle
UF_SF_SECTION_KEYIN for User defined.
UF_SF_SECTION_USER_TW forUser Defined TW
UF_SF_SECTION_USER_SOLID for User Defined Solid
bcenter
double
Breadth of section.
hcenter
double
Height of section.
thicknesst
double
Thickness of section.
b1center
double
Flange breadth of hat & ibeam sections.
thicknesstw
double
Web thickness of ibeam section.
radius
double
Radius of TWCYL and SOCYL sections.
area
double
Area of section.
Izz
double
Moment of Inertia about x-axis.
Iyy
double
Moment of Inertia about y-axis.
Izy
double
Moment of Inertia about xy-axis.
torsion
double
Torsional coefficient.
warp
double
Warping coefficient.
y_eccentricity
double
Y Eccentricity.
z_eccentricity
double
Z Eccentricity.
hydro_diameter
double
Hydraulic Diameter of section.
perimeter
double
Perimeter of section.
wall_thickness
double
Wall Thickness of section.

------------

UF_SF - UF_SF_section_properties_s
UF_SF_section_properties_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_section_properties_t
UF_SF_section_properties_p_t
Overview
General properties of 1D Element Sections.
First are the numeric values, followed by corresponding expressions
tags, when any property has an expression.
If there is no expression, then the tag is NULL_TAG.
Data Members
section_type
int
Type of section:
UF_SF_SECTION_TWREC for Thin wall, rectangle
UF_SF_SECTION_TWCYL for Thin wall, cylinder
UF_SF_SECTION_TWCHA for Thin wall, channel
UF_SF_SECTION_TWHAT for Thin wall, hat
UF_SF_SECTION_TWIBE for Thin wall, I beam
UF_SF_SECTION_SOCYL for Solid, cylinder
UF_SF_SECTION_SOREC for Solid, rectangle
UF_SF_SECTION_KEYIN for User defined.
UF_SF_SECTION_USER_TW forUser Defined TW
UF_SF_SECTION_USER_SOLID for User Defined Solid
bcenter
double
Breadth of section.
hcenter
double
Height of section.
thicknesst
double
Thickness of section.
b1center
double
Flange breadth of hat & ibeam sections.
thicknesstw
double
Web thickness of ibeam section.
radius
double
Radius of TWCYL and SOCYL sections.
area
double
Area of section.
Izz
double
Moment of Inertia about x-axis.
Iyy
double
Moment of Inertia about y-axis.
Izy
double
Moment of Inertia about xy-axis.
torsion
double
Torsional coefficient.
warp
double
Warping coefficient.
y_eccentricity
double
Y Eccenctricity
z_eccentricity
double
Z Eccenctricity
hydro_diameter
double
Hydraulic Diameter of section.
perimeter
double
Perimeter of section.
wall_thickness
double
Wall Thickness of section.
bcenter_exp
tag_t
Breadth of section.
hcenter_exp
tag_t
Height of section.
thicknesst_exp
tag_t
Thickness of section.
b1center_exp
tag_t
Flange breadth of hat & ibeam sections.
thicknesstw_exp
tag_t
Web thickness of ibeam section.
radius_exp
tag_t
Radius of TWCYL and SOCYL sections.
area_exp
tag_t
Area of section.
Izz_exp
tag_t
Moment of Inertia about x-axis.
Iyy_exp
tag_t
Moment of Inertia about y-axis.
Izy_exp
tag_t
Moment of Inertia about xy-axis.
torsion_exp
tag_t
Torsional coefficient.
warp_exp
tag_t
Warping coefficient.
y_eccentricity_exp
tag_t
Y Eccentricity
z_eccentricity_exp
tag_t
Z Eccentricity
hydro_diameter_exp
tag_t
Hydraulic Diameter of section.
perimeter_exp
tag_t
Perimeter of section.
wall_thickness_exp
tag_t
Wall Thickness of section.
sketch_tag
tag_t
For user defined thin wall.
face_tag
tag_t
For user defined solid.
vector_tag
tag_t
For user defined solid horizonal direction.

------------

UF_SF - UF_SF_section_src_list_s
UF_SF_section_src_list_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_section_src_list_t
UF_SF_section_src_list_p_t
Data Members
C1
double
Y location of the first stress recovery point.
C2
double
Z location of the first stress recovery point.
D1
double
Y location of the second stress recovery point.
D2
double
Z location of the second stress recovery point.
E1
double
Y location of the third stress recovery point.
E2
double
Z location of the third stress recovery point.
F1
double
Y location of the fourth stress recovery point.
F2
double
Z location of the fourth stress recovery point.

------------

UF_SF - UF_SF_section_src_properties_s
UF_SF_section_src_properties_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_section_src_properties_t
UF_SF_section_src_properties_p_t
Overview
Stress recovery locations of 1D Element Sections.
First are the numeric values, followed by corresponding expressions
tags, when any location has an expression.
If there is no expression, then the tag is NULL_TAG.
Data Members
C1
double
Y location of the first stress recovery point.
C2
double
Z location of the first stress recovery point.
D1
double
Y location of the second stress recovery point.
D2
double
Z location of the second stress recovery point.
E1
double
Y location of the third stress recovery point.
E2
double
Z location of the third stress recovery point.
F1
double
Y location of the fourth stress recovery point.
F2
double
Z location of the fourth stress recovery point.
C1_exp
tag_t
Y location of the first stress recovery point.
C2_exp
tag_t
Z location of the first stress recovery point.
D1_exp
tag_t
Y location of the second stress recovery point.
D2_exp
tag_t
Z location of the second stress recovery point.
E1_exp
tag_t
Y location of the third stress recovery point.
E2_exp
tag_t
Z location of the third stress recovery point.
F1_exp
tag_t
Y location of the fourth stress recovery point.
F2_exp
tag_t
Z location of the fourth stress recovery point.

------------

UF_SF - UF_SF_sfqm_mesh_data_s
UF_SF_sfqm_mesh_data_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_sfqm_mesh_data_t
UF_SF_sfqm_mesh_data_p_t
Data Members
elem_type
UF_SF_sfqm_elem_type_t
The type of element chosen.
elem_size
double
The size of the element.
smart_edge_seeding
int
mesh_param_data_p
UF_SF_sfqm_param_data_p_t
Pointer to the mesh
parameter data structure, containing
the values for the given parameters.
format_mesh
int
0 = OFF , 1 = ON
mapped_mesh
int
0 = OFF , 1 = ON
mesh_transition
int
0 = OFF , 1 = ON
mesh_method
int
0 = Automatic, 1 = Paver

------------

UF_SF - UF_SF_sfqm_param_data_s
UF_SF_sfqm_param_data_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_sfqm_param_data_t
UF_SF_sfqm_param_data_p_t
Data Members
edge_match_tol
double
Distance tolerance value used to find the
matched edges. The distance is measured from
the mid point location of one edge to the mid
point of the other edge. The default value
is 0.02.
node_uniq_tol
double
Specifies the maximum distance allowed between
nodes before they are merged when uniqueness
testing is active. The default is 0.0001.
smooth_tol
double
Distance in model units from old position to
new position for the node moved the farthest
during one iteration of the smoothing
algorithm. The default value is 0.01.
on_surf_tol
double
Controls the maximum distance in model units
that a node created during Scenario Shell
Mesher may lie from its closest point on the
surface. The default value is 0.001.
trans_rows
int
Allows to control the number of rows that will
be used to bridge the gap between elements of
different sizes. The default value is 3.

------------

UF_SF - UF_SF_SURFACE_CONTACT_ANS_data_s
UF_SF_SURFACE_CONTACT_ANS_data_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_SURFACE_CONTACT_ANS_data_t
UF_SF_SURFACE_CONTACT_ANS_data_p_t
Data Members
closed_stiff_opt
int
closed stiffness option
closed_stiff
double
closed stiffness
open_stiff_opt
int
open stiffness option
open_stiff
double
open stiffness
init_closure_opt
int
initial closure option
init_closure
double
initial closure
norm_toler_opt
int
normal tolerance option
norm_toler
double
normal tolerance
surf_cont_offset
double
surface contact offset
mu
double
Coefficient of friction
cont_type
int
Contact type Standard,Rough

------------

UF_SF - UF_SF_SURFACE_CONTACT_NAS_data_s
UF_SF_SURFACE_CONTACT_NAS_data_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_SURFACE_CONTACT_NAS_data_t
UF_SF_SURFACE_CONTACT_NAS_data_p_t
Data Members
pre_load
double
pre load
closed_stiff
double
closed stiffness
open_stiff
double
open stiffness
kinetic_fric
double
kenetic friction coefficient
static_fric
double
static friction coefficient
max_pen
double
maximum peneration
cont_type
int
Contact type - Standard,Rough

------------

UF_SF - UF_SF_SURFACE_CONTACT_UGFEA_data_s
UF_SF_SURFACE_CONTACT_UGFEA_data_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_SURFACE_CONTACT_UGFEA_data_t
UF_SF_SURFACE_CONTACT_UGFEA_data_p_t
Data Members
pre_load
double
closed_stiff
double
open_stiff
double
kinetic_fric
double
static_fric
double
max_pen
double
cont_type
int

------------

UF_SF - UF_SF_table_prop_s
UF_SF_table_prop_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_table_prop_t
UF_SF_table_prop_p_t
Data Members
size
int
The number of pairs in the table.
array_ptr
UF_SF_table_p_t
Pointer to the table that has
the data.

------------

UF_SF - UF_SF_THRESHOLD_data_s
UF_SF_THRESHOLD_data_s
(view source)
Defined in: uf_sf_model_checker.h
Also known as:
UF_SF_THRESHOLD_data_t
UF_SF_THRESHOLD_data_p_t
Overview
Structure for element shape threshold
Data Members
shape_option_data
int
previous_shape_data
int
aspect_toggle_data
int
aspect_real_data
double
warp_toggle_data
int
warp_real_data
double
skew_toggle_data
int
skew_real_data
double
taper_toggle_data
int
taper_real_data
double
jacobian_toggle_data
int
jacobian_real_data
double
jacobian_zero_toggle_data
int
jacobian_zero_real_data
double
minmax_angle_toggle_data
int
minimum_angle_real_data
double
maximum_angle_real_data
double
tet_collapse_toggle_data
int
tet_collapse_real_data
double
solver_name [ MAX_FSPEC_BUFSIZE ]
char
SFOM_LANG_MSC_NASTRAN_NAME
SFOM_LANG_NX_NASTRAN_NAME
SFOM_LANG_DES_NASTRAN_NAME
SFOM_LANG_ANSYS_NAME
SFOM_LANG_ABAQUS_NAME
SFOM_LANG_TMG_NAME
add when we have more

------------

UF_SF - UF_SF_ugs_2d_mesh_parms_s
UF_SF_ugs_2d_mesh_parms_s
(view source)
Defined in: uf_sf_ugs_mesh.h
Also known as:
UF_SF_ugs_2d_mesh_parms_t
UF_SF_ugs_2d_mesh_parms_p_t
Overview
Structure :- UF_SF_ugs_2d_mesh_parms_s
This structure allows specification of 2d shell meshing parameters.
Initialization :- This structure can be initialized with the
UF_SF_ugs_2d_mesh_parms_INIT macro.
Data Members
element_type
UF_SF_ugs_2d_mesher_elem_type_t
Desired element type.
element_size
double
Desired element size. If
zero or negative, then mesher
will choose element size
internally.
edge_match_toggle
int
Edge merge toggle 0 or 1
edge_match_tolerance
double
edge matching tolerance.
suppress_hole_toggle
int
Suppress Hole toggle 0 or 1
suppress_hole_diameter_value
double
Suppress Hole Diameter value.
suppress_hole_point_type
int
0- NONE, 1-POINT, 2-MESHPOINT
target_minimum_element_edge_length
int
Target Minimum Element Edge Length toggle 0 or 1
format_mesh
int
TRUE if 2d mesh is a shell
mesh that should be formatted
to the solver. FALSE if 2d
mesh is a seed mesh and not to
be formated out to solver.
attempt_quad_mapping
int
TRUE if map mesher should be
tried on faces for quad meshes
or if free mesher should be
called regardless of face
shape.
quad_only_option
int
Applies only when attempt_quad_mapping=FALSE
Values are:
0 => Allow triangles OFF.
1 => Allow triangles ON & 0 Triangle
2 => Allow triangles ON & 1 Triangle
If attempt_quad_mapping==TRUE does not
apply.
split_poor_quads
int
TRUE if poorly shaped quads
should be split into
triangles.
FALSE if quads should be kept
regardless of quality.
maximum_quad_warp
double
if split_poor_quads == TRUE,
this is the warp quality
threshold. Any quad with
greater warp than this will
be split.
midnode_option
UF_SF_ugs_mesher_midnode_option_t
Whether to project midnodes
or not.
geometry_tolerance_toggle
int
Geometry Tolerance for midnode straightening
geometry_tolerance_value
double
Geometry Tolerance value for midnode straightening
maximum_midnode_jacobian
double
If midnode_option =
UF_SF_UGS_MESHER_mixed_midnodes,
any element with a jacobian
value higher than
maximum_midnode_jacobian will
have its midnodes
straightened.
minimum_face_angle
double
Minimum angle at corner of a
face that can support element.
corners smaller than this will
be pinched out. This angle is
measured in degrees.
surf_mesh_size_variation
int
This controls how much variation
in element size is
desired/permitted in the mesh on
the surface of the bodies being
meshed. Valid values go from 0
to 100. This number does not
coorespond directly to any
actual meshing parameter, but
rather is a relative scale that
the user can use to indicate
their tolerance for mesh
variation. It is used
internally in the mesher to
calculate expansion factors and
a minimum element size. 0
means that there will be
minimumal element size
variation. 100 means that there
will be maximum element size
variation.
small_feature
double
% of element length for abstraction
edge_merge_toggle
int
Edge merge toggle 0 or 1
edge_angle
double
Edge merge angle
mesh_transition
int
Mesh transition 0=OFF,1=ON
multi_block_decomposition
int
Attempt MultiBlock Decomposition 0=OFF,1=ON
mesh_individual_faces
int
Mesh Individual Faces 0=OFF,1=ON
CAD_curvature_abstraction
int
CAD Curvature Abstraction 0=OFF,1=ON
minimum_feature_length
double
Desired element size. If
zero or negative, then mesher
will choose element size
internally.
mesh_method
int
0 - Automatic, 1 - Paver
fillet_toggle
int
true => Filler detection ON
false=> Fillet detection OFF
fillet_type
UF_SF_ugs_abstraction_fillet_type_option_t
Used only if fillet_toggle == true
Fillet type
fillet_num_elem
int
No of elements on a quarter arc of fillet
fillet_min_rad
double
Min radius
fillet_max_rad
double
Max radius
max_included_angle_quad_toggle
int
Max Angle for quad Toggle state
min_included_angle_quad_toggle
int
Min Angle for quad Toggle state
max_included_angle_tria_toggle
int
Max Angle for tria Toggle state
min_included_angle_tria_toggle
int
Min Angle for tria Toggle state
max_included_angle_quad_value
double
Max Angle for quad value
min_included_angle_quad_value
double
Min Angle for quad value
max_included_angle_tria_value
double
Max Angle for tria value
min_included_angle_tria_value
double
Min Angle for tria value
move_nodes_off_geometry
int
Move Nodes Off Geometry
max_warp_toggle
int

------------

UF_SF - UF_SF_ugs_mesh_abstraction_params_s
UF_SF_ugs_mesh_abstraction_params_s
(view source)
Defined in: uf_sf_ugs_mesh.h
Also known as:
UF_SF_ugs_mesh_abstraction_params_t
UF_SF_ugs_mesh_abstraction_params_p_t
Overview
================================================================
Parameter settings for tet mesh with abstraction control
================================================================
Data Members
small_feature
double
% of element length for abstraction
edge_merge_toggle
int
Edge merge toggle 0 or 1
edge_angle
double
Edge merge angle
fillet_toggle
int
true => Filler detection ON
false=> Fillet detection OFF
fillet_type
UF_SF_ugs_abstraction_fillet_type_option_t
Used only if fillet_toggle == true
Fillet type
fillet_num_elem
int
No of elements on a quarter arc of fillet
fillet_min_rad
double
Min radius
fillet_max_rad
double
Max radius

------------

UF_SF - UF_SF_ugs_solid_from_shell_mesh_parms_s
UF_SF_ugs_solid_from_shell_mesh_parms_s
(view source)
Defined in: uf_sf_ugs_mesh.h
Also known as:
UF_SF_ugs_solid_from_shell_mesh_parms_t
UF_SF_ugs_solid_from_shell_mesh_parms_p_t
Overview
Structure :- UF_SF_ugs_solid_from_shell_mesh_parms_s
This structure allows specification of solid from shell meshing parameters.
Initialization :- This structure can be initialized with the
UF_SF_ugs_solid_from_shell_mesh_parms_INIT macro.
Data Members
midnodes
int
TRUE for tet10s,
FALSE for tet4s.
tet_mesh_size_variation
int
This controls whether the tets
are permitted to expand as you
progress into the interior of
the body. Valid values go from
0 to 100. 0 means that
element sizes must remain
relatively constant. 100 means
that the elements can expand
very rapidly.
fill_holes
int
TRUE if the interior holes
should be filled

------------

UF_SF - UF_SF_ugs_tet_mesh_parms_s
UF_SF_ugs_tet_mesh_parms_s
(view source)
Defined in: uf_sf_ugs_mesh.h
Also known as:
UF_SF_ugs_tet_mesh_parms_t
UF_SF_ugs_tet_mesh_parms_p_t
Overview
Structure :- UF_SF_ugs_tet_mesh_parms_s
This structure allows specification of tetrahedral meshing parameters.
Initialization :- This structure can be initialized with the
UF_SF_ugs_tet_mesh_parms_INIT macro.
Data Members
element_type
UF_SF_element_type_t
Desired element type.
midnodes
int
TRUE for tet10s,
FALSE for tet4s.
element_size
double
Desired element size. If
zero or negative, then mesher
will choose element size
internally.
midnode_option
UF_SF_ugs_mesher_midnode_option_t
Whether to project midnodes or not.
geometry_tolerance_toggle
int
Geometry Tolerance for midnode straightening
geometry_tolerance_value
double
Geometry Tolerance value for midnode straightening
maximum_midnode_jacobian
double
If midnode_option =
UF_SF_UGS_MESHER_mixed_midnodes,
any element with a jacobian
value higher than
maximum_midnode_jacobian will
have its midnodes
straightened.
minimum_face_angle
double
Minimum angle at corner of a
face that can support element.
corners smaller than this will
be pinched out. This angle is
measured in degrees.
surf_mesh_size_variation
int
This controls how much variation
in element size is
desired/permitted in the mesh on
the surface of the bodies being
meshed. Valid values go from 0
to 100. This number does not
coorespond directly to any
actual meshing parameter, but
rather is a relative scale that
the user can use to indicate
their tolerance for mesh
variation. It is used
internally in the mesher to
calculate expansion factors and
a minimum element size. 0
means that there will be
minimumal element size
variation. 100 means that there
will be maximum element size
variation.
tet_mesh_size_variation
int
This controls whether the tets
are permitted to expand as you
progress into the interior of
the body. Valid values go from
0 to 100. 0 means that
element sizes must remain
relatively constant. 100 means
that the elements can expand
very rapidly.
multi_block_decomposition
int
Attempt MultiBlock Decomposition 0=OFF,1=ON
mesh_transition
int
Mesh transition 0=OFF,1=ON
remesh_toggle
int
Avoid failing elements by reducing element size
0=OFF,1=ON
create_pyramids
int
Create pyramid transition elements. Only for ANSYS
0=OFF,1=ON
small_feature
double
% of element length for abstraction
attempt_mapped_meshing
int
two_element_through_thickness_toggle
int
auto_fix_failed_elements_toggle
int
edge_merge_toggle
int
Edge merge toggle 0 or 1
edge_angle
double
Edge merge angle
fillet_toggle
int
true => Filler detection ON
false=> Fillet detection OFF
fillet_type
UF_SF_ugs_tet_mesh_fillet_type_option_t
Used only if fillet_toggle == true
Fillet type
fillet_num_elem
int
No of elements on a quarter arc of fillet
fillet_min_rad
double
Min radius
fillet_max_rad
double

------------

UF_SF - UF_SF_user_defined_section_properties_s
UF_SF_user_defined_section_properties_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SF_user_defined_section_properties_t
UF_SF_user_defined_section_properties_p_t
Overview
Properties unique to user defined sections which are
not passed to the FEA solver. These are user feedback
only.
Data Members
principal_angle
double
Principal angle in degrees.
principal_mom_inertia [ 2 ]
double
Principal Moment of Inertia.
centroid [ 2 ]
double
Centroid location in global coordinates.
shear_center [ 2 ]
double
Shear center in global coordinates.

------------

UF_SF - UF_SFANS_solver_data_s
UF_SFANS_solver_data_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SFANS_solver_data_t
UF_SFANS_solver_data_p_t
Data Members
formatChoice
int
algoChoice
int
num_roots
int
upper_limit
double
lower_limit
double
temperature
double

------------

UF_SF - UF_SFAS_solver_data_s
UF_SFAS_solver_data_s
(view source)
Defined in: uf_sf_types.h
Also known as:
UF_SFAS_solver_data_t
UF_SFAS_solver_data_p_t
Data Members
algolChoice
int
typeChoice
int
codeChoice
int
echoChoice
int
num_roots
int
densityChoice
int
formatChoice
int
job_time
int
temperature
double
temperature_unit_tag
tag_t
upper_limit
double
max_iter
int
err_tol_percent
double
min_pvalue
int
max_pvalue
int
lower_limit
double
sol_tol_val
double
jobname [ MAX_FSPEC_BUFSIZE ]
char
titlestring [ MAX_FSPEC_BUFSIZE ]
char
scratch_path [ MAX_FSPEC_BUFSIZE ]
char
memory_requested
int
num_design_cycles
int
frequency_mode_number
int
optimizationChoice
int
AdaptOpt
int
Added to handle Opt in Adaptivity
OptTypeChoice
int
solver_types [ (int)UF_MAX_NUM_SOLVER_TYPES ]
UF_SFOPT_solver_type_t
reset_node_elm_id_Choice
int
save_after_reset_Choice
int
prt_displacements
int
prt_stresses
int
prt_strains
int
prt_strain_energies
int
prt_elforces
int
prt_reactforces
int
prt_applied_loads
int
prt_fluxes
int
prt_temps
int
plate_stiffness
double
inrelChoice
int
inrel_support_node_id [ 3 ]
int
intout_flag
SFNAS_inter_output_types_t
componentChoice
int
nl_ninc
int
adaptChoice
int
adapt_max_itr
int
adapt_per_error
double
adapt_dev_error
double
adapt_elem_size
double
PrintOutputLevel
int
start_elem_id
int
start_node_id
int
largeDispChoice
int
thermstruct
logical
Flag set to indicate whether thermostruct env.. this is needed since during solution time
the env will be changed to structures and then to thermal
modeChoice
int
fatigueChoice
int
fatigue_analysis
int
fatigue_stress_crit
int
fatigue_stress_type
int
fatigue_fatigue_crit
int
fatigue_cycles
int
fatigue_k_factor
double
fatigue_life_crit
int

------------

UF_SKET - UF_SKET_con_geom_s
UF_SKET_con_geom_s
(view source)
Defined in: uf_sket_types.h
Also known as:
UF_SKET_con_geom_t
UF_SKET_con_geom_p_t
Data Members
geom_tag
tag_t
The geomtry's tag
vertex_type
UF_SKET_geom_vertex_t
Vertex type if it is the vertex
of the geometry that will be
constrained.
Valid types are specified in
UF_SKET_geom_vertex_t.
vertex_index
int
Starting from 1. Used to
indicate which defining point
of the spline will be constrained.
Only used when vertex_type is
UF_SKET_spline_defining_point.
use_help
UF_SKET_help_type_t
Whether to use help data (either
help points or help parameter.)
Valid types as specified in
UF_SKET_help_type_t. Help
points/parameters are used to
indicate whereabouts on the geometry
a constraint should apply to. They
are only needed when the constraints
are of type UF_SKET_tangent,
UF_SKET_point_on_curve, or
UF_SKET_point_on_string.
help_point [ 3 ]
double
Help point
help_parameter
double
Help parameter

------------

UF_SKET - UF_SKET_dim_object_s
UF_SKET_dim_object_s
(view source)
Defined in: uf_sket_types.h
Also known as:
UF_SKET_dim_object_t
UF_SKET_dim_object_p_t
Data Members
object_tag
tag_t
Tag of the object - sketch curves, edge,
datum plane, datum axis, NX curves
object_assoc_type
UF_SKET_assoc_type_t
Object associativity type:
UF_SKET_end_point;
UF_SKET_arc_center -
object must be an arc;
UF_SKET_tangency -
object must be an arc;
UF_SKET_curve_point -
object must be a spline
UF_SKET_anchor_point -
object must be a sketch conic
object_assoc_mod_value
int
Object associativity modifier:
UF_SKET_first_end_point or UF_SKET_last_end_point
if object_assoc_type = UF_SKET_end_point;
Not Used
if object_assoc_type = UF_SKET_arc_center or
UF_SKET_anchor_point;
parameter percentage (0 - 100) (used to find approx tgt pt)
if object_assoc_type = UF_SKET_tangency;
the index number of the defining point of the spline(starting from 1)
if object_assoc_type = UF_SKET_curve_point;

------------

UF_SKET - UF_SKET_info_s
UF_SKET_info_s
(view source)
Defined in: uf_sket_types.h
Also known as:
UF_SKET_info_t
UF_SKET_info_p_t
Data Members
subtype
int
UF_v9_sketch_subtype, UF_v13_sketch_subtype or
UF_extracted_sketch_subtype
name [ UF_OBJ_NAME_BUFSIZE ]
char
sketch's name
csys_tag
tag_t
sketch's CSYS tag
csys [ 12 ]
double
sketch's CSYS :
sketch_csys[0-8] : the orientation,
sketch_csys[9-11]: the origin
view_name [ 16 ]
char
sketch's view name (for pre-V13 sketches only)
datum_tag
tag_t
sketch's datum tag (for pre-V13 sketches only)
datum [ 3 ]
double
sketch's datum (for pre-V13 sketches only)

------------

UF_SMD - UF_SMD_chk_std_results_s
UF_SMD_chk_std_results_s
(view source)
Defined in: uf_smd.h
Also known as:
UF_SMD_chk_std_results_t
UF_SMD_chk_std_results_p_t
Overview
Output from chk_std
Data Members
num_objects
int
results
char * *
Array of results strings

------------

UF_SMD - UF_SMD_fp_prefs_s
UF_SMD_fp_prefs_s
(view source)
Defined in: uf_smd.h
Also known as:
UF_SMD_fp_prefs_t
UF_SMD_fp_prefs_p_t
Overview
Data structure for Flat Pattern Preferences
Data Members
angle_tol
double
The angle tolerance to use in
laying out the surfaces
chord_tol
double
The chordal tolerance to use in
mapping curves to the flat pattern
grid_size
double
Grid size
layer
int
Layer to place flat pattern on
distortion_constraint
int
Controls distortion face
mapping (Longest edge /
Shortest edge)
fp_orientation
int
Enumerated type defining where to
create the flat pattern
curve_set
int
Enumerated type defining which
curves are used to generate a Flat
Pattern.
tangent_lines
logical
Bend Tangent lines created on
theFlat Pattern (TRUE/FALSE).
center_lines
logical
Bend Center lines created on the
Flat Pattern (TRUE/FALSE).
form_block_curves
logical
Form Block curves created on the
Flat Pattern (TRUE/FALSE).
contour_curves
logical
Contour curves created on the
Flat Pattern (TRUE/FALSE).
multiple_fp
logical
Allow multiple flat patterns
(TRUE/FALSE).
auto_update
logical
Enable auto flat pattern update
use_baf
logical
Use BAF when creating flat
pattern
name
char *
Default flat pattern name
fp_algorithm
int
Flat Pattern Creation algorithm

------------

UF_SMD - UF_SMD_gen_prefs_s
UF_SMD_gen_prefs_s
(view source)
Defined in: uf_smd.h
Also known as:
UF_SMD_gen_prefs_t
UF_SMD_gen_prefs_p_t
Overview
Data structure used to define the General Preferences for the SMD module.
Data Members
seq_labels
int
Display sequence labels on body
0 = Do not display the labels.
1 = Display the labels.
use_feat_stds
int
Use feature standards on dialogs (1/0)
chk_stds
int
Check standards on create (1/0)
default_baf
char *
Bend Allowance formula for the creation
of flat patterns & unformed bodies.
material
char *
Material type of the body.
thickness
char *
Material thickness of the body
line_color
int
Reference line color
enforce_cre_state
int
Enforce Creation State Editing
mat_margin
char *
Percentage by which bracket is made larger
use_bat
int
OBSOLETE. Use the TCL Bend Allowance Table procedure
found in ugsmd_def.std?
use_global_thickness
logical
Use Global thickness for feature
creation (True/ False)
thickness_type
int
Thickness type 0 - Infer the thickness
1 - Use Expression
use_global_radius
logical
Use global radius for feature
creation (True / False )
global_radius
char *
Global radius
radius_type
UF_SMD_radius_type_e_t
Radius type
UF_SMD_RADIUS_INSIDE
UF_SMD_RADIUS_OUTSIDE
use_global_angle
logical
Use global angle value for feature
creation (True / False)
global_angle
char *
Global angle value
angle_type
UF_SMD_angle_type_e_t
Angle type
UF_SMD_ANGLE_INCLUDED
UF_SMD_ANGLE_BEND
baf_option
UF_SMD_baf_options_e_t
Options for BAF
UF_SMD_BAF_USE_EXPRESSION
UF_SMD_BAF_USE_TCL
UF_SMD_BAF_USE_SPRDSHEET
use_global_baf
logical
Use global BAF for feature
creation (True / False )
forming_method
UF_SMD_forming_method_e_t
Forming method
UF_SMD_USE_SELF_FORMING_FEATURES,
UF_SMD_USE_FORMING_OPERATIONS
bat_radius_type
UF_SMD_bat_radius_type_e_t
Radius type
UF_SMD_BAT_RADIUS_INSIDE
UF_SMD_BAT_RADIUS_OUTSIDE
bat_angle_type
UF_SMD_bat_angle_type_e_t
Angle type
UF_SMD_BAT_ANGLE_INCLUDED
UF_SMD_BAT_ANGLE_BEND
pip_sequential
UF_SMD_pip_sequential_e_t
PIP sequential Processing
UF_SMD_NON_SEQUENTIAL_PROCESS,
UF_SMD_SEQUENTIAL_PROCESS

------------

UF_SMD - UF_SMD_parm_value_s
UF_SMD_parm_value_s
(view source)
Defined in: uf_smd.h
Also known as:
UF_SMD_parm_value_t
UF_SMD_parm_value_p_t
Overview
Data structure for UF_SMD_parm_value
Data Members
num_pairs
int
Number of parameter-value pairs
parm_names
char * *
Array of parameter names
parm_values
char * *
Array of parameter values

------------

UF_SMD - UF_SMD_pip_node_data_s
UF_SMD_pip_node_data_s
(view source)
Defined in: uf_smd.h
Also known as:
UF_SMD_pip_node_data_t
UF_SMD_pip_node_data_p_t
Overview
Data structure that stores data associated with a PIP node.
Data Members
node_type
UF_SMD_pip_type_enum_e_t
Type of PIP node
parent
tag_t
Parent node for current node
name [ MAX_LINE_BUFSIZE ]
char
Name of PIP node
feature_tag
tag_t
Feature for this PIP node
state_index
int
State index (used by
General Flange, SMBridge,
and Solid Punch features)
proc_ang
double
Process angle (used by
Flange and Inset Flange.
For Profile Flange, SMBend,
and Multibend Bracket
features, a value of zero
indicates unformed. A
non-zero value indicates
fully formed. )

------------

UF_SMD - UF_SMD_results_s
UF_SMD_results_s
(view source)
Defined in: uf_smd.h
Also known as:
UF_SMD_results_t
UF_SMD_results_p_t
Overview
Results structure
Data Members
result_type
int
Return type
note
char *
"note:" if present, otherwise ""
results
UF_SMD_results_union_t
Output from Tcl standards file

------------

UF_SMD - UF_SMD_single_value_s
UF_SMD_single_value_s
(view source)
Defined in: uf_smd.h
Also known as:
UF_SMD_single_value_t
UF_SMD_single_value_p_t
Overview
Data structure for UF_SMD_single_value and UF_SMD_error return types
Data Members
value
char *
Text string containing a single value

------------

UF_SMD - UF_SMD_value_list_s
UF_SMD_value_list_s
(view source)
Defined in: uf_smd.h
Also known as:
UF_SMD_value_list_t
UF_SMD_value_list_p_t
Overview
Data structure for UF_SMD_value_list and UF_SMD_variable_list
Data Members
num_strings
int
Number of strings
value_list
char * *
String Array of values

------------

UF_SO - UF_SO_dirr_on_surf_data_s
UF_SO_dirr_on_surf_data_s
(view source)
Defined in: uf_so.h
Also known as:
UF_SO_dirr_on_surf_data_t
UF_SO_dirr_on_surf_data_p_t
Overview
Structure definition for direction on surface data. It includes all the
input elements to create a smart direction on surface object.
The direction will be evaluated along isoparametric, normal or a specified
section direction at a pair of (u,v) parameters on the underlying surface of
a given face. Two scalar objects need to be created for the uv parameters.
If the section option is chosen, a direction object needs to be created for
specification. The direction will be projected to be perpendicular to the
surface normal at the given uv parameters. The projected direction will
underlie the output direction on surface object.
Data Members
face
tag_t
object id of the face which contains the evaluation
surface
uv [ 2 ]
tag_t
scalar object ids for the u and v parameters of the
surface
option
int
flag for evaluation option:
0 = u isoparametric
1 = v isoparametric
2 = surface normal
3 = section
secdir
tag_t
object id of the section direction
flip
logical
flag for direction reversal
0 = no
1 = yes

------------

UF_SO - UF_SO_offset_curve_cvtr_data_s
UF_SO_offset_curve_cvtr_data_s
(view source)
Defined in: uf_so.h
Also known as:
UF_SO_offset_curve_cvtr_data_t
UF_SO_offset_curve_cvtr_data_p_t
Overview
Structure definition for curvature on curve data. It includes all the input
elements to create a smart offset object with the curvature on curve method.
The curvature will be evaluated at a curve parameter. A scalar object needs
to be created for the parameter.
Note an offset object contains a vector of three components. For the
curvature on curve subobject, the curvature vector is identified by the
vector of the object. That is, the curvature value is represented by the
magnitude of the vector and the curvature direction (the normal direction
of the curve at that parameter) is represented by the direction of the
vector.
Data Members
curve
tag_t
object id of the curve or edge
t
tag_t
scalar object id for the curve parameter

------------

UF_SO - UF_SO_offset_surf_cvtr_data_s
UF_SO_offset_surf_cvtr_data_s
(view source)
Defined in: uf_so.h
Also known as:
UF_SO_offset_surf_cvtr_data_t
UF_SO_offset_surf_cvtr_data_p_t
Overview
Structure definition for curvature on surface data. It includes all the
input elements to create a smart offset object with the curvature on
surface method.
The curvature will be evaluated along an isoparametric direction or a
specified section direction at a pair of (u,v) parameters on the underlying
surface of a given face. Two scalar objects need to be created for the uv
parameters.
If the section option is chosen, a direction object needs to be created for
specification. This direction and the surface normal direction at the given
uv parameters define a section plane on which the surface curvature is
evaluated.
Note an offset object contains a vector of three components. For the
curvature on surface subobject, the curvature vector is identified by the
vector of the object. That is, the curvature value is represented by the
magnitude of the vector and the curvature direction (the normal direction
of the surface at the parameters) is represented by the direction of the
vector.
Data Members
face
tag_t
object id of the face which contains the evaluation
surface
uv [ 2 ]
tag_t
scalar object ids for the u and v parameters of the
surface
option
int
flag for evaluation option:
0 = u isoparametric
1 = v isoparametric
2 = section
secdir
tag_t
object id of the section direction

------------

UF_SO - UF_SO_spline_data_s
UF_SO_spline_data_s
(view source)
Defined in: uf_so.h
Also known as:
UF_SO_spline_data_t
UF_SO_spline_data_p_t
Overview
Structure definition for general spline data. It includes all the input
elements to create a general smart spline object.
The degree may be between 1 and 24.
The array size of interpolation type, position, direction, magnitude,
and curvature should all be number of positions. The array size for
parameter is number of positions for nonperiodic case and number of
positions + 1 for periodic case. For from pole method, the direction,
tangency and curvature constraints can be applied to start and end
positions only.
The parameters are for through point method only. Default parameters will
be used if the input is NULL.
The symmetric option can be applied to one end only for through point
method. You need to input symmetric direction for this option.
Data Members
method
int
creation method:
0 = through points
1 = from poles
degree
int
degree of the spline curve
periodic
int
0 = nonperiodic curve, 1 = periodic curve
nump
int
number of positions (points or poles)
itype
int *
array of integers for interpolation type at
each position:
0 = position only
1 = direction
2 = tangency (direction+magnitude)
3 = curvature (with tangency direction only)
4 = curvature (with tangency magnitude too)
position
tag_t *
array of point ids for positions
parameter
double *
array of real values for point parameters
direction
tag_t *
array of direction ids for tangent directions
magnitude
tag_t *
array of scalar ids for tangent magnitudes
curvature
tag_t *
array of offset ids for curvatures
symmetric [ 2 ]
int
symmetric option at start/end of the curve
0 = default
1 = symmetric model

------------

UF_STD - UF_STD_stl_error_s
UF_STD_stl_error_s
(view source)
Defined in: uf_std.h
Also known as:
UF_STD_stl_error_t
UF_STD_stl_error_p_t
Data Members
error_code
int
Error designation.
object
tag_t
Edge or face with problem.
related
int
Number of remaining related error entries.
point1 [ 3 ]
double
Start point of problem range.
point2 [ 3 ]
double
End point of problem range.

------------

UF_STD - UF_STD_stl_params_s
UF_STD_stl_params_s
(view source)
Defined in: uf_std.h
Also known as:
UF_STD_stl_params_t
UF_STD_stl_params_p_t
Data Members
angular_tolerance
double
Angular tolerance to smooth edges
unit_size
float
Unit size in MM
hide_smooth_edges
logical
Hide smooth edges?
display_info
logical
Display information?
to_jt_body
int
Convert to JT facet body

------------

UF_STD - UF_STD_vrml_params_s
UF_STD_vrml_params_s
(view source)
Defined in: uf_std.h
Also known as:
UF_STD_vrml_params_t
UF_STD_vrml_params_p_t
Data Members
angular_tolerance
double
Angular tolerance to smooth edges.
Angular tolerance (in radians) used
to determine if an edge adjoining
facets should be hidden. Use constants:
UF_STD_SMOOTH_COARSE
UF_STD_SMOOTH_MEDIUM
UF_STD_SMOOTH_FINE
Default value is UF_STD_SMOOTH_MEDIUM
unit_size
float
The size of one VRML unit in
millimeters. Can be any value greater
than zero, or use constants:
UF_STD_UNITS_METER
UF_STD_UNITS_MM
UF_STD_UNITS_INCH
Default value is UF_STD_UNITS_METER
generate_all_lod
logical
Generate all Levels of Detail (LOD).
TRUE = Generate all Levels of Detail
FALSE = Generate only the highest Level
of Detail
hide_smooth_edges
logical
Hide smooth edges in facet models.
TRUE = Hide smooth edges
FALSE = Do not hide smooth edges
Default value is TRUE.
generate_one_model
logical
Generate only one facet model.
Generate one facet model for all
IndexedFaceSet nodes
TRUE = Generate only one facet model
FALSE = Generate a facet model per
IndexedFaceSet
more_details
logical
Display more summary details.
TRUE = Display more summary details
FALSE = Do not display more summary
details
use_cache
logical
Use caching of global coordinate
vertices and normal vectors.
TRUE = Use caching
FALSE = Do not use caching
Default value is TRUE.
suppress_warnings
logical
Suppress displaying of warning
messages.
TRUE = Suppress warning messages
FALSE = Do not suppress warning messages

------------

UF_STUDIO - UF_STUDIO_stybld_curve_trans_s
UF_STUDIO_stybld_curve_trans_s
(view source)
Defined in: uf_studio.h
Also known as:
UF_STUDIO_stybld_curve_trans_t
UF_STUDIO_stybld_curve_trans_p_t
Overview
Data structure of curve transition controlling the shape of tangent holding
curves.
Data Members
trans_type
UF_STUDIO_stybld_trans_t
Transition type.
Note, depending on the transition, trans_type, only some of the three
expressions, start, end and peak, are used. All used expresions must
evaluate to non-negative values, and at least one used expression must
evaluate to a positive value.
start
char *
Expression string for start value. Used for for all transition types.
end
char *
Expression tag for end value. Used for all transition types except
constant.
peak
char *
Expression tag for peak value. Only used for non_inflecting transition
type.
slope
double
Slope value = 0...100. Only used for s-shaped transition type.
position
double
Position of middle value = 10...90. Only used for non_inflecting and
s_shaped transition type.

------------

UF_STUDIO - UF_STUDIO_stybld_data_s
UF_STUDIO_stybld_data_s
(view source)
Defined in: uf_studio.h
Also known as:
UF_STUDIO_stybld_data_t
UF_STUDIO_stybld_data_p_t
Overview
Data structure for styled blend creation and editing.
Data Members
method
UF_STUDIO_stybld_method_t
Method choice for tangent holding curve creation.
num_faces1
int
Number of faces for wall 1.
faces1
tag_t *
Array of num_faces1 face tags for wall 1. You may use a single
face collection as the defintion of the wall. If you do want to use
a collection then it must be the only object in the array
i.e. num_faces1 == 1
reverse_normal1
logical
Reverse normal on wall 1. If TRUE, the face normal direction of
wall 1 will be reversed. In case that method is set to
UF_STUDIO_stybld_method_law and center_curve is set to NULL
(automatically generated center curve), the face normal is used to
determine to which quadrant the blend will be applied.
num_faces2
int
Number of faces for wall 2.
faces2
tag_t *
Array of num_faces2 face tags for wall 2.
You may use a single face collection as the defintion of the wall.
If you do want to use a collection then it must be the only object
in the array i.e. num_faces2 == 1.
If num_faces2 = 1 and faces2[0] is tag of a datum plane, then
Symmetric Modeling mode is active.
reverse_normal2
logical
Reverse normal on wall 2. If TRUE, the face normal direction of
wall 2 will be reversed. In case that method is set to
UF_STUDIO_stybld_method_law and center_curve is set to NULL
(automatically generated center curve), the face normal is used to
determine to which quadrant the blend will be applied.
floating_mode
logical
Only used for Symmetric Modeling (see comments for faces2).
If floating_mode is set to true, no tangent holding line on the datum plane
needs to be selected (method = UF_STUDIO_stybld_method_curves), or no
tangent holding line on the datum plane will be created
(method = UF_STUDIO_stybld_method_law).
If floating_mode is set to false, a tangent holding line on the datum plane
must be selected (method = UF_STUDIO_stybld_method_curves), or
tangent holding line on the datum plane will be created
(method = UF_STUDIO_stybld_method_law).
edge_1
tag_t
connecting edge of 1st adjacent blend
edge_2
tag_t
connecting edge of 2nd adjacent blend
trim_1
double
trimming back factor of 1st adjacent blend
trim_2
double
trimming back factor of 2nd adjacent blend
continuity_blend_1
UF_STUDIO_stybld_cont_t
continuity zu 1st blend
continuity_blend_2
UF_STUDIO_stybld_cont_t
continuity zu 2nd blend
spine
UF_STRING_p_t
Pointer to spine string (optional). If set to NULL, no spine is used.
profile_curve
UF_STRING_p_t
Pointer to profile curve string
depth
UF_STUDIO_stybld_shape_trans_t
Depth transition.
skew
UF_STUDIO_stybld_shape_trans_t
Skew transition.
distance_tol
double
Distance tolerance
angle_tol
double
Angle tolerance
reverse_direction1
logical
Reverse direction flag at wall 1. If TRUE, the tangent direction of
the blend surface at wall 1 will be reversed.
reverse_direction2
logical
Reverse direction flag at wall 2. If TRUE, the tangent direction of
the blend surface at wall 2 will be reversed.
continuity1
UF_STUDIO_stybld_cont_t
Continuity between blend surface and wall 1.
continuity2
UF_STUDIO_stybld_cont_t
Continuity between blend surface and wall 2.
Not used for Symmetric Modeling (see comments for faces2).
direction1
UF_STUDIO_stybld_direct_t
Flow direction of blend surface at wall 1.
direction2
UF_STUDIO_stybld_direct_t
Flow direction of blend surface at wall 2.
Not used for Symmetric Modeling (see comments for faces2).
stiffness
UF_STUDIO_stybld_stiff_t
Stiffness choice for blend surface. Only used if continuity1 and
continuity2 are set to UF_STUDIO_stybld_cont_curvature, or, in case
of Symmetric Modeling (see comments for faces2), if continuity1 is
set to UF_STUDIO_stybld_cont_curvature .
trim
UF_STUDIO_stybld_trim_t
Trim choice.
Not used for Symmetric Modeling (see comments for faces2).
curve1
UF_STRING_p_t
Pointer to string for tangent holding curve 1.
Only used if method is set to UF_STUDIO_stybld_method_curves.
curve2
UF_STRING_p_t
Pointer to string for tangent holding curve 2.
Only used if method is set to UF_STUDIO_stybld_method_curves.
Not used for Symmetric Modeling (see comments for faces2) with
floating_mode set to true.
curve_trans1
UF_STUDIO_stybld_curve_trans_t
Transition controlling the shape of tangent holding curve 1.
Only used if method is set to UF_STUDIO_stybld_method_law.
curve_trans2
UF_STUDIO_stybld_curve_trans_t
Transition controlling the shape of tangent holding curve 2.
Only used if method is set to UF_STUDIO_stybld_method_law.
Not used for Symmetric Modeling (see comments for faces2) with
floating_mode set to true.
center_curve
UF_STRING_p_t
Pointer to string for center curve (optional). Only used if method is
set to UF_STUDIO_stybld_method_curves. In this case, if pointer is set
to NULL, the intersection curve between wall 1 and wall 2 is used as
center curve, if feasible.
reverse_center_curve
logical
Reverse center curve flag is only used if method is set to
UF_STUDIO_stybld_method_law and if the center_curve is set to NULL,
i.e., the center curve is automatically generated. If TRUE, the
direction of the intersection curve between wall 1 and wall 2 will be
reversed.
center_as_spine
int
start_extension
double
Extension at start point of center curve is only used if method is set
to UF_STUDIO_stybld_method_law. start_extension = -50...50. If the
value is positive, the center curve will be extended linearly by
start_extension/100 arclength of the center curve. If the value is
negative, the center curve will be shortened by start_extension/100
length of parameter range of the center curve.
end_extension
double
Extension at end point of center curve is only used if method is set
to UF_STUDIO_stybld_method_law. end_extension = -50...50. If the
value is positive, the center curve will be extended linearly by
end_extension/100 arclength of the center curve. If the value is
negative, the center curve will be shortened by end_extension/100
length of parameter range of the center curve.
min_radius_mode
UF_STUDIO_stybld_minrad_t
Minimum Radius mode.
UF_STUDIO_stybld_minrad_none: No minimum radius constraint,
UF_STUDIO_stybld_minrad_bound: Sections of blend should not exceed
min_radius value,
UF_STUDIO_stybld_minrad_peak: Midpoint of sections assumes min_radius
value.
min_radius
char *
Minimum radius value >= 0.
v_degree
UF_STUDIO_stybld_v_degree_t
Lofting degree choice. Degree of blend surface in v-direction can be
cubic or quintic.

------------

UF_STUDIO - UF_STUDIO_stybld_shape_trans_s
UF_STUDIO_stybld_shape_trans_s
(view source)
Defined in: uf_studio.h
Also known as:
UF_STUDIO_stybld_shape_trans_t
UF_STUDIO_stybld_shape_trans_p_t
Overview
Data structure of shape transition for depth and skew
Data Members
trans_type
UF_STUDIO_stybld_trans_t
Transition type.
start
double
Start value = 0...100. Used for all transition types.
end
double
End value = 0...100. Used for all transition types except constant.
peak
double
Peak value = 0...100. Only used for non_inflecting transition type.
slope
double
Slope value = 0...100. Only used for s-shaped transition type.
position
double
Position of middle value = 10...90. Only used for non_inflecting and
s_shaped transition type.

------------

UF_STYLER - UF_STYLER_callback_info_s
UF_STYLER_callback_info_s
(view source)
Defined in: uf_styler.h
Also known as:
UF_STYLER_callback_info_t
UF_STYLER_callback_info_p_t
Overview
Callback information is stored in the following structure.
A list of callbacks associated with your dialog is automatically
generated for you in your template file.
Data Members
object_id
char *
Indicates the specific object that
the callback is associated with.
cb_type
int
Indicates the type of callback, e.g.
UF_STYLER_ACTIVATE_CB. See the
#defines in uf_styler.h for the
complete list of callback types.
is_dialog_launching_cb
int
Informs the UIStyler that this callback
will construct a dialog.
callback_proc
UF_STYLER_cb_f_t
The callback function

------------

UF_STYLER - UF_STYLER_fileop_s
UF_STYLER_fileop_s
(view source)
Defined in: uf_styler.h
Also known as:
UF_STYLER_fileop_t
UF_STYLER_fileop_p_t
Overview
The following structure is used for file operation callback.
The id field is set to one of the file operation types defined in uf_ui_types.h, e.g.
UF_UI_FILE_NEW. State field indicates if we are entering a file
operation (UF_STYLER_ENTER_FILE_OPERATION) or exiting a file operation
(UF_STYLER_EXIT_FILE_OPERATION).
Data Members
id
int
state
int

------------

UF_STYLER - UF_STYLER_item_value_type_s
UF_STYLER_item_value_type_s
(view source)
Defined in: uf_styler.h
Also known as:
UF_STYLER_item_value_type_t
UF_STYLER_item_value_type_p_t
Overview
The following structure is used for callbacks and Ask/Set methods. Reason,
item_id, subitem_index, and item_attr are used as descriptive fields to
describe the ownership of the attribute. Count, indicator, and value are
used to represent the value of the attribute. Note that not all fields in
this structure are relevant at one time. Depending on the item type and
attribute type, zero or more additional fields may become relevant.
Data Members
reason
int
Used in callback data, this is output from
UF_STYLER functions. This indicates the type of
action, that triggers the callback, e.g.
UF_STYLER_ACTIVATE_CB. Open API callbacks
can rely on this field to determine what user
interaction has occurred. Programs should not
modify this value.
item_id
const char *
This is the most important field in the
structure. It indicates the UIObject identifier
that is associated with any interactions
between the UIStyler and the Open API program.
If the structure is used as callback data, this
field is set by the UIStyler to indicate the
UIObject that triggered the callback. This field
can also be set by the Open API program when
it makes any requests to the UIStyler for any
attribute queries or modifications. The
UIObject identifiers to use for this field
by the Open API program are supplied by the
creator of the dialog when constructing the
dialog. These values are placed in the header
file that is generated by the UIStyler for the
dialog.
subitem_index
int
This field is to be used only by the Open API
program to set attributes of objects that have
subitems or entries. This includes Button
Layout, Option Menu, Radio Box, Tool Palette,
Single-selection LIst, Multiple-selection List,
Selection Box and Navigation Buttons. It will
be a zero based index to indicate which subitem
within this object is to be modified.
count
int
This indicates the number of data values in the
union part of this structure. The count is 1
except when more than one integer, string or real
values are present. The count is set by the
UIStyler in callback data, or on an attribute
query. This must be specified by the Open
API program only when it requests the UIStyler
to replace subitem values for an Option Menu,
Single-selection List, Multiple-selection List
and Selection Box.
item_attr
int
This is the second most important piece of data
in the structure. It indicates the attribute
that is associated with the interaction between
the UIStyler and the Open API program. When
requesting any attribute modifications or
querying on any attribute values, the Open
API program should set this to the desired
attribute. The attribute names are included in
uf_styler.h. This field is set by the UIStyler
only when it dispatches a callback, and the
callback has valid data, in which case it sets
this field to UF_STYLER_VALUE.
indicator
int
Indicates the data type of the value or values
that are associated with the indicated
attribute. The UIStyler sets this field
when dispatching a callback, or when an
attribute query is made from the Open API
program. The Open API program needs this
field to determine the proper data type for the
union in the structure. When setting or
querying attributes, the Open API program
normally doesn't need to set this field, unless
there is an ambiguity. Currently, only the
lists (Single-selection, Multiple-selection, and
Selection Box) require this field to be set to
indicate whether a string or an array of strings
is to be added to the list, or that an array of
names or indices is to be returned from the
query.
value
UF_STYLER_value_t
union of all possible data types that
attributes can have.
See
UF_STYLER_value_t

------------

UF_STYLER - UF_STYLER_page_switch_s
UF_STYLER_page_switch_s
(view source)
Defined in: uf_styler.h
Also known as:
UF_STYLER_page_switch_t
UF_STYLER_page_switch_p_t
Overview
The following structure is used for property page switch callback.
Data Members
activated_page
int
Activated page index
deactivated_page
int
Deactivated page index

------------

UF_SUBDIV - UF_SUBDIV_isocline_s
UF_SUBDIV_isocline_s
(view source)
Defined in: uf_subdiv.h
Also known as:
UF_SUBDIV_isocline_t
UF_SUBDIV_isocline_p_t
Data Members
body_tag
tag_t
The body to apply the feature to
excluded_faces
tag_t *
Array of excluded faces or NULL if not used
The excluded faces are not considered
when applying the feature.
face_count
int
Number of faces in the exclude array
direction
tag_t
SO direction to use for the isocline
direction. If NULL_TAG is used, then
0,0,1 of the WCS will be created for
the direction vector tag and used.
angle_str
char *
String value of the angle expression
in degrees. This expression is then
evaluated for the isocline angle.
second_direction
tag_t
Optional SO second direction to apply
to the steep faces from the first
direction. This must not be parallel
with the first direction. It applies a second
isocline direction to the resultant steep
faces from the first direction using the
same angle expression. If this option
is used, the angle expression must be
positive.

------------

UF_SURF_REG - UF_SURF_REG_all_faces_s
UF_SURF_REG_all_faces_s
(view source)
Defined in: uf_surf_reg.h
Also known as:
UF_SURF_REG_all_faces_t
UF_SURF_REG_all_faces_p_t
Overview
The parameters for defining all faces of a body surface region feature.
Data Members
name
char *
Optional name of feature
body
tag_t
The target body used to create the feature
update_after_body
int
Flag to indicate when to update. Set this
to 1 to update after the body, set it to
0 to update at the time stamp.

------------

UF_SURF_REG - UF_SURF_REG_explicit_s
UF_SURF_REG_explicit_s
(view source)
Defined in: uf_surf_reg.h
Also known as:
UF_SURF_REG_explicit_t
UF_SURF_REG_explicit_p_t
Overview
The parameters for defining explicit faces of a body, surface region feature.
Data Members
name
char *
Optional name of feature
feature_faces
tag_t *
Array of faces on the body
face_count
int
Number of faces in the array
update_after_body
int
Flag to indicate when to update. Set this
to 1 to update after the body, set it to
0 to update at the time stamp.

------------

UF_SURF_REG - UF_SURF_REG_seed_s
UF_SURF_REG_seed_s
(view source)
Defined in: uf_surf_reg.h
Also known as:
UF_SURF_REG_seed_t
UF_SURF_REG_seed_p_t
Overview
The parameters for defining the seed surface region feature.  Boundary faces
and/or tangential edge expression can be used to limit the region.
Data Members
name
char *
Optional name of feature
seed_face
tag_t
The seed face of the body
boundary_faces
tag_t *
Array of boundary faces or NULL if not used
bnd_face_count
int
Number of faces in boundary array
traverse_holes
int
Flag whether to traverse interior holes
tang_edge_str
char *
String value of the tangential edge
expression or NULL if not used.
update_after_body
int
Flag to indicate when to update. Set this
to 1 to update after the body, set it to
0 to update at the time stamp.

------------

UF_SURF_REG - UF_SURF_REG_steep_s
UF_SURF_REG_steep_s
(view source)
Defined in: uf_surf_reg.h
Also known as:
UF_SURF_REG_steep_t
UF_SURF_REG_steep_p_t
Overview
The parameters for defining the steep surface region feature.
Uses the subdiv_isocline feature to actually apply the splitting
of the faces on the body. See uf_subdiv.h for more information.
Data Members
name
char *
Optional name of feature
body
tag_t
The target body used to create the feature
subdiv_isocline
tag_t *
An array subdiv isocline features that
were applied to the body.(Currently only 1)
sub_iso_count
int
Number of subdiv isocline features.
steep_faces
logical
Whether to gather steep or nonsteep faces
update_after_body
int
Flag to indicate when to update. Set this
to 0 to update at the time stamp.
version_number
int
Current version must be 1

------------

UF - UF_system_info_s
UF_system_info_s
(view source)
Defined in: uf.h
Also known as:
UF_system_info_t
UF_system_info_p_t
Overview
The structure UF_system_info_t below is used to get the information about
the current process. The routine UF_ask_system_info retrieves the
information about the process and fills the structure. Once the data is used,
the memory allocated to these fields should be freed by calling the routine,
UF_free_system_info.
Data Members
date_buf
char *
Current date and time info
user_name
char *
User, who is running this process
program_name
char *
The current program name
node_name
char *
Machine, on which this process is running
machine_type
char *
Hardware type on which the machine is running
os_name
char *
Operating system, on which this process is running
os_version
char *
Version and release level of this Operating System
physical_memory
long
Returns the number of bytes of physical memory
on this machine.
bundles_used
char * *
Array of the names of the bundles currently in use.
number_of_bundles
int
The number of bundles currently in use

------------

UF_TABNOT - UF_TABNOT_cell_prefs_s
UF_TABNOT_cell_prefs_s
(view source)
Defined in: uf_tabnot_types.h
Also known as:
UF_TABNOT_cell_prefs_t
UF_TABNOT_cell_prefs_p_t
Data Members
format
UF_TABNOT_format_t
Cell format
precision
int
Precision (# dec places to the
right of the decimal point)
is_a_formula
logical
Does the formatted text get
passed to the expression
subsystem for evaluation
zero_display
UF_TABNOT_zero_display_t
The way that a numeric zero
should display
text_font
int
Index of NX font
text_height
double
Height of text in this cell
text_aspect_ratio
double
Text aspect ratio
symbolAspectRatio
double
Symbol aspect ratio (only available in standard fonts)
horiz_just
UF_TABNOT_just_t
Horizontal text justification
vert_just
UF_TABNOT_just_t
Vertical text justification
text_angle
double
Text angle in radians
text_slant
double
Text slant angle
is_vertical
logical
Is text displayed vertical?
is_italic
logical
Is text displayed italic?
strikethru
logical
Is text stricken thru?
line_space_factor
double
Line space factor
char_space_factor
double
Character space factor
is_hidden
logical
Is display of text suppressed?
text_color
int
Text color
text_density
int
Text density 1:Normal, 2:Heavy, 3:Thin, 0:Use Default
bottom_line_cfw [ 3 ]
int
Color/font/width of bottom line
right_line_cfw [ 3 ]
int
Color/font/width of right line
width follows 1:Normal, 2:Heavy, 3:Thin, 0:Use Default
nm_fit_methods
int
Number of fit methods
fit_methods [ UF_TABNOT_fit_method_max ]
UF_TABNOT_fit_method_t
Fit methods
referenced_spreadsheet
tag_t
Referenced spreadsheet
ss_sheet
int
Sheet referenced in spreadsheet
ss_row
int
Row referenced in spreadsheet
ss_col
int
Column referenced in spreadsheet
prefix
char*
suffix
char*
formula_suffix
char*
This string gets appended to the
cell text when the text is passed
to the expression subsystem when
evaluating the cell as a formula.
url
char*
is_protected
logical
Is cell protected?

------------

UF_TABNOT - UF_TABNOT_section_prefs_s
UF_TABNOT_section_prefs_s
(view source)
Defined in: uf_tabnot_types.h
Also known as:
UF_TABNOT_section_prefs_t
UF_TABNOT_section_prefs_p_t
Data Members
header_location
UF_TABNOT_header_location_t
Location to display header
max_height
double
The maximum height of the
section. This will determine
the number of rows contained in
the section.
overflow_direction
UF_TABNOT_overflow_direction_t
Direction to overflow sections
overflow_spacing
double
Distance to offset continuation
sections (only used when table
continues on the same sheet)
attach_point
UF_TABNOT_attach_point_t
Point to which origin is attached
use_double_width_border
logical
Should the border be double width?
border_width
double
Width of border if use_double_width_border
is TRUE
display_continuation_note
UF_TABNOT_display_continuation_note_t
Display continuation note flag<DRF30825>
continuation_note
char*
Continuation note string

------------

UF_TABNOT - UF_TABNOT_sort_data_s
UF_TABNOT_sort_data_s
(view source)
Defined in: uf_tabnot_types.h
Also known as:
UF_TABNOT_sort_data_t
UF_TABNOT_sort_data_p_t
Data Members
sort_index
int
Index used to indicate the
order of precedence one
column has over another
when sorting the rows.
Sorting occurs first using
the column with a sort_index
of 1, then on the column
with a sort_index of 2 and
so on. A value of 0 means
"do not sort on this column".
sort_direction
UF_TABNOT_sort_direction_t
Direction of the sort

------------

UF - UF_timer_values_s
UF_timer_values_s
(view source)
Defined in: uf.h
Also known as:
UF_timer_values_t
UF_timer_values_p_t
Overview
The structure UF_timer_values_t below is used to get the values from the
timer. The routine UF_end_timer fills the fields of this structure, when the
timer is closed. The timer is initiated by the routine UF_begin_timer.
Data Members
cpu_time
double
Total CPU time (User + System) for this process
real_time
double
Total elapsed time

------------

UF_UDOBJ - UF_UDOBJ_all_data_s
UF_UDOBJ_all_data_s
(view source)
Defined in: uf_udobj.h
Also known as:
UF_UDOBJ_all_data_t
UF_UDOBJ_all_data_p_t
Data Members
class_id
UF_UDOBJ_class_t
the class identifier for the
UDO
udo_status
unsigned int
the out-of-date indicator for
the UDO
num_ints
unsigned int
the number of integers in the
UDO
ints
int *
the integers in the UDO --
NOTE: this is allocated memory
that needs to be freed when no
longer needed. See
UF_UDOBJ_free_udo_data
num_doubles
unsigned int
the number of doubles in the
UDO
doubles
double *
the doubles in the UDO --
NOTE: this is allocated memory
that needs to be freed when no
longer needed. See
UF_UDOBJ_free_udo_data
num_strings
unsigned int
the number of strings in the
UDO
strings
char * *
the strings in the UDO --
NOTE: this is allocated memory
that needs to be freed when no
longer needed. See
UF_UDOBJ_free_udo_data
num_links
unsigned int
the number of links in the UDO
link_defs
UF_UDOBJ_link_t *
the link types and the
associated NX objects in the
UDO -- NOTE: this is
allocated memory that needs
to be freed when no longer
needed . See
UF_UDOBJ_free_udo_data
num_lengths
unsigned int
the number of lengths in the
UDO
lengths
double *
The length data in the UDO.
These doubles will be marked
as measurements of length, so
that conversion from metric to
english units will properly
work.
NOTE: this is allocated memory
that needs to be freed when no
longer needed. See
UF_UDOBJ_free_udo_data
num_areas
unsigned int
the number of areas in the UDO
areas
double *
The area data in the UDO --
These doubles will be marked
as measurements of area, so
that conversion from metric to
english units will properly
work.
NOTE: this is allocated memory
that needs to be freed when no
longer needed. See
UF_UDOBJ_free_udo_data
num_volumes
unsigned int
the number of volumes in the
UDO
volumes
double *
the volume data in the UDO --
These doubles will be marked
as measurements of volume, so
that conversion from metric to
english units will properly
work.
NOTE: this is allocated memory
that needs to be freed when no
longer needed. See
UF_UDOBJ_free_udo_data

------------

UF_UDOBJ - UF_UDOBJ_link_s
UF_UDOBJ_link_s
(view source)
Defined in: uf_udobj.h
Also known as:
UF_UDOBJ_link_t
UF_UDOBJ_link_p_t
Data Members
link_type
int
the link type to create; any of
these possibilities:
Link type 1 --
if the UDO is deleted the link
between the UDO and the
associated object is removed and
the object is unaffected; if the
UDO is updated the associated
object is unaffected; if the
associated object is deleted the
UDO is also deleted; if the
associated object is updated the
UDO is updated
Link type 2 --
if the UDO is deleted the link
between the UDO and the
associated object is removed and
the object is deleted; if the
UDO is updated the associated NX
object is unaffected; if the
associated object is deleted, it
is left in the data model in a
condemned state and remains
attached to the UDO; if the
associated object is updated
the UDO is unaffected
Link type 3 --
if the UDO is deleted the link
between the UDO and the
associated object is removed and
the object is unaffected; if the
UDO is updated the associated
object is unaffected; if the
associated object is deleted the
link to the UDO is removed and
the UDO is updated; if the
associated object is updated the
UDO is updated
Link type 4 --
if the UDO is deleted the link
between the UDO and the
associated object is removed and
the object is unaffected; if the
UDO is updated the associated
object is unaffected; if the
associated object is deleted the
link to the UDO is removed and
the UDO is unaffected; if the
associated object is updated the
UDO is unaffected
assoc_ug_tag
tag_t
In most cases this will be the
NX tag to associate the UDO
with. However for the routine
UF_UDOBJ_ask_udo_links_to_obj,
this will return the tag of the
UDO that the object is linked
to.
object_status
unsigned int
the up-to-date indicator for
the object associated with
the UDO
0 = Up to date
1 = Out of date

------------

UF_UGFONT - UF_UGFONT_font_header_s
UF_UGFONT_font_header_s
(view source)
Defined in: uf_ugfont.h
Also known as:
UF_UGFONT_font_header_t
Overview
The following structure defines the font header.  These are
parameters that effect all of the characters in the font.
Data Members
version
int
This is the internal version number. It
identifies the format of the font binary file.
Currently this is version 1.
height
int
This is the height of the font. This value
is the maximum Y value a character in the font
may have.
width
int
This is the width of the font. This value is
the maximum X value a character in the font
may have.
base_height
int
This is the distance to the base line of the
characters. The base line is the bottom of
upper case characters.
waist_height
int
This is the distance to the waist line of the
characters. The waist line is the top of most
lower case characters.
width_type
int
This is the width type of the font:
1 = Fixed width, all characters have the same
width.
2 = Variable width, characters vary the width
based on their shape.
3 = Variable overlap font, the width of a
character varies by its shape and the shape
of characters around it.
overlap_1
int
The overlap 1 value
overlap_2
int
The overlap 2 value
overlap_3
int
The overlap 3 value
line_spacing
double
The line spacing of the font. This defines the
distance between two lines of characters.
char_spacing
double
The character spacing of the font. This defines
the distance between two characters on the same
line.
grid_spacing
double
The grid spacing. This value is computed when the
font was first created, and is the distance
assigned to one unit of the font height or
width.
number_of_chars
int
This is the total number of characters that are
defined in this font.

------------

UF_UGMGR - UF_UGMGR_ATTR_info_s
UF_UGMGR_ATTR_info_s
(view source)
Defined in: uf_ugmgr_types.h
Also known as:
UF_UGMGR_ATTR_info_t
UF_UGMGR_ATTR_info_p_t
UF_UGMGR_ATTR_info_c_t
UF_UGMGR_ATTR_info_pc_t
Overview
UF_UGMGR_ATTR_info_t
User attribute information struct representing a creation parameter
for creating a new part in Teamcenter. This struct is used by
UF_UGMGR_get_creation_parameters.
Data Members
create_descriptor
logical
Flag indicating if this parameter is a create descriptor
key_identifier
logical
Flag indicating if this parameter is a field of the multi field key
basic_info
UF_ATTR_info_t
Other informarion viz. title, alias, whether required, etc.

------------

UF_UGMGR - UF_UGMGR_new_alternate_part_no_s
UF_UGMGR_new_alternate_part_no_s
(view source)
Defined in: uf_ugmgr_types.h
Also known as:
UF_UGMGR_new_alternate_part_no_t
UF_UGMGR_new_alternate_part_no_p_t
Overview
This structure is used to define the parameters for a new Alternate Identifier
as a customization of the Add Alternate dialog in NX Manager.
Data Members
part_tag
tag_t
Tag of part to assign alternate ID.
context
const char *
Context for which an alternate number is being requested.
id_type
const char *
ID type of part for which the number is being requested. May be NULL
alt_item_id [ UF_UGMGR_PARTNO_BUFSIZE ]
char
Alternate Item ID. The string must freed after use with UF_free().
alt_rev_id [ UF_UGMGR_PARTREV_BUFSIZE ]
char
Alternate Revision ID. The string must freed after use with UF_free()
alt_name [ UF_UGMGR_NAME_BUFSIZE ]
char
Returned string for new part name, this may be an empty string
alt_description [ UF_UGMGR_DESC_BUFSIZE ]
char
Returned string for new part description, this may be an empty string.
modifiable
logical
Boolean; is the alternate ID allowed to be modified

------------

UF_UGMGR - UF_UGMGR_new_dataset_name_s
UF_UGMGR_new_dataset_name_s
(view source)
Defined in: uf_ugmgr_types.h
Also known as:
UF_UGMGR_new_dataset_name_t
UF_UGMGR_new_dataset_name_p_t
Overview
This structure may be used to define the parameters for a new Part
specification in a customisation of the new-Part dialog in
NX Manager.
Data Members
owner
const char*
Owning Item of existing dataset, this may be NULL
owner_revision
const char*
Revision name of Owning Item
dataset_type
const char*
Name of dataset type for which a name is being generated.
relation_type
const char*
Name of relation between Owning Item and dataset
basis_name
const char*
Basis name of new dataset (this may be an empty string)
dataset_name_modifiable
logical
Flag whether user can change the returned value of dataset_name
dataset_name [ UF_UGMGR_NAME_BUFSIZE ]
char
Returned string for new dataset name, this may be an empty string.
ifail
int
Failure code returned from the user program, zero is success.

------------

UF_UGMGR - UF_UGMGR_new_id_s
UF_UGMGR_new_id_s
(view source)
Defined in: uf_ugmgr_types.h
Also known as:
UF_UGMGR_new_id_t
UF_UGMGR_new_id_p_t
Overview
This structure is used to define the parameters for a new Part
specification in a customization of the new-Part dialog in NX Manager.
Data Members
old_item
const char*
<I> Seed name for the new item id, this may be NULL.
item_type
const char*
<I> Name of item type for which the id is being generated.
num_properties
int
<I> Number of properties.
properties
UF_UGMGR_property_info_t*
<I/O> Array of UF_UGMGR_property_info_t. One of the properties can be "item_id".
The property_value and is_modifiable are the outputs.
part_name_modifiable
logical
<O> Flag whether the user can change the returned value of new_name.
new_name [ UF_UGMGR_NAME_BUFSIZE ]
char
<O> Returned string for new part name, this may be an empty string.
part_description_modifiable
logical
<O> Flag whether the user can change the returned value of new description.
new_description [ UF_UGMGR_DESC_BUFSIZE ]
char
<O> Returned string for new part description, this may be an empty string.
ifail
int
<O> Failure code returned from the user program, zero is success.

------------

UF_UGMGR - UF_UGMGR_new_part_no_s
UF_UGMGR_new_part_no_s
(view source)
Defined in: uf_ugmgr_types.h
Also known as:
UF_UGMGR_new_part_no_t
UF_UGMGR_new_part_no_p_t
Overview
This structure is used to define the parameters for a new Part
specification in a customization of the new-Part dialog in NX Manager.
Data Members
old_item
const char*
Seed name for the new item id, this may be NULL
item_type
const char*
Name of item type for which number is being generated.
part_number_modifiable
logical
Flag whether the user can change the returned value of new_id
new_id [ UF_UGMGR_PARTNO_BUFSIZE ]
char
Returned string for new part number, this may be an empty string
part_name_modifiable
logical
Flag whether the user can change the returned value of new_name
new_name [ UF_UGMGR_NAME_BUFSIZE ]
char
Returned string for new part name, this may be an empty string
part_description_modifiable
logical
Flag whether the user can change the returned value of new description.
new_description [ UF_UGMGR_DESC_BUFSIZE ]
char
Returned string for new part description, this may be an empty string.
ifail
int
Failure code returned from the user program, zero is success.

------------

UF_UGMGR - UF_UGMGR_new_part_rev_s
UF_UGMGR_new_part_rev_s
(view source)
Defined in: uf_ugmgr_types.h
Also known as:
UF_UGMGR_new_part_rev_t
UF_UGMGR_new_part_rev_p_t
Overview
This structure is used to define the parameters for a new Part
specification in a customisation of the new-Part dialog in
NX Manager.
Data Members
item
const char*
Seed name for new item id for default domain item. This may be MFK id for non-default domain item. This may be NULL.
item_type
const char*
Name of item type for which revision is being generated.
part_revision_modifiable
logical
Flag whether the user can change the returned value of new_revision.
new_revision [ UF_UGMGR_PARTREV_BUFSIZE ]
char
Returned string for new part revision, this may be an empty string.
ifail
int
Failure code returned from the user program, zero is success.

------------

UF_UGMGR - UF_UGMGR_part_file_info_s
UF_UGMGR_part_file_info_s
(view source)
Defined in: uf_ugmgr_types.h
Also known as:
UF_UGMGR_part_file_info_t
UF_UGMGR_part_file_info_p_t
Overview
This structure is used to represent an NX PartFile for the purpose of resolving
a part file name and used as input to the service UF_UGMGR_resolve_part_file_infos.
Note: -If fileName is specified then partId, revisionID, modelType, datasetName are ignored.
-If fileName is not provided then partID has to be provided for the input to be valid.
-If partID is provided then modelType, datasetName can be provided along with partID and revisionID.
-For unconfigured input( i.e., revision information not available) and revisionOption is UF_UGMGR_configure_none
the current revision Rule in effect will be used to resolve the NX PartFile.
Data Members
fileName
const char *
%UGMGR filename(This is what is returned from methods such as UF_UGMGR_encode_part_filename),
or @DB- Command line Input name (This is what is returned from methods such as
UF_UGMGR_convert_file_name_to_cli) of the NX PartFile. If this is not specified/used,
it has to be initialized to NULL
partID
const char *
PartID of the NX PartFile to be resolved. If this is not specified/used, it has to be
initialized to NULL.
revisionId
const char *
RevisionID of the part to be resolved. If the revisionOption is set to UF_UGMGR_configure_by_rev_rule,
this will be ignored. If this is not specified/used, it has to be initialized to NULL.
modelType
const char *
PDI Model Type, valid values are "master","specification", "manifestation", "altrep",
"scenario", "simulation", "cae_motion", "cae_solution", "cae_mesh" and "cae_geometry".
If this is not specified/used, it has to be initialized to NULL.
datasetName
const char *
Dataset name of the NX PartFile to be resolved.
If this is not specified/used, it has to be initialized to NULL.
revisionRule
const char *
Teamcenter Revision Rule to use for configuration, This will be used only if revisionOption is
set to UF_UGMGR_configure_by_rev_rule. If this is not specified/used, it has to be initialized to NULL.
revisionOption
UF_UGMGR_rev_config_options_t
Revision configuration option.

------------

UF_UGMGR - UF_UGMGR_part_file_object_s
UF_UGMGR_part_file_object_s
(view source)
Defined in: uf_ugmgr_types.h
Also known as:
UF_UGMGR_part_file_object_t
UF_UGMGR_part_file_object_p_t
Overview
This structure is used to hold information about an NX partFile that is resolved by
the service UF_UGMGR_resolve_part_file_infos. The elements of this structure are
valid only if iFail is zero.
Data Members
fullSpec
char *
Returned string, %UGMGR filename. The string must freed after use with UF_free()
cliSpec
char *
Returned string, @DB-CommandLineInput filename of the part. The string must freed after use with UF_free()
partID
char *
Returned string, ID of the part. The string must freed after use with UF_free()
datasetName
char *
Returned string, Datasetname of the part. The string must freed after use with UF_free()
revisionID
char *
Returned string, Revision ID of the part. The string must freed after use with UF_free()
partNumber
char *
Returned string, PartNumber of the part. The string must freed after use with UF_free()
datasetType
char *
Returned string, The TC dataset type for this Part. The string must freed after use with UF_free()
pdiModelType
char *
Returned string, The equivalent PDI model type for this part. The string must freed after use with UF_free()
partTag
tag_t
Returned Database tag of the part
iFail
int
Returned Error code for this object, zero is success.

------------

UF_UGMGR - UF_UGMGR_property_info_s
UF_UGMGR_property_info_s
(view source)
Defined in: uf_ugmgr_types.h
Also known as:
UF_UGMGR_property_info_t
UF_UGMGR_property_info_p_t
Overview
This structure is used to descripbe the properties that are required for a new Part
specification in a customization of the new-Part dialog in NX Manager.
Data Members
property_name
char*
The name of the property.
is_key_field
logical
Flag whether this is a key field of MFK id.
is_mandatory
logical
Flag whether this is a mandatory mapped attribute.
is_create_descriptor
logical
Flag whether this is a required or auto-assignable create descriptor.
property_value
char*
The value of the property.
is_modifiable
logical
Indicates whether the value is modifiable.

------------

UF_UGMGR - UF_UGMGR_saveas_dataset_info_s
UF_UGMGR_saveas_dataset_info_s
(view source)
Defined in: uf_ugmgr_types.h
Also known as:
UF_UGMGR_saveas_dataset_info_t
UF_UGMGR_saveas_dataset_info_p_t
Overview
This structure is used to hold the input and output arguments to
UF_UGMGR_saveas_dataset_info, which supercedes
UF_UGMGR_saveas_dataset_name.  This user exit is called when
NX Manager is about to save a part with non-masters attached to it.
It collects information about how to save these non-masters and
returns it to NX.
Data Members
old_part_number
const char *
<I> Original item id
old_rev_name
const char *
<I> Original revision id
new_part_number
const char *
<I> New item id
new_rev_name
const char *
<I> New revision id
new_part_type
const char *
<I> New item type
dataset_count
int
<I> Number of datasets
dataset_list
char * *
<I> Names of datasets
dataset_name_list
char * * *
<OF> For each non-master Dataset: dataset name
copy_state
int * *
<OF> For each non-master Dataset: each one of {USER_DATASET_always_copy, USER_DATASET_never_copy,
USER_DATASET_user_chooses}
name_locked
logical * *
<OF> For each non-master Dataset: indicates whether the user is allowed to change the suggested name
returned from the user exit.
validation_required
logical * *
<OF> For each non-master Dataset: Indicates whether or not the name must pass the validation check.
original_owner
logical * *
<OF> For each non-master Dataset: Indicates whether the new non-masters are to be owned by the original
owner or by the user doing the saving.
allow_duplicates
logical *
<O> Whether or not duplicate non-master names are allowed.
ifail
int
<O> Failure code returned from the user program, zero is success.

------------

UF_UGMGR - UF_UGMGR_saveas_dataset_name_s
UF_UGMGR_saveas_dataset_name_s
(view source)
Defined in: uf_ugmgr_types.h
Also known as:
UF_UGMGR_saveas_dataset_name_t
UF_UGMGR_saveas_dataset_name_p_t
Overview
This structure may be used to define the parameters for a
non-master, dataset name in a customisation of the saveas master
part dialog in NX Manager.
Data Members
old_owner
const char*
Owning Item of existing dataset, this may be NULL.
old_owner_revision
const char*
Revision of Owning Item of existing dataset, this may be NULL.
old_dataset
const char*
Name of existing dataset, this may be NULL.
relation_type
const char*
Name of relation type between the Owning Item and the dataset.
new_owner
const char*
Name of the new Owning Item of the dataset.
new_owner_revision
const char*
Revision of the new Owning Item of the dataset.
dataset_name_modifiable
logical
Flag whether the user can change the returned value of dataset_name.
dataset_name [ UF_UGMGR_NAME_BUFSIZE ]
char
Returned string for saveas dataset name, this may be an empty string.
ifail
int
Failure code returned from the user program, zero is success.

------------

UF_UGMGR - UF_UGMGR_validate_dataset_name_s
UF_UGMGR_validate_dataset_name_s
(view source)
Defined in: uf_ugmgr_types.h
Also known as:
UF_UGMGR_validate_dataset_name_t
UF_UGMGR_validate_dataset_name_p_t
Overview
This function is called by NX when it wants to ensure that a dataset
name is valid.  It is typically called in the context of saving an
existing part to a new part, and these details are passed to it in
case the function wants to use them to check the name.
Data Members
old_part_number
const char *
<I> Original item id
old_rev_name
const char *
<I> Original revision id
new_part_number
const char *
<I> New item id
new_rev_name
const char *
<I> New revision id
new_part_type
const char *
<I> New item type
new_dataset_name
const char *
<I> New dataset name
valid
logical *
<O> Whether or not the name is considered valid
ifail
int
Failure code returned from the user program, zero is success.

------------

UF_UGMGR - UF_UGMGR_variant_configuration_s
UF_UGMGR_variant_configuration_s
(view source)
Defined in: uf_ugmgr.h
Also known as:
UF_UGMGR_variant_configuration_t
Overview
UF_UGMGR_variant_configuration_t: A structure defining and describing a
Variant Configuration. It comprises the name (in CLI format) of a Product
Assembly, the name of a Variant Rule contained in the Team Center Engineering Item Revision
corresponding to that Product Assembly, and the description field of that
Variant Rule.
Note that a Product Assembly may have more than one Variant Rule associated
with it; the Product Assembly may be paired with each of these Variant Rules
to produce several different Variant Configurations. However, a Variant Rule
may only be paired with the Product Assembly that contains it.
Data Members
product [ MAX_FSPEC_BUFSIZE ]
char
The item revision of the Product Assembly in
CLI form (i.e. @DB/<ItemID>/<RevID>).
variant [ UF_UGMGR_FNAME_BUFSIZE ]
char
The name of the saved Variant Rule that
specifies this configuration.
desc [ UF_UGMGR_DESC_BUFSIZE ]
char
The description of the saved Variant Rule.

------------

UF_UI - UF_UI_attachment_s
UF_UI_attachment_s
(view source)
Defined in: uf_ui_types.h
Also known as:
UF_UI_attachment_t
UF_UI_attachment_p_t
Data Members
center
short
attach_type_top
short
attach_type_left
short
attach_type_right
short
offset_top
short
offset_left
short
offset_right
short
item_id_top
const char *
item_id_left
const char *
item_id_right
const char *

------------

UF_UI - UF_UI_chained_points_s
UF_UI_chained_points_s
(view source)
Defined in: uf_ui_types.h
Also known as:
UF_UI_chained_points_t
UF_UI_chained_points_p_t
Overview
structure used by
UF_UI_select_point_collection
Data Members
pt [ 3 ]
double
object
tag_t

------------

UF_UI - UF_UI_err_data_s
UF_UI_err_data_s
(view source)
Defined in: uf_ui_types.h
Also known as:
UF_UI_err_data_t
UF_UI_err_data_p_t
Overview
Structure containing the user data to pass to the error handling function
Data Members
size
int
Size of 'data' in bytes
data
const void *
Pointer to data to pass to error handling function

------------

UF_UI - UF_UI_err_s
UF_UI_err_s
(view source)
Defined in: uf_ui_types.h
Also known as:
UF_UI_err_t
UF_UI_err_p_t
Overview
Structure containing error handling function and the user data to pass
to it
Data Members
type
UF_UI_fun_type_t
Type of function in 'fun'
fun
UF_UI_err_u_t
UF_UI_<create|open>_part error function
fun_data
UF_UI_err_data_t
Pointer to data to pass to 'fun'

------------

UF_UI - UF_UI_mask_s
UF_UI_mask_s
(view source)
Defined in: uf_ui_types.h
Also known as:
UF_UI_mask_t
UF_UI_mask_p_t
Overview
fourth CAE detail type
Data Members
object_type
int
This can be one of the object types that are listed in
uf_object_types.h or UF_pseudo_object_type
object_subtype
int
This can either be UF_all_subtype (not with UF_pseudo_object_type),
or one of the corresponding supported subtypes of the object type specified.
This is ignored for certain types like UF_solid_type
solid_type
int
This should be named detail_type and is only meaningful for certain object_types like
UF_solid_type, UF_feature_type or UF_pseudo_type.
This should be set to one of the corresponding detail types
of the object type and object_subtype specified.
This is ignored for UF_all_subtype.

------------

UF_UI - UF_UI_menubar_item_s
UF_UI_menubar_item_s
(view source)
Defined in: uf_ui_types.h
Also known as:
UF_UI_menubar_item_t
UF_UI_menubar_item_p_t
Data Members
type
UF_UI_MENU_TYPE
may be any type in UF_UI_MENU_TYPE above
text
char *
label to put on the button
name
char *
name of the resource for button
state
int
state of the button
CBproc
UF_UI_cb_proc
activate callback procedure
CBdata
void *
activate callback data

------------

UF_UI - UF_UI_message_buttons_s
UF_UI_message_buttons_s
(view source)
Defined in: uf_ui_types.h
Also known as:
UF_UI_message_buttons_t
UF_UI_message_buttons_p_t
Overview
Data structure that controls standard button configuration on message
dialogs
Data Members
button1
logical
flag that specifies whether or not button1
(OK) is required
button2
logical
flag that specifies whether or not button2
(BACK) is required
button3
logical
flag that specifies whether or not button3
(CANCEL) is required
label1
char *
label for button1 (OK by default)
label2
char *
label for button2 (BACK by default)
label3
char *
label for button3 (CANCEL by default)
response1
int
Response value for button1
response2
int
Response value for button2
response3
int
Response value for button3

------------

UF_UI - UF_UI_motion_cb_data_s
UF_UI_motion_cb_data_s
(view source)
Defined in: uf_ui_types.h
Also known as:
UF_UI_motion_cb_data_t
UF_UI_motion_cb_data_p_t
Overview
typedefs for motion callbacks, which can be passed to
UF_UI_specify_screen_position.
Data Members
view_tag
tag_t
The tag of the current view of the
crosshairs.
start_position [ 3 ]
double
Screen position at the time this "gesture"
was started. This is the position in
Work Part Absolute Coords obtained by
projecting the cursor position "through the
screen" onto the XY plane of the WCS;
if Grid Snap is on, this is the "snapped"
position.
start_view_tag
tag_t
The view tag of the start position.

------------

UF_UI - UF_UI_option_toggle_s
UF_UI_option_toggle_s
(view source)
Defined in: uf_ui_types.h
Also known as:
UF_UI_option_toggle_t
UF_UI_option_toggle_p_t
Overview
Option Toggle Data
Data Members
choice
int
active option
is_checked
logical
check box state

------------

UF_UI - UF_UI_selection_option_s
UF_UI_selection_option_s
(view source)
Defined in: uf_ui_types.h
Also known as:
UF_UI_selection_options_t
UF_UI_selection_options_p_t
Overview
structure used by
UF_UI_select_single
UF_UI_select_by_class
Refer to the
table
Data Members
num_mask_triples
int
mask_triples
UF_UI_mask_p_t
scope
int
scopes are listed in uf_ui.h
other_options
int
initially ignored (set to 0)
reserved
void *
initially ignore (set to NULL)

------------

UF_VDAC - UF_VDAC_cckey_ce_item_s
UF_VDAC_cckey_ce_item_s
(view source)
Defined in: uf_vdac.h
Also known as:
UF_VDAC_cckey_ce_item_t
UF_VDAC_cckey_ce_item_p_t
UF_VDAC_cckey_ce_item_c_t
UF_VDAC_cckey_ce_item_pc_t
Overview
Check Criterion Key Comply Error Item
Data Members
key_info
UF_VDAC_cckey_t
comply error check criterion key info
ce_item
UF_VDAC_ce_item_t
Comply Error Item
crit_name [ UF_OBJ_NAME_BUFSIZE ]
char
criterion name

------------

UF_VDAC - UF_VDAC_cckey_fo_s
UF_VDAC_cckey_fo_s
(view source)
Defined in: uf_vdac.h
Also known as:
UF_VDAC_cckey_fo_t
UF_VDAC_cckey_fo_p_t
UF_VDAC_cckey_fo_c_t
UF_VDAC_cckey_fo_pc_t
Overview
Faulty Objects of comply error items of a check criterion key
Data Members
key_info
UF_VDAC_cckey_t
comply error check criterion key info
list_head
UF_VDAC_list_head_t
Object Identifier list head

------------

UF_VDAC - UF_VDAC_cckey_s
UF_VDAC_cckey_s
(view source)
Defined in: uf_vdac.h
Also known as:
UF_VDAC_cckey_t
UF_VDAC_cckey_p_t
UF_VDAC_cckey_c_t
UF_VDAC_cckey_pc_t
Overview
comply error check criterion key info
Data Members
ceh_value
UF_VDAC_item_u_t
check value
comply_class
UF_VDAC_class_e_t
comply error object class
cckey
const char*
VDA Checker comply error check criterion key
item_name
const char*
criterion name
violations
int
number of violations
ceh_options
UF_VDAC_item_options_t
item description

------------

UF_VDAC - UF_VDAC_ce_gc_par_s
UF_VDAC_ce_gc_par_s
(view source)
Defined in: uf_vdac.h
Also known as:
UF_VDAC_ce_gc_par_t
UF_VDAC_ce_gc_par_p_t
UF_VDAC_ce_gc_par_c_t
UF_VDAC_ce_gc_par_pc_t
Overview
Comply error Geometric Continuity Parameters
Data Members
ce_point [ 2 ]
UF_VDAC_ce_point_t

------------

UF_VDAC - UF_VDAC_ce_item_s
UF_VDAC_ce_item_s
(view source)
Defined in: uf_vdac.h
Also known as:
UF_VDAC_ce_item_t
UF_VDAC_ce_item_p_t
UF_VDAC_ce_item_c_t
UF_VDAC_ce_item_pc_t
Overview
Comply Error Item
Data Members
object_id
tag_t
object id of failing object
object_id2
tag_t
adjacent object id if any
value
UF_VDAC_item_u_t
failing constraint value
value2
UF_VDAC_item_u_t
failing constraint value2
ce_options
UF_VDAC_item_options_t
description of error case
par
UF_VDAC_ce_par_u_t
diagnose parameters

------------

UF_VDAC - UF_VDAC_ce_me_par_s
UF_VDAC_ce_me_par_s
(view source)
Defined in: uf_vdac.h
Also known as:
UF_VDAC_ce_me_par_t
UF_VDAC_ce_me_par_p_t
UF_VDAC_ce_me_par_c_t
UF_VDAC_ce_me_par_pc_t
Overview
Modeler Error comply error info
Data Members
ptpar
UF_VDAC_ce_point_t
optional point on failing objects
me_class
UF_VDAC_me_class_e_t
Modeler Error object class
comply_class
UF_VDAC_class_e_t
.. of active check criterion
item
int
.. of active check criterion (VDAC_crit_<comply_error>)

------------

UF_VDAC - UF_VDAC_ce_point_s
UF_VDAC_ce_point_s
(view source)
Defined in: uf_vdac.h
Also known as:
UF_VDAC_ce_point_t
UF_VDAC_ce_point_p_t
UF_VDAC_ce_point_c_t
UF_VDAC_ce_point_pc_t
Overview
Comply error parametric point info
Data Members
params [ 2 ]
double
u and v parameters of point3
point3
UF_VDAC_point_t
3D coordinates of worst case
uvector
UF_VDAC_vec3_t
(unit) vector
ug_eid
tag_t
object identifier

------------

UF_VDAC - UF_VDAC_ce_s
UF_VDAC_ce_s
(view source)
Defined in: uf_vdac.h
Also known as:
UF_VDAC_ce_t
UF_VDAC_ce_p_t
UF_VDAC_ce_c_t
UF_VDAC_ce_pc_t
Overview
comply errors of a check criterion key
Data Members
key_info
UF_VDAC_cckey_t
comply error check criterion key info
item_count
int
number of comply error items size of array items
items
UF_VDAC_ce_item_pc_t
array of comply error items

------------

UF_VDAC - UF_VDAC_class_info_s
UF_VDAC_class_info_s
(view source)
Defined in: uf_vdac.h
Also known as:
UF_VDAC_class_info_t
UF_VDAC_class_info_p_t
UF_VDAC_class_info_c_t
UF_VDAC_class_info_pc_t
Overview
comply error object class check criterion key info
Data Members
comply_class
UF_VDAC_class_e_t
comply error object class
num_infos
int
number of check criterion keys with violations
size of array item_infos
key_infos
UF_VDAC_cckey_pc_t
array of comply error check criterion key infos

------------

UF_VDAC - UF_VDAC_fo_ce_s
UF_VDAC_fo_ce_s
(view source)
Defined in: uf_vdac.h
Also known as:
UF_VDAC_fo_ce_t
UF_VDAC_fo_ce_p_t
UF_VDAC_fo_ce_c_t
UF_VDAC_fo_ce_pc_t
Overview
Faulty Object Check Criterion Key Comply Errors
Data Members
faulty
tag_t
faulty object iddentifier
crit_count
int
number of violated criteria
criteria
UF_VDAC_cckey_ce_item_pc_t
array of criteria with violations

------------

UF_VDAC - UF_VDAC_fo_neighbor_s
UF_VDAC_fo_neighbor_s
(view source)
Defined in: uf_vdac.h
Also known as:
UF_VDAC_fo_neighbor_t
UF_VDAC_fo_neighbor_p_t
UF_VDAC_fo_neighbor_c_t
UF_VDAC_fo_neighbor_pc_t
Overview
Linked List Item of neighbors of a faulty object
Data Members
next
UF_VDAC_fo_neighbor_p_t
neighbor
tag_t
neighbor object identifier
fo_type
UF_VDAC_fo_type_e_t
type of neighbor object

------------

UF_VDAC - UF_VDAC_fo_neighbors_s
UF_VDAC_fo_neighbors_s
(view source)
Defined in: uf_vdac.h
Also known as:
UF_VDAC_fo_neighbors_t
UF_VDAC_fo_neighbors_p_t
UF_VDAC_fo_neighbors_c_t
UF_VDAC_fo_neighbors_pc_t
Overview
Faulty Object Neighbors Info
Data Members
faulty
tag_t
faulty object identifier
fo_type
UF_VDAC_fo_type_e_t
faulty object type
oclass
UF_VDAC_class_e_t
comply error object class
first
UF_VDAC_fo_neighbor_pc_t
address of first linked list neighbor member or NULL
count
int
number of list members

------------

UF_VDAC - UF_VDAC_item_options_s
UF_VDAC_item_options_s
(view source)
Defined in: uf_vdac.h
Also known as:
UF_VDAC_item_options_t
UF_VDAC_item_options_p_t
UF_VDAC_item_options_c_t
UF_VDAC_item_options_pc_t
Overview
toggles that describe an VDAC_item_t item
Data Members
log_violations:1
unsigned int
generate detailed criteria report
has_no_item_value:1
unsigned int
the item has no check value; log no error value
is_integer_item:1
unsigned int
is_absolute_value:1
unsigned int
is_degree_value:1
unsigned int
an angle [degree]
is_distance_value:1
unsigned int
a distance; usually [mm] or [inch]
is_area_value:1
unsigned int
an area; usually [mm2] or [inch2]
is_volume_value:1
unsigned int
an volume; usually [mm3] or [inch3]
has_two_object_ids:1
unsigned int
log two tags
is_object_edge_eid:1
unsigned int
to distinguish an edge curve from a curve tag
is_object_id2_feat:1
unsigned int
object_id2 represents a feature component
has_two_ce_values:1
unsigned int
log two error values
is_font:1
unsigned int
value is a font number
el_gcpar:1
unsigned int
two point entries
el_ptpar:1
unsigned int
one point entry
el_uv_pair:1
unsigned int
log uv parameter pair
el_vector:1
unsigned int
log vector variant of el_gcpar or el_ptpar

------------

UF_VDAC - UF_VDAC_list_head_s
UF_VDAC_list_head_s
(view source)
Defined in: uf_vdac.h
Also known as:
UF_VDAC_list_head_t
UF_VDAC_list_head_p_t
UF_VDAC_list_head_c_t
UF_VDAC_list_head_pc_t
Overview
Object Identifier list head
Data Members
lh_p
UF_VDAC_list_lh_p_t
address of VDAC list header
first
UF_VDAC_list_pc_t
address of first linked list member or NULL
count
int
number of list members

------------

UF_VDAC - UF_VDAC_list_s
UF_VDAC_list_s
(view source)
Defined in: uf_vdac.h
Also known as:
UF_VDAC_list_t
UF_VDAC_list_p_t
UF_VDAC_list_c_t
UF_VDAC_list_pc_t
Overview
linked list of Object Identifiers
Data Members
next
UF_VDAC_list_p_t
Pointer to the next list member
eid
tag_t
Object Identifier

------------

UF_VDAC - UF_VDAC_point_s
UF_VDAC_point_s
(view source)
Defined in: uf_vdac.h
Also known as:
UF_VDAC_point_t
UF_VDAC_point_p_t
UF_VDAC_point_c_t
UF_VDAC_point_pc_t
Data Members
xyz [ 3 ]
double
3D point / vertex, x,y,z coordinates, xyz[2] = z-coordinate

------------

UF_VDAC - UF_VDAC_text_list_s
UF_VDAC_text_list_s
(view source)
Defined in: uf_vdac.h
Also known as:
UF_VDAC_text_list_t
UF_VDAC_text_list_p_t
UF_VDAC_text_list_c_t
UF_VDAC_text_list_pc_t
Overview
linked list of text strings
Data Members
next
UF_VDAC_text_list_p_t
pointer to the next list member or NULL
text
const char*
text pointer
text_length
int
text length: number of characters in string,
excluding the '\0' terminator

------------

UF_VDAC - UF_VDAC_vec3_s
UF_VDAC_vec3_s
(view source)
Defined in: uf_vdac.h
Also known as:
UF_VDAC_vec3_t
UF_VDAC_vec3_p_t
UF_VDAC_vec3_c_t
UF_VDAC_vec3_pc_t
Overview
Definition for 3-D vector
Data Members
v3 [ 3 ]
double

------------

UF_VIEW - UF_VIEW_edge_display_options_s
UF_VIEW_edge_display_options_s
(view source)
Defined in: uf_view.h
Also known as:
UF_VIEW_edge_display_options_t
UF_VIEW_edge_display_options_p_t
Overview
Structure UF_VIEW_edge_display_options_t specifies options that
control the display of hidden edges, silhouettes, and smooth edges
in a view of type UF_VIEW_MODEL_TYPE.
Function
UF_VIEW_ask_surface_display_options
returns the edge display options of a view, and function
UF_VIEW_set_surface_display_options
modifies the edge display options of a view.
See Also
UF_VIEW_smooth_edges_t
Data Members
hidden_edge_mode
int
Hidden edge style for the view
The following constants are valid :
UF_VIEW_HIDDEN_EDGES_SOLID,
UF_VIEW_HIDDEN_EDGES_INVIS,
UF_VIEW_HIDDEN_EDGES_DASHED,
UF_VIEW_HIDDEN_EDGES_GRAY_THIN
silhouette_mode
int
Silhouettes flag (on or off) in the view
The following constants are valid :
UF_VIEW_SILHOUETTES_ON and
UF_VIEW_SILHOUETTES_OFF
smooth_edges_mode
UF_VIEW_smooth_edges_t
Smooth edges flag (on or off) in the view
The following constants are valid :
UF_VIEW_SMOOTH_EDGES_ON and
UF_VIEW_SMOOTH_EDGES_OFF
smooth_edge_color
int
Smooth edges color in the view
The following values are valid :
UF_OBJ_COLOR_ORIGINAL,
[ 1 - 216 ]
smooth_edge_font
int
Smooth edges font in the view
The following constants are valid :
UF_OBJ_FONT_ORIGINAL,
UF_OBJ_FONT_SOLID,
UF_OBJ_FONT_DASHED,
UF_OBJ_FONT_PHANTOM,
UF_OBJ_FONT_CENTERLINE,
UF_OBJ_FONT_DOTTED,
UF_OBJ_FONT_LONG_DASHED and
UF_OBJ_FONT_DOTTED_DASHED
smooth_edge_width
int
Smooth edges width in the view
The following constants are valid :
UF_OBJ_WIDTH_ORIGINAL,
UF_OBJ_WIDTH_THIN,
UF_OBJ_WIDTH_NORMAL and
UF_OBJ_WIDTH_THICK
smooth_edge_angle_tolerance
double
Smooth edge angle tolerance in the view,
The angle is specified in degrees.
It has a range from 0.00001 to 30.0.

------------

UF_VIEW - UF_VIEW_fog_options_s
UF_VIEW_fog_options_s
(view source)
Defined in: uf_view.h
Also known as:
UF_VIEW_fog_options_t
UF_VIEW_fog_options_p_t
Overview
Structure UF_VIEW_fog_options_t specifies options that control the
application of fog in a view of type UF_VIEW_MODEL_TYPE.
Function
UF_VIEW_ask_fog_options
returns the fog options of a view, and function
UF_VIEW_set_fog_options
modifies the fog options of a view.
Data Members
fog_mode
int
Fog mode in view
The following constants are valid :
UF_VIEW_FOG_OFF,
UF_VIEW_FOG_LINEAR,
UF_VIEW_FOG_LIGHT and
UF_VIEW_FOG_HEAVY
fog_color [ 3 ]
double
Fog color
[0] = red,
[1] = green,
[2] = blue
Each color has a range from 0.0 to 1.0.
fog_front
double
Front fog plane has a range from 0 to 100
and is only valid for
fog_mode = UF_VIEW_FOG_LINEAR
fog_back
double
Back fog plane has a range from 0 to 100
and is only valid for
fog_mode = UF_VIEW_FOG_LINEAR.
fog_rate
double
The fog density which has a range from 0
to 100. This setting is only valid when
the fog_mode is set to
UF_VIEW_FOG_LIGHT or UF_VIEW_FOG_HEAVY.

------------

UF_VIEW - UF_VIEW_light_attributes_s
UF_VIEW_light_attributes_s
(view source)
Defined in: uf_view.h
Also known as:
UF_VIEW_light_attributes_t
UF_VIEW_light_attributes_p_t
Overview
The structure UF_VIEW_light_attributes_t below is used to define
the light attributes.
Data Members
red
int
Amount of red color to put in the light. Must be one of the following values [0-255]
green
int
Amount of green color to put in the light. Must be one of the following values [0-255]
blue
int
Amount of blue color to put in the light. Must be one of the following values [0-255]
intensity
double
Intensity of light. Must be in the range from 0.0 to 1.0
intensity_factor
UF_VIEW_light_intensity_factor_t
Intensity factor of light.
Only used for point light and spot light.
Only used when not constant fall off.
Settings are defined in
UF_VIEW_light_intensity_factor_t
fall_off
UF_VIEW_light_fall_off_t
Fall off setting of light.
Only used for point light and spot light.
Settings are defined in
UF_VIEW_light_fall_off_t
cone_angle
double
Value of cone angle for spot light. Must be between 0.0 and 180.0.
delta_angle
double
Value of delta angle for spot light. Must be between 0.0 and 180.0.
beam_fall_off
UF_VIEW_light_beam_fall_off_t
Beam fall for spot light.
Settings are defined in
UF_VIEW_light_beam_fall_off_t
scattering
logical
Spot light should use scattering or not. true if light is to use
scattering, false if not.
generate_shadows
logical
Light should generate shadows or not. true if light is to
generate shadows, false if not. Not used if ambient light or
eye light.
detail
UF_VIEW_light_detail_t
Detail setting for light. Not used if ambient light or
eye light. Settings are defined in
UF_VIEW_light_detail_t
edge
UF_VIEW_light_edge_t
Edge setting for light. Not used if ambient light or
eye light. Settings are defined in
UF_VIEW_light_edge_t

------------

UF_VIEW - UF_VIEW_lighting_s
UF_VIEW_lighting_s
(view source)
Defined in: uf_view.h
Also known as:
UF_VIEW_lighting_t
UF_VIEW_lighting_p_t
Overview
Each view is allowed a maximum of 8 lights.  Each view could have different
shininess factor( ranging from 0.0(UF_VIEW_MIN_SHININESS) to
1.0(UF_VIEW_MAX_SHININESS).  Each view could have lights two-sided or
not(UF_VIEW_two_sided_t).  Two sided lighting is useful for entities such
as sheet bodies to make sure both side of sheet bodies are lit correctly.
The structure UF_VIEW_lighting_t below is used to define lighting for
each view:
Data Members
two_sided_light
int
The valid values are :
UF_VIEW_TWO_SIDED_OFF and
UF_VIEW_TWO_SIDED_ON
shininess
double
Shininess factor (range is from 0.0 - 1.0)
light_count
int
Total number of lights not to exceed a count of
8 lights.
lights [ UF_VIEW_MAX_VIEW_LIGHTS ]
UF_VIEW_light_t

------------

UF_VIEW - UF_VIEW_lights_s
UF_VIEW_lights_s
(view source)
Defined in: uf_view.h
Also known as:
UF_VIEW_light_t
UF_VIEW_light_p_t
Overview
The structure UF_VIEW_light_t below is used to define
the light attributes.
For fixed to the part light, the direction is Work Coordinate System based.
For fixed to observer, the direction of light is based on screen space
(which is defined as +x to the right, +y up and +z out of the screen).
Data Members
light_name
UF_VIEW_light_name_t
Light name which is limited to 40
characters. Can be either canned or
user defined
light_type
UF_VIEW_light_type_t
Lights may be of different types as
defined in
UF_VIEW_light_type_t
light_mode
UF_VIEW_light_mode_t
Specifies whether the light is fixed to
the observer or fixed to the part. If
fixed to the part, the light direction
is based on the WCS. For fixed to the
observer, the direction of the light is
based on the screen space (which is
defined as +x to the right, +y up and
+z out of the screen.
location
UF_VIEW_light_source_t
Together with 'to', determines the
direction of the light.
to
UF_VIEW_light_source_t
Together with 'location', determines the
direction of the light.

------------

UF_VIEW - UF_VIEW_shaded_edge_options_s
UF_VIEW_shaded_edge_options_s
(view source)
Defined in: uf_view.h
Also known as:
UF_VIEW_shaded_edge_options_t
UF_VIEW_shaded_edge_options_p_t
Overview
Structure UF_VIEW_shaded_edge_options_t specifies options that
control the display of edges of shaded faces in a view of type
UF_VIEW_MODEL_TYPE.
Function
UF_VIEW_ask_shaded_edge_options
returns the shaded edge options of a view, and function
UF_VIEW_set_shaded_edge_options
modifies the shaded edge options of a view.
See Also
UF_VIEW_shaded_edge_style_t
UF_VIEW_hidden_edge_style_t
Data Members
shaded_edge_style
UF_VIEW_shaded_edge_style_t
shaded_edge_color
int
hidden_edge_style
UF_VIEW_hidden_edge_style_t

------------

UF_VIEW - UF_VIEW_vde_data_and_type_s
UF_VIEW_vde_data_and_type_s
(view source)
Defined in: uf_view.h
Also known as:
UF_VIEW_vde_data_and_type_t
UF_VIEW_vde_data_and_type_p_t
Overview
This structure contains the view dependent edit data and type for an object
Data Members
view_tag
tag_t
View of modification
start_parameter
double
Starting parameter of this
modification (0.0 - 1.0)
end_parameter
double
Ending parameter of this
modification (0.0 - 1.0)
color
int
Color of modification (see uf_obj.h
for possible values )
font
int
Font of modification
(see uf_obj.h for possible values )
width
int
Width of modification
(see uf_obj.h for possible values )
vde_type
UF_VIEW_vde_type_t
Type of modification

------------

UF_VIEW - UF_VIEW_vde_data_s
UF_VIEW_vde_data_s
(view source)
Defined in: uf_view.h
Also known as:
UF_VIEW_vde_data_t
UF_VIEW_vde_data_p_t
Overview
This structure contains the view dependent edit data for an object.
Data Members
view_tag
tag_t
View of modification
start_parameter
double
Starting parameter of this
modification (0.0 - 1.0)
end_parameter
double
Ending parameter of this
modification (0.0 - 1.0)
color
int
Color of modification (see uf_obj.h
for possible values )
font
int
Font of modification
(see uf_obj.h for possible values )
width
int
Width of modification
(see uf_obj.h for possible values )

------------

UF_VIEW - UF_VIEW_visualization_s
UF_VIEW_visualization_s
(view source)
Defined in: uf_view.h
Also known as:
UF_VIEW_visualization_t
Overview
These fields correspond to the options on the view visualization dialog.
The values are string defined constants that are found in the uf_view.h and
uf_obj.h header files
Data Members
display_mode
int
Display mode for the view.
The following constants are valid :
UF_VIEW_NOT_SHADED,
UF_VIEW_PARTIALLY_SHADED,
UF_VIEW_FULLY_SHADED and
UF_VIEW_ANALYSIS_SHADED
hidden_edge_mode
int
Hidden edge style for the view
The following constants are valid :
UF_VIEW_HIDDEN_EDGES_SOLID,
UF_VIEW_HIDDEN_EDGES_INVIS,
UF_VIEW_HIDDEN_EDGES_DASHED,
UF_VIEW_HIDDEN_SURFACE and
UF_VIEW_HIDDEN_EDGES_GRAY_THIN
silhouette_mode
int
Silhouettes flag (on or off) in the view
The following constants are valid :
UF_VIEW_SILHOUETTES_ON and
UF_VIEW_SILHOUETTES_OFF
smooth_edges_mode
UF_VIEW_smooth_edges_t
Smooth edges flag (on or off) in the view
The following constants are valid :
UF_VIEW_SMOOTH_EDGES_ON and
UF_VIEW_SMOOTH_EDGES_OFF
smooth_edge_color
int
Smooth edges color in the view
The following values are valid :
UF_OBJ_COLOR_ORIGINAL,
[ 1 - 216 ]
smooth_edge_font
int
Smooth edges font in the view
The following constants are valid :
UF_OBJ_FONT_ORIGINAL,
UF_OBJ_FONT_SOLID,
UF_OBJ_FONT_DASHED,
UF_OBJ_FONT_PHANTOM,
UF_OBJ_FONT_CENTERLINE,
UF_OBJ_FONT_DOTTED,
UF_OBJ_FONT_LONG_DASHED and
UF_OBJ_FONT_DOTTED_DASHED
smooth_edge_width
int
Smooth edges width in the view
The following constants are valid :
UF_OBJ_WIDTH_ORIGINAL,
UF_OBJ_WIDTH_THIN,
UF_OBJ_WIDTH_NORMAL and
UF_OBJ_WIDTH_THICK
smooth_edge_angle_tolerance
double
Smooth edge angle tolerance in the view.
The angle is specified in degrees.
It has a range from 0.00001 to 30.0.
fog_mode
int
Fog mode in view
The following constants are valid :
UF_VIEW_FOG_OFF,
UF_VIEW_FOG_LINEAR,
UF_VIEW_FOG_LIGHT and
UF_VIEW_FOG_HEAVY
fog_color [ 3 ]
double
Fog color
[0] = red,
[1] = green,
[2] = blue
Each color has a range from 0.0 to 1.0.
fog_front
double
Front fog plane has a range from 0 to 100
and is only valid for
fog_mode = UF_VIEW_FOG_LINEAR
fog_back
double
Back fog plane has a range from 0 to 100
and is only valid for
fog_mode = UF_VIEW_FOG_LINEAR.
fog_rate
double
The fog density which has a range from 0
to 100. This setting is only valid when
the fog_mode is set to
UF_VIEW_FOG_LIGHT or UF_VIEW_FOG_HEAVY.

------------

UF_WAVE - UF_WAVE_linked_feature_info_s
UF_WAVE_linked_feature_info_s
(view source)
Defined in: uf_wave_types.h
Also known as:
UF_WAVE_linked_feature_info_t
UF_WAVE_linked_feature_info_p_t
Overview
UF_WAVE_linked_feature_info_s is used to store inter part related names
for linked geometry. This includes its associated feature name,
its owning part name, and its source part(s) name.
Data Members
feature_name
char *
The name of the associated feature
owning_part_name
char *
The name of the owning part
source_part_name
char *
The name of the source part(s)

------------

UF_WEIGHT - UF_WEIGHT_exceptions_s
UF_WEIGHT_exceptions_s
(view source)
Defined in: uf_weight.h
Also known as:
UF_WEIGHT_exceptions_t
UF_WEIGHT_exceptions_p_t
Overview
Structure for returning exceptions generated while calculating weight data.
All the fields except n_exceptions are arrays.
Each element in turn describes a single exception;
the nth element of each array describes the same exception.
The entire exceptions struct must be initialised before use by calling
UF_WEIGHT_init_exceptions
The entire exceptions struct can be freed as a whole by calling
UF_WEIGHT_free_exceptions
Data Members
n_exceptions
int
The total number of exceptions found.
reasons
UF_WEIGHT_exception_reason_t *
An array of UF_WEIGHT_exception_reasons_t's, detailing
the nature of each exception.
part_names
char * *
<OF>
Array of the names of the parts generating each exception.
Where a component generated the exception, the name of
its prototype part is given.
comp_names
char * *
<OF>
Array of the names of the components generating each
exception. Where a part generated the exception, this
is the empty string "".
on_part
logical *
Array of logicals. True if a part generated the
exception, false if it was a component.
repeat_counts
int *
The number of times the given exception (defined by the
reason and the part and/or component involved) occurred
during the traversal. Because this field is present,
no two exceptions should be the same.

------------

UF_WEIGHT - UF_WEIGHT_properties_s
UF_WEIGHT_properties_s
(view source)
Defined in: uf_weight.h
Also known as:
UF_WEIGHT_properties_t
UF_WEIGHT_properties_p_t
UF_WEIGHT_properties_pc_t
Overview
Structure for passing weight management data.
If the cache_state is UF_WEIGHT_no_cache, the geometric values and their
errors are all set to 0.0, and the units to UF_WEIGHT_units_km.
If the cache_state is UF_WEIGHT_asserted or UF_WEIGHT_inherited, then
density, mass and volume are as follows:
a) either mass is UF_WEIGHT_asserted and the other two are UF_WEIGHT_unknown
b) or two of them are UF_WEIGHT_asserted and the third is UF_WEIGHT_implied.
(This is the only situation in which UF_WEIGHT_implied can be used.)
If the volume_state is UF_WEIGHT_unknown, then the cofm_state and the
mofi_state will also be UF_WEIGHT_unknown.  If the cofm_state is
UF_WEIGHT_unknown, then the mofi_state will be UF_WEIGHT_unknown.
Data Members
units
UF_WEIGHT_units_type_t
the units in which the rest of the data is
returned
cache_state
UF_WEIGHT_state_type_t
the state of the returned data. This can be
UF_WEIGHT_no_cache if the data was not available,
UF_WEIGHT_cached if it was calculated from
geometry or other properties,
UF_WEIGHT_asserted if it was directly asserted,
and
UF_WEIGHT_inherited if it was data on a component
found from an assertion on a part.
It cannot be UF_WEIGHT_implied or
UF_WEIGHT_unknown.
accuracy
double
the accuracy of the calculated data when the
cache_state is UF_WEIGHT_cached, in which case it
must be 0.9, 0.99, 0.999, 0.9999, 0.99999 or
0.999999. It is 1.0 if the cache_state is
UF_WEIGHT_asserted or UF_WEIGHT_inherited, or if
no solids were involved in the calculation.
density
double
the density of the data, equal to mass/volume.
This is 0.0 if the density_state is
UF_WEIGHT_unknown.
density_state
UF_WEIGHT_state_type_t
the state of the density data. This is normally
the same value as cache_state, but it can be
UF_WEIGHT_unknown or UF_WEIGHT_implied if the
cache_state is UF_WEIGHT_asserted or
UF_WEIGHT_inherited.
volume
double
the volume of the data, equal to mass/density.
This is 0.0 is the density_state is
UF_WEIGHT_unknown.
volume_error
double
the estimated error range for the volume, in the
same units as the volume.
volume_state
UF_WEIGHT_state_type_t
the state of the volume data. This is normally
the same value as cache_state, but it can be
UF_WEIGHT_unknown or UF_WEIGHT_implied if the
cache_state is UF_WEIGHT_asserted or
UF_WEIGHT_inherited.
mass
double
the mass of the data, equal to volume x density.
This is 0.0 if the mass_state is
UF_WEIGHT_unknown.
mass_error
double
the estimated error range for the mass, in the
same units as the mass.
mass_state
UF_WEIGHT_state_type_t
the state of the mass data. This is normally
the same value as cache_state, but it can be
UF_WEIGHT_implied if the cache_state is
UF_WEIGHT_asserted or UF_WEIGHT_inherited.
area
double
the surface area of the data.
area_error
double
the estimated error range for the surface area,
in the same units as the area.
area_state
UF_WEIGHT_state_type_t
the state of the area field. This is normally
the same value as cache_state, but it can be
UF_WEIGHT_unknown if the cache_state is
UF_WEIGHT_asserted or UF_WEIGHT_inherited.
center_of_mass [ 3 ]
double
the X, Y and Z co-ordinates of the center of
mass, in absolute co-ordinates. These are set
to 0.0 if the cofm_state is UF_WEIGHT_unknown.
cofm_error
double
the estimated error range for the center of mass,
in the same length units. This represents the
radius of a sphere of uncertainty drawn around
the center of mass.
cofm_state
UF_WEIGHT_state_type_t
the state of the center of mass field. This is
normally the same value as cache_state, but it
can be UF_WEIGHT_unknown if the cache_state is
UF_WEIGHT_asserted or UF_WEIGHT_inherited.
moments_of_inertia [ 3 ]
double
the XX, YY and ZZ moments of inertia about the
center of mass (in that order), using absolute
co-ordinates. These are set to 0.0 if the
mofi_state is UF_WEIGHT_unknown.
products_of_inertia [ 3 ]
double
the XY, XZ and YZ products of inertia about the
center of mass (in that order), using absolute
co-ordinates. These are set to 0.0 if the
mofi_state is UF_WEIGHT_unknown. These values
follow the mathematical convention that the
products of inertia are usually negative, unlike
the convention followed by most engineers.
mofi_error
double
the estimated error range for the moments and
products of inertia, in the same units. This
represents the +/- variation in each value.
mofi_state
UF_WEIGHT_state_type_t
the state of the moments and products of inertia
field. This is normally the same value as
cache_state, but it can be UF_WEIGHT_unknown if
the cache_state is UF_WEIGHT_asserted or
UF_WEIGHT_inherited.

------------

UF_WELD - UF_WELD_conn_parts_info_s
UF_WELD_conn_parts_info_s
(view source)
Defined in: uf_weld_types.h
Also known as:
UF_WELD_conn_parts_info_t
UF_WELD_conn_parts_info_p_t
Overview
Connection information
Data Members
num_sets
int
Number of sets
num_tags_in_set
int *
Number of tags in each set
body_tag
tag_p_t
Body tags of connected parts
and if the body tag is an
occurrence then ask for its
part occurrence tag to read the
attributes on the connected parts.
The body tags are stored in a linear
array in blocks of "num_tags_in_set".
That is body tags of first set starts
at 0 to (num_tags_in_set[0]-1) and for
second set it starts from
(num_tags_in_set[0]) to
(num_tags_in_set[1]-1)
and so on for "num_sets".

------------

UF_WELD - UF_WELD_spot_data_s
UF_WELD_spot_data_s
(view source)
Defined in: uf_weld_types.h
Also known as:
UF_WELD_spot_data_t
UF_WELD_spot_data_p_t
Overview
Spot weld Information. This structure is made obsolete in V20
Data Members
spot_point
tag_t
Spot point tag that
is in the Spot weld feature
face_loc
UF_WELD_spot_face_loc_p_t
Location of the spot on each set
of faces.
"face_loc[0]" corresponds to
top face

------------

UF_WELD - UF_WELD_spot_face_loc_s
UF_WELD_spot_face_loc_s
(view source)
Defined in: uf_weld_types.h
Also known as:
UF_WELD_spot_face_loc_t
UF_WELD_spot_face_loc_p_t
Overview
This structure contains the information regarding the faces involved in the
spot weld. This structure is made obsolete in V20
Data Members
face_tag
tag_t
Tag of the face on which the Projected
point lies . This will be a NULL_TAG if component
is NOT fully loaded, use 'face_handle' instead.
point [ 3 ]
double
Projected point location
face_normal [ 3 ]
double
Surface normal at the projected point
face_handle
char *
Entity handle of the face on which the Projected
point lies . This will be NULL if component
is fully loaded, use 'face_tag' instead. Use
UF_TAG_ask_tag_of_handle
to get the face tag once the corresponding component is loaded

------------

UF_WELD - UF_WELD_spot_face_location_s
UF_WELD_spot_face_location_s
(view source)
Defined in: uf_weld_types.h
Also known as:
UF_WELD_spot_face_location_t
UF_WELD_spot_face_location_p_t
Overview
This structure contains the information regarding the faces involved in the
spot weld
Data Members
face_tag
tag_t
Tag of the face on which the Projected
point lies
point [ 3 ]
double
Projected point location
face_normal [ 3 ]
double
Surface normal at the projected point

------------

UF_WELD - UF_WELD_spot_info_s
UF_WELD_spot_info_s
(view source)
Defined in: uf_weld_types.h
Also known as:
UF_WELD_spot_info_t
UF_WELD_spot_info_p_t
Overview
Spot weld Information
Data Members
spot_point
tag_t
Spot point tag that
is in the Spot weld feature
face_loc
UF_WELD_spot_face_location_p_t
Location of the spot on each set
of faces.
"face_loc[0]" corresponds to
top face

------------

