#ifndef NXOpen_CAM_WORKINSTRUCTIONBUILDER_HXX_INCLUDED
#define NXOpen_CAM_WORKINSTRUCTIONBUILDER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     CAM_WorkInstructionBuilder.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/CAM_WorkInstructionBuilder.hxx>
#include <NXOpen/Builder.hxx>
#include <NXOpen/libnxopencpp_cam_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace CAM
    {
        class WorkInstructionBuilder;
    }
    class Builder;
    namespace CAM
    {
        class _WorkInstructionBuilderBuilder;
        class WorkInstructionBuilderImpl;
        /** Represents the builder for Work Instruction  <br> To create a new instance of this class, use @link NXOpen::CAM::CAMSetup::CreateWorkInstructionBuilder  NXOpen::CAM::CAMSetup::CreateWorkInstructionBuilder @endlink  <br> 
         <br>  Created in NX9.0.3.  <br>  
        */
        class NXOPENCPP_CAMEXPORT  WorkInstructionBuilder : public NXOpen::Builder
        {
            private: WorkInstructionBuilderImpl * m_workinstructionbuilder_impl;
            private: friend class  _WorkInstructionBuilderBuilder;
            protected: WorkInstructionBuilder();
            public: ~WorkInstructionBuilder();
            /**Returns  the work instruction sheet number 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: int SheetNumber
            (
            );
            /**Sets  the work instruction sheet number 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            public: void SetSheetNumber
            (
                int sheetNumber /** sheetnumber */ 
            );
            /**Returns  the work instruction item name 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXString ItemName
            (
            );
            /**Sets  the work instruction item name 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            public: void SetItemName
            (
                const NXString & itemName /** itemname */ 
            );
            /**Sets  the work instruction item name 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            void SetItemName
            (
                const char * itemName /** itemname */ 
            );
            /**Returns  the template name 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXString TemplateName
            (
            );
            /**Sets  the template name 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            public: void SetTemplateName
            (
                const NXString & templateName /** templatename */ 
            );
            /**Sets  the template name 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            void SetTemplateName
            (
                const char * templateName /** templatename */ 
            );
            /**Returns  the selected camera 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXString CameraName
            (
            );
            /**Sets  the selected camera 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            public: void SetCameraName
            (
                const NXString & cameraName /** cameraname */ 
            );
            /**Sets  the selected camera 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            void SetCameraName
            (
                const char * cameraName /** cameraname */ 
            );
            /** Capture the current view using a new camera 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            public: void CaptureCurrentView
            (
            );
            /**Returns  the selected image 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXString ImageFile
            (
            );
            /**Sets  the selected image 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            public: void SetImageFile
            (
                const NXString & imageFile /** imagefile */ 
            );
            /**Sets  the selected image 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            void SetImageFile
            (
                const char * imageFile /** imagefile */ 
            );
            /** Returns the multi line text  @return  
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: std::vector<NXString> GetRichText
            (
            );
            /** Sets the multi line text 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            public: void SetRichText
            (
                const std::vector<NXString> & multiLineText /** multilinetext */ 
            );
            /** Returns the text color  @return  Array of 3 RGB values, each between 0 and 1 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: std::vector<double> GetTextColor
            (
            );
            /** Sets the text color 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            public: void SetTextColor
            (
                const std::vector<double> & textColor /** Array of 3 RGB values, each between 0 and 1 */
            );
            /**Returns  the text font face 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXString FontFace
            (
            );
            /**Sets  the text font face 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            public: void SetFontFace
            (
                const NXString & fontFace /** fontface */ 
            );
            /**Sets  the text font face 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            void SetFontFace
            (
                const char * fontFace /** fontface */ 
            );
            /**Returns  the text font size 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: int FontSize
            (
            );
            /**Sets  the text font size 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            public: void SetFontSize
            (
                int fontSize /** fontsize */ 
            );
            /**Returns  the selected video 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXString VideoFile
            (
            );
            /**Sets  the selected video 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            public: void SetVideoFile
            (
                const NXString & videoFile /** videofile */ 
            );
            /**Sets  the selected video 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            void SetVideoFile
            (
                const char * videoFile /** videofile */ 
            );
            /**Returns  the selected drawing 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXString Drawing
            (
            );
            /**Sets  the selected drawing 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            public: void SetDrawing
            (
                const NXString & drawing /** drawing */ 
            );
            /**Sets  the selected drawing 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            void SetDrawing
            (
                const char * drawing /** drawing */ 
            );
            /**Returns  the estimated time to execute these instructions 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: double TimeEstimate
            (
            );
            /**Sets  the estimated time to execute these instructions 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            public: void SetTimeEstimate
            (
                double timeEstimate /** timeestimate */ 
            );
            /** Add a Work Instruction sheet  @return  
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            public: int AddSheet
            (
            );
            /** Delete a Work Instruction sheet 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            public: void DeleteSheet
            (
                int sheetNum /** sheetnum */ 
            );
            /**Returns  the selected Program Group for Operation List 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXString OperListProgramGroup
            (
            );
            /**Sets  the selected Program Group for Operation List 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            public: void SetOperListProgramGroup
            (
                const NXString & programGroupName /** programgroupname */ 
            );
            /**Sets  the selected Program Group for Operation List 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            void SetOperListProgramGroup
            (
                const char * programGroupName /** programgroupname */ 
            );
            /**Returns  the selected Program Group for Tool List 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXString ToolListProgramGroup
            (
            );
            /**Sets  the selected Program Group for Tool List 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            public: void SetToolListProgramGroup
            (
                const NXString & programGroupName /** programgroupname */ 
            );
            /**Sets  the selected Program Group for Tool List 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            void SetToolListProgramGroup
            (
                const char * programGroupName /** programgroupname */ 
            );
            /**Returns  the user defined Sheet Title 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: NXString SheetTitle
            (
            );
            /**Sets  the user defined Sheet Title 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            public: void SetSheetTitle
            (
                const NXString & sheetTitle /** sheettitle */ 
            );
            /**Sets  the user defined Sheet Title 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            void SetSheetTitle
            (
                const char * sheetTitle /** sheettitle */ 
            );
            /** Move a Work Instruction sheet 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            public: void MoveSheet
            (
                int sheetNum /** sheetnum */ ,
                bool up /** up */ 
            );
            /** Commit the current master 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            public: void CommitMaster
            (
            );
            /** Commit the current item 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : nx_wi_authoring (" NX Work Instruction Authoring") */
            public: void CommitItem
            (
            );
            /** Update the items for the current sheet 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : cam_base ("CAM BASE") */
            public: void UpdateItemsInCurrentSheet
            (
                std::vector<NXString> & itemNames /** the string array */
            );
            /** Activate the captured view for a view item 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: void ActivateCapturedView
            (
            );
            /** Restore the previous view 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: void RestorePreviousView
            (
            );
            /** Delete the view camera 
             <br>  Created in NX9.0.3.  <br>  
             <br> License requirements : None */
            public: void DeleteViewCamera
            (
            );
        };
    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
