#ifndef NXOpen_PID_PIDMANAGER_HXX_INCLUDED
#define NXOpen_PID_PIDMANAGER_HXX_INCLUDED
//--------------------------------------------------------------------------
//  Header for C++ interface to JA API
//--------------------------------------------------------------------------
//
//  Source File:
//     PID_PidManager.ja
//
//  Generated by:
//     apiwrap
//
//  WARNING:
//    This file is automatically generated - do not edit by hand
//
#ifdef _MSC_VER
#pragma once
#endif

#include <NXOpen/NXDeprecation.hxx>
#include <vector>
#include <NXOpen/NXString.hxx>
#include <NXOpen/Callback.hxx>
#include <NXOpen/Assemblies_Partition.hxx>
#include <NXOpen/Diagramming_SheetElement.hxx>
#include <NXOpen/PDM_ConnectionElementRevision.hxx>
#include <NXOpen/PDM_CrossSheetReference.hxx>
#include <NXOpen/PDM_LogicalElementRevision.hxx>
#include <NXOpen/PDM_SheetRevision.hxx>
#include <NXOpen/PID_BulkEditBuilder.hxx>
#include <NXOpen/PID_DesignContextBuilder.hxx>
#include <NXOpen/PID_EquipmentBuilder.hxx>
#include <NXOpen/PID_FileNewApplicationBuilder.hxx>
#include <NXOpen/PID_FlowDirectionArrow.hxx>
#include <NXOpen/PID_FlowDirectionArrowBuilder.hxx>
#include <NXOpen/PID_OffSheetConnectorBuilder.hxx>
#include <NXOpen/PID_PipeBuilder.hxx>
#include <NXOpen/PID_PortEquipmentBuilder.hxx>
#include <NXOpen/PID_PreferencesBuilder.hxx>
#include <NXOpen/TaggedObject.hxx>
#include <NXOpen/libpidopencpp_exports.hxx>

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable:4996)
#endif
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

namespace NXOpen
{
    namespace PID
    {
        class PidManager;
    }
    class Session;
    namespace Assemblies
    {
        class Partition;
    }
    namespace Diagramming
    {
        class SheetElement;
    }
    namespace PID
    {
        class BulkEditBuilder;
    }
    namespace PID
    {
        class DesignContextBuilder;
    }
    namespace PID
    {
        class Equipment;
    }
    namespace PID
    {
        class EquipmentBuilder;
    }
    namespace PID
    {
        class FileNewApplicationBuilder;
    }
    namespace PID
    {
        class FlowDirectionArrow;
    }
    namespace PID
    {
        class FlowDirectionArrowBuilder;
    }
    namespace PID
    {
        class OffSheetConnector;
    }
    namespace PID
    {
        class OffSheetConnectorBuilder;
    }
    namespace PID
    {
        class Pipe;
    }
    namespace PID
    {
        class PipeBuilder;
    }
    namespace PID
    {
        class PortEquipment;
    }
    namespace PID
    {
        class PortEquipmentBuilder;
    }
    namespace PID
    {
        class PreferencesBuilder;
    }
    namespace PID
    {
        class Sheet;
    }
    class Part;
    namespace PID
    {
        class PidManagerImpl;
        /** A manager to deal with all objects.  <br> To obtain an instance of this class, refer to @link NXOpen::Session  NXOpen::Session @endlink  <br> 
         <br>  Created in NX11.0.1.  <br>  
        */
        class PIDOPENCPPEXPORT  PidManager
        {
            private: PidManagerImpl * m_pidmanager_impl;
            private: NXOpen::Session* m_owner;
            /// \cond NX_NO_DOC 
            public: explicit PidManager(NXOpen::Session *owner);


            /// \endcond 
            public: 
            /**Returns the tag of this object.  */
            tag_t Tag() const; 
            private: static PidManager* thePidManager;
            /** Returns the PidManager object for the running session which serves as the 'gateway' class for the application API.  
                References to all other objects in this API are obtained either directly or indirectly via methods and properties on this class.  
                Platform Session should be initialized using 'GetSession' method from NXOpen API prior to this call.  
            */
            public: static PidManager* GetPidManager(NXOpen::Session *owner);
            public: ~PidManager();
            /** Creates a @link PID::EquipmentBuilder PID::EquipmentBuilder@endlink .  @return  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_reader ("NX P and ID Design Reader") OR nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::EquipmentBuilder * CreateEquipmentBuilder
            (
                NXOpen::Part * part /** the part that will own the object */,
                NXOpen::PID::Equipment * equipment /** @link PID::Equipment PID::Equipment@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link PID::PortEquipmentBuilder PID::PortEquipmentBuilder@endlink .  @return  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_reader ("NX P and ID Design Reader") OR nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::PortEquipmentBuilder * CreatePortEquipmentBuilder
            (
                NXOpen::Part * part /** the part that will own the object */,
                NXOpen::PID::PortEquipment * portEquipment /** @link PID::PortEquipment PID::PortEquipment@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link PID::PipeBuilder PID::PipeBuilder@endlink .  @return  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_reader ("NX P and ID Design Reader") OR nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::PipeBuilder * CreatePipeBuilder
            (
                NXOpen::Part * part /** the part that will own the object */,
                NXOpen::PID::Pipe * pipe /** @link Diagramming::Connection Diagramming::Connection@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link PID::FlowDirectionArrowBuilder PID::FlowDirectionArrowBuilder@endlink .  @return  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_reader ("NX P and ID Design Reader") OR nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::FlowDirectionArrowBuilder * CreateFlowDirectionArrowBuilder
            (
                NXOpen::Part * part /** part */ ,
                NXOpen::PID::FlowDirectionArrow * flowDirectionArrow /** @link PID::FlowDirectionArrow PID::FlowDirectionArrow@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link PID::PreferencesBuilder PID::PreferencesBuilder@endlink .  @return  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_reader ("NX P and ID Design Reader") OR nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::PreferencesBuilder * CreatePreferencesBuilder
            (
                NXOpen::Part * part /** the part that will own the object */,
                NXOpen::PID::Sheet * sheet /** sheet */ 
            );
            /** Creates a @link PID::BulkEditBuilder PID::BulkEditBuilder@endlink   @return  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::BulkEditBuilder * CreateBulkEditBuilder
            (
                NXOpen::Part * part /** part */ 
            );
            /** Creates a @link PID::OffSheetConnectorBuilder PID::OffSheetConnectorBuilder@endlink .  @return  
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_reader ("NX P and ID Design Reader") OR nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::OffSheetConnectorBuilder * CreateOffSheetConnectorBuilder
            (
                NXOpen::Part * part /** the part that will own the object */,
                NXOpen::PID::OffSheetConnector * oscObject /** @link Diagramming::Annotation Diagramming::Annotation@endlink  to be edited, if NULL then create a new one */
            );
            /** Creates a @link NXOpen::PID::FileNewApplicationBuilder NXOpen::PID::FileNewApplicationBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::FileNewApplicationBuilder * CreateFilenewapplicationBuilder
            (
            );
            /** Creates a @link NXOpen::PID::DesignContextBuilder NXOpen::PID::DesignContextBuilder@endlink   @return  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_pid_design_reader ("NX P and ID Design Reader") OR nx_pid_design_author ("NX P and ID Design Author") */
            public: NXOpen::PID::DesignContextBuilder * CreateDesignContextBuilder
            (
            );
            /** Delete Sheet Elements. 
             <br>  Created in NX11.0.1.  <br>  
             <br> License requirements : nx_pid_design_author ("NX P and ID Design Author") */
            public: void DeleteSheetElements
            (
                const std::vector<NXOpen::Diagramming::SheetElement *> & sheetElementsDel /** Sheet Elements to be checked*/
            );
            /** Opens a @link NXOpen::PID::Sheet NXOpen::PID::Sheet@endlink  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_pid_design_reader ("NX P and ID Design Reader") OR nx_pid_design_author ("NX P and ID Design Author") */
            public: void OpenSheet
            (
                NXOpen::PID::Sheet * sheet /** sheet */ 
            );
            /** Loads a @link NXOpen::Assemblies::Partition NXOpen::Assemblies::Partition@endlink  
             <br>  Created in NX11.0.0.  <br>  
             <br> License requirements : nx_pid_design_reader ("NX P and ID Design Reader") OR nx_pid_design_author ("NX P and ID Design Author") */
            public: void LoadSystem
            (
                NXOpen::Assemblies::Partition * system /** system */ 
            );
        }; //lint !e1712 default constructor not defined for class  

    }
}

#ifdef _MSC_VER
#pragma warning(pop)
#endif
#ifdef __GNUC__
#ifndef NX_NO_GCC_DEPRECATION_WARNINGS
#pragma GCC diagnostic warning "-Wdeprecated-declarations"
#endif
#endif

#undef EXPORTLIBRARY
#endif
